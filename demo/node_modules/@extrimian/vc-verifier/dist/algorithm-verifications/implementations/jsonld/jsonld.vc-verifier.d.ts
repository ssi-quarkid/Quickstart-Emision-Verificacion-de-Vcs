import { VCVerifier } from "../../vc-verifier";
import { DIDDocument, Purpose, VerificationMethod } from "@extrimian/did-core";
import { VerifiableCredential } from "@extrimian/vc-core";
export declare abstract class JsonLDVCVerifier implements VCVerifier {
    private params;
    private cache;
    private didDocumentResolver;
    contextDictionary: {
        key: string;
        value: string;
    }[];
    constructor(params: {
        useCache: boolean;
    });
    abstract getSuite(params?: {
        vc: VerifiableCredential;
        purpose: Purpose;
        didDocumentResolver: (did: string) => Promise<DIDDocument>;
    }): Promise<any>;
    vmConvertions(vm: VerificationMethod): VerificationMethod;
    customDocLoader: (url: string) => Promise<any>;
    protected getVerificationMethod<TVerificationMethod extends VerificationMethod = VerificationMethod>(vmId: string): Promise<TVerificationMethod>;
    documentLoader: any;
    verify(vc: VerifiableCredential, purpose: Purpose, didDocumentResolver: (did: string) => Promise<DIDDocument>): Promise<{
        result: boolean;
        errors?: string[];
    }>;
    private cacheGetter;
    private getPurpose;
}

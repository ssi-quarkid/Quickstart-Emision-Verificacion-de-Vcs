"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VCVerifierService = void 0;
var inject_verifier_decorator_1 = require("../decorators/inject-verifier-decorator");
var axios_1 = require("axios");
var vc_core_1 = require("@extrimian/vc-core");
var error_code_1 = require("../errors/error-code");
var VCVerifierService = /** @class */ (function () {
    function VCVerifierService(params) {
        this.params = params;
    }
    VCVerifierService.prototype.verify = function (vc, purpose) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        return __awaiter(this, void 0, void 0, function () {
            var vcObj, errors, response, ex_1, i, ex_2, verifierInstance, verifier, result, ex_3;
            return __generator(this, function (_m) {
                switch (_m.label) {
                    case 0:
                        if (typeof vc === "string") {
                            vc = JSON.parse(vc);
                        }
                        vcObj = vc;
                        if (!(vcObj.credentialStatus &&
                            vcObj.credentialStatus.type ==
                                vc_core_1.CredentialStatusType.CredentialStatusList2017)) return [3 /*break*/, 7];
                        errors = new Array();
                        _m.label = 1;
                    case 1:
                        _m.trys.push([1, 6, , 7]);
                        response = void 0;
                        _m.label = 2;
                    case 2:
                        _m.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, axios_1.default.post(vcObj.credentialStatus.id, null)];
                    case 3:
                        response = _m.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        ex_1 = _m.sent();
                        if (ex_1 instanceof axios_1.AxiosError) {
                            if (ex_1.isAxiosError) {
                                return [2 /*return*/, {
                                        result: false,
                                        error: new error_code_1.CredentialStatusServiceError(vcObj.credentialStatus.id, ex_1.response.status, ex_1.response.data),
                                    }];
                            }
                        }
                        throw new error_code_1.VCUnexpectedError(ex_1);
                    case 5:
                        if ((_a = response.data) === null || _a === void 0 ? void 0 : _a.verifiableCredential) {
                            for (i = 0; i < ((_b = response.data) === null || _b === void 0 ? void 0 : _b.verifiableCredential.length); i++) {
                                if (((_c = response.data) === null || _c === void 0 ? void 0 : _c.verifiableCredential[i].claim.currentStatus.toLowerCase()) == "revoked" ||
                                    ((_d = response.data) === null || _d === void 0 ? void 0 : _d.verifiableCredential[i].claim.currentStatus.toLowerCase()) == "suspend") {
                                    errors.push({
                                        status: (_e = response.data) === null || _e === void 0 ? void 0 : _e.verifiableCredential[i].claim.currentStatus,
                                        message: (_f = response.data) === null || _f === void 0 ? void 0 : _f.verifiableCredential[i].claim.statusReason,
                                    });
                                }
                            }
                            if (errors.length > 0) {
                                return [2 /*return*/, {
                                        result: false,
                                        error: errors.some(function (x) { return x.status.toLowerCase() == "revoked"; })
                                            ? new error_code_1.VerifiableCredentialRevoked(errors.map(function (x) { return "".concat(x.status, " - ").concat(x.message); }))
                                            : new error_code_1.VerifiableCredentialSuspended(errors.map(function (x) { return "".concat(x.status, " - ").concat(x.message); })),
                                    }];
                            }
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        ex_2 = _m.sent();
                        throw new error_code_1.VCUnexpectedError(ex_2);
                    case 7:
                        // check expiration date
                        if (vcObj.expirationDate && new Date(vcObj.expirationDate) < new Date()) {
                            throw new error_code_1.VerifiableCredentialExpired();
                        }
                        verifierInstance = inject_verifier_decorator_1.verifiers.get(vcObj.proof.type);
                        verifier = new verifierInstance();
                        _m.label = 8;
                    case 8:
                        _m.trys.push([8, 10, , 11]);
                        return [4 /*yield*/, verifier.verify(vcObj, purpose, this.params.didDocumentResolver)];
                    case 9:
                        result = _m.sent();
                        if ((_g = result.errors) === null || _g === void 0 ? void 0 : _g.find(function (x) {
                            return x
                                .toLowerCase()
                                .indexOf("no proofs matched the required suite and purpose") > -1;
                        })) {
                            return [2 /*return*/, {
                                    result: false,
                                    error: new error_code_1.VerificationRelationshipError(vcObj.proof.verificationMethod, purpose.name),
                                }];
                        }
                        else if ((_h = result.errors) === null || _h === void 0 ? void 0 : _h.find(function (x) {
                            return x
                                .toLowerCase()
                                .indexOf("the challenge is not as expected") > -1;
                        })) {
                            return [2 /*return*/, {
                                    result: false,
                                    error: new error_code_1.UnexpectedChallengeError(result.errors[0]),
                                }];
                        }
                        else if ((_j = result.errors) === null || _j === void 0 ? void 0 : _j.find(function (x) { return x.toLowerCase().indexOf("invalid signature") > -1; })) {
                            return [2 /*return*/, {
                                    result: false,
                                    error: new error_code_1.InvalidSignatureError(),
                                }];
                        }
                        else if ((_k = result.errors) === null || _k === void 0 ? void 0 : _k.find(function (x) { return x.toLowerCase().indexOf("did document can't be resolved") > -1; })) {
                            return [2 /*return*/, {
                                    result: false,
                                    error: new error_code_1.DIDDocumentResolutionError(vcObj.proof.verificationMethod.substring(0, vcObj.proof.verificationMethod.indexOf("#"))),
                                }];
                        }
                        else if (((_l = result.errors) === null || _l === void 0 ? void 0 : _l.length) > 0) {
                            return [2 /*return*/, {
                                    result: false,
                                    error: new error_code_1.UnhandledVCSuiteError(result.errors[0])
                                }];
                        }
                        return [2 /*return*/, result];
                    case 10:
                        ex_3 = _m.sent();
                        if (ex_3.name) {
                            return [2 /*return*/, {
                                    result: false,
                                    error: ex_3,
                                }];
                        }
                        else
                            throw new error_code_1.VCUnexpectedError(ex_3);
                        return [3 /*break*/, 11];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    return VCVerifierService;
}());
exports.VCVerifierService = VCVerifierService;
//# sourceMappingURL=vc-verifier.service.js.map
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WACIInterpreter = void 0;
var handlers_1 = require("../handlers");
var callbacks_1 = require("../callbacks");
var types_1 = require("../types");
var utils_1 = require("../utils");
var constants_1 = require("../constants");
var WACIInterpreter = /** @class */ (function () {
    function WACIInterpreter() {
        this.enabledActors = [];
    }
    WACIInterpreter.prototype.setUpFor = function (params, actor) {
        this.enabledActors.push(actor);
        callbacks_1.callbacks[actor] = params;
        return this;
    };
    WACIInterpreter.prototype.isWACIMessage = function (messageToCheck) {
        try {
            return (0, utils_1.getObjectValues)(types_1.WACIMessageType).includes(messageToCheck.type);
        }
        catch (error) {
            return false;
        }
    };
    WACIInterpreter.prototype.createOOBInvitation = function (senderDID, goalCode, body) {
        if (body === void 0) { body = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, {
                        type: types_1.WACIMessageType.OutOfBandInvitation,
                        id: (0, utils_1.createUUID)(),
                        from: senderDID,
                        body: __assign(__assign({}, body), { goal_code: goalCode, accept: constants_1.SUPPORTED_ALGORITHMS }),
                    }];
            });
        });
    };
    WACIInterpreter.prototype.createOfferCredentialMessage = function (issuerDID, holderDID, manifest, fulfillment) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, {
                        type: types_1.WACIMessageType.OfferCredential,
                        id: (0, utils_1.createUUID)(),
                        from: issuerDID,
                        to: [issuerDID],
                        body: {},
                        attachments: [manifest, fulfillment],
                    }];
            });
        });
    };
    WACIInterpreter.prototype.processMessage = function (messageThread) {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var message, _d, _e, _f, enabledActor, messageHandler, response, e_1_1;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        message = messageThread[messageThread.length - 1];
                        _g.label = 1;
                    case 1:
                        _g.trys.push([1, 10, 11, 16]);
                        _d = true, _e = __asyncValues(this.enabledActors);
                        _g.label = 2;
                    case 2: return [4 /*yield*/, _e.next()];
                    case 3:
                        if (!(_f = _g.sent(), _a = _f.done, !_a)) return [3 /*break*/, 9];
                        _c = _f.value;
                        _d = false;
                        _g.label = 4;
                    case 4:
                        _g.trys.push([4, , 7, 8]);
                        enabledActor = _c;
                        messageHandler = handlers_1.handlers[enabledActor].get(message.type);
                        if (!messageHandler) return [3 /*break*/, 6];
                        return [4 /*yield*/, messageHandler.handle(messageThread)];
                    case 5:
                        response = _g.sent();
                        if (response) {
                            return [2 /*return*/, __assign(__assign({}, response), { target: response.message.to[0], message: response.message })];
                        }
                        return [2 /*return*/];
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        _d = true;
                        return [7 /*endfinally*/];
                    case 8: return [3 /*break*/, 2];
                    case 9: return [3 /*break*/, 16];
                    case 10:
                        e_1_1 = _g.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 16];
                    case 11:
                        _g.trys.push([11, , 14, 15]);
                        if (!(!_d && !_a && (_b = _e.return))) return [3 /*break*/, 13];
                        return [4 /*yield*/, _b.call(_e)];
                    case 12:
                        _g.sent();
                        _g.label = 13;
                    case 13: return [3 /*break*/, 15];
                    case 14:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 15: return [7 /*endfinally*/];
                    case 16: throw Error("No handler found for message of type '".concat(message.type, "'"));
                }
            });
        });
    };
    return WACIInterpreter;
}());
exports.WACIInterpreter = WACIInterpreter;
//# sourceMappingURL=waci-interpreter.js.map
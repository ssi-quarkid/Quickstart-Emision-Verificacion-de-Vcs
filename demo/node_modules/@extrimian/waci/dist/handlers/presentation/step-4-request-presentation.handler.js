"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestPresentationHandler = void 0;
var register_handler_decorator_1 = require("../decorators/register-handler.decorator");
var types_1 = require("../../types");
var utils_1 = require("../../utils");
var callbacks_1 = require("../../callbacks");
var RequestPresentationHandler = /** @class */ (function () {
    function RequestPresentationHandler() {
    }
    RequestPresentationHandler.prototype.handle = function (messageThread) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        return __awaiter(this, void 0, void 0, function () {
            var message, holderDID, verifierDID, presentationDefinition, challenge, credentialsToPresent, credentialPresentation;
            return __generator(this, function (_k) {
                switch (_k.label) {
                    case 0:
                        message = messageThread[messageThread.length - 1];
                        holderDID = message.to[0];
                        verifierDID = message.from;
                        presentationDefinition = (_d = (_c = (_b = (_a = message.attachments) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.json) === null || _d === void 0 ? void 0 : _d.presentation_definition;
                        challenge = (_j = (_h = (_g = (_f = (_e = message.attachments) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.data) === null || _g === void 0 ? void 0 : _g.json) === null || _h === void 0 ? void 0 : _h.options) === null || _j === void 0 ? void 0 : _j.challenge;
                        if (!challenge)
                            throw new Error('No challenge defined');
                        if (!(presentationDefinition === null || presentationDefinition === void 0 ? void 0 : presentationDefinition.input_descriptors)) {
                            throw new Error('Presentation definition without input required');
                        }
                        return [4 /*yield*/, callbacks_1.callbacks[types_1.Actor.Holder].getCredentialPresentation({
                                frame: presentationDefinition.frame,
                                inputDescriptors: presentationDefinition.input_descriptors,
                                message: message
                            })];
                    case 1:
                        credentialsToPresent = (_k.sent()).credentialsToPresent;
                        return [4 /*yield*/, this.createMessage(presentationDefinition, challenge, credentialsToPresent, holderDID, message)];
                    case 2:
                        credentialPresentation = _k.sent();
                        return [2 /*return*/, {
                                responseType: 1 /* WACIMessageResponseType.ReplyThread */,
                                message: {
                                    type: types_1.WACIMessageType.PresentProof,
                                    id: (0, utils_1.createUUID)(),
                                    thid: message.thid,
                                    from: holderDID,
                                    to: [verifierDID],
                                    body: {},
                                    attachments: [credentialPresentation],
                                },
                            }];
                }
            });
        });
    };
    RequestPresentationHandler.prototype.createMessage = function (presentationDefinition, challenge, credentialsToPresent, holderDID, message) {
        return __awaiter(this, void 0, void 0, function () {
            var definition_id, descriptor_map, messageData, signedData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        definition_id = presentationDefinition.id;
                        descriptor_map = presentationDefinition.input_descriptors.map(function (descriptor, index) { return ({
                            id: descriptor.id,
                            format: 'ldp_vp',
                            path: "$.verifiableCredential[".concat(index, "]"),
                        }); });
                        messageData = {
                            '@context': [
                                'https://extrimian.blob.core.windows.net/rskec/securityv1.jsonld',
                                'https://extrimian.blob.core.windows.net/rskec/credentialsv1.jsonld',
                                'https://extrimian.blob.core.windows.net/rskec/presentation-exchangesubmissionv1.jsonld',
                            ],
                            type: ['VerifiablePresentation', 'PresentationSubmission'],
                            holder: holderDID,
                            presentation_submission: {
                                id: (0, utils_1.createUUID)(),
                                definition_id: definition_id,
                                descriptor_map: descriptor_map,
                            },
                            verifiableCredential: credentialsToPresent,
                        };
                        return [4 /*yield*/, callbacks_1.callbacks[types_1.Actor.Holder].signPresentation({
                                contentToSign: messageData,
                                challenge: challenge,
                                message: message
                            })];
                    case 1:
                        signedData = _a.sent();
                        return [2 /*return*/, {
                                id: (0, utils_1.createUUID)(),
                                media_type: 'application/ld+json',
                                format: 'dif/presentation-exchange/submission@v1.0',
                                data: {
                                    json: signedData,
                                },
                            }];
                }
            });
        });
    };
    RequestPresentationHandler = __decorate([
        (0, register_handler_decorator_1.RegisterHandler)(types_1.Actor.Holder, types_1.WACIMessageType.RequestPresentation)
    ], RequestPresentationHandler);
    return RequestPresentationHandler;
}());
exports.RequestPresentationHandler = RequestPresentationHandler;
//# sourceMappingURL=step-4-request-presentation.handler.js.map
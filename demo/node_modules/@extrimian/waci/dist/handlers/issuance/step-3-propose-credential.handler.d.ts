import { WACIMessage, WACIMessageHandler, WACIMessageHandlerResponse, InputDescriptor, OutputDescriptor, PresentationDefinitionFrame } from '../../types';
export type OfferCredentialMessageParamsBase = OfferCredentialMessageParams | OfferCredentialMessageParamsFailed | OfferCredentialMessageParamsAsyncProcess;
export type OfferCredentialMessageParams = {
    issuerDid: string;
    issuerName: string;
    issuerStyles: any;
    output: {
        outputDescriptor: OutputDescriptor;
        verifiableCredential: any;
        format: 'ldp_vc' | '';
    }[];
    input?: InputDescriptor[];
    frame?: PresentationDefinitionFrame;
    result?: OfferCredentialMessageResult.Succeded;
};
export type OfferCredentialMessageParamsFailed = {
    result?: OfferCredentialMessageResult.Failed;
    errorMessage?: string;
};
export type OfferCredentialMessageParamsAsyncProcess = {
    result?: OfferCredentialMessageResult.AsyncProcess;
    errorMessage?: string;
};
export declare class ProposeCredentialHandler implements WACIMessageHandler {
    handle(messageThread: WACIMessage[]): Promise<WACIMessageHandlerResponse>;
    private createMessage;
}
export declare enum OfferCredentialMessageResult {
    Succeded = 0,
    Failed = 1,
    AsyncProcess = 2
}

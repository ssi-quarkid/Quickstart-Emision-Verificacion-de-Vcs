declare enum SharedMessageType {
    OutOfBandInvitation = "https://didcomm.org/out-of-band/2.0/invitation"
}
declare enum IssuanceMessageType {
    ProposeCredential = "https://didcomm.org/issue-credential/3.0/propose-credential",
    OfferCredential = "https://didcomm.org/issue-credential/3.0/offer-credential",
    RequestCredential = "https://didcomm.org/issue-credential/3.0/request-credential",
    IssueCredential = "https://didcomm.org/issue-credential/3.0/issue-credential",
    IssuanceAck = "https://didcomm.org/issue-credential/3.0/ack",
    ProblemReport = "https://didcomm.org/report-problem/2.0/problem-report"
}
declare enum PresentationMessageType {
    ProposePresentation = "https://didcomm.org/present-proof/3.0/propose-presentation",
    RequestPresentation = "https://didcomm.org/present-proof/3.0/request-presentation",
    PresentProof = "https://didcomm.org/present-proof/3.0/presentation",
    PresentationAck = "https://didcomm.org/present-proof/3.0/ack",
    ProblemReport = "https://didcomm.org/report-problem/2.0/problem-report"
}
export declare const WACIMessageType: {
    ProposePresentation: PresentationMessageType.ProposePresentation;
    RequestPresentation: PresentationMessageType.RequestPresentation;
    PresentProof: PresentationMessageType.PresentProof;
    PresentationAck: PresentationMessageType.PresentationAck;
    ProblemReport: PresentationMessageType.ProblemReport;
    ProposeCredential: IssuanceMessageType.ProposeCredential;
    OfferCredential: IssuanceMessageType.OfferCredential;
    RequestCredential: IssuanceMessageType.RequestCredential;
    IssueCredential: IssuanceMessageType.IssueCredential;
    IssuanceAck: IssuanceMessageType.IssuanceAck;
    OutOfBandInvitation: SharedMessageType.OutOfBandInvitation;
};
export type WACIMessageType = SharedMessageType | IssuanceMessageType | PresentationMessageType;
export declare enum GoalCode {
    Issuance = "streamlined-vc",
    Presentation = "streamlined-vp"
}
export declare const enum AckStatus {
    Ok = "OK",
    Fail = "FAIL",
    Pending = "PENDING"
}
export type WACIMessage = {
    type: WACIMessageType;
    id: string;
    from: string;
    to?: string[];
    body?: any;
    pthid?: string;
    thid?: string;
    attachments?: any[];
};
export declare const enum WACIMessageResponseType {
    CreateThread = 0,
    ReplyThread = 1
}
export type WACIMessageHandlerResponse = {
    message: WACIMessage;
    responseType: WACIMessageResponseType;
};
export type WACIResponse = {
    message: WACIMessage;
    target: string;
    responseType: WACIMessageResponseType;
};
export interface WACIMessageHandler {
    handle(messageThread: WACIMessage[]): Promise<WACIMessageHandlerResponse | void>;
}
export {};

"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DIDCommSuite = void 0;
var didcomm_1 = require("@hearro/didcomm");
var kms_core_1 = require("@extrimian/kms-core");
// import { crypto_sign_keypair, sodium.from_hex } from 'wrappers';
var _sodium = require("libsodium-wrappers");
var DIDCommSuite = /** @class */ (function () {
    function DIDCommSuite() {
    }
    DIDCommSuite.prototype.load = function (keyPair) {
        this.keyPair = keyPair;
        if (keyPair) {
            if (keyPair.publicKey.indexOf("0x") == 0) {
                this.keyPair = {
                    privateKey: this.keyPair.privateKey,
                    publicKey: this.keyPair.publicKey.substring(2),
                    keyType: this.keyPair.keyType
                };
            }
            if (keyPair.privateKey.indexOf("0x") == 0) {
                this.keyPair = {
                    privateKey: this.keyPair.privateKey.substring(2),
                    publicKey: this.keyPair.publicKey,
                    keyType: this.keyPair.keyType
                };
            }
        }
    };
    DIDCommSuite.prototype.create = function () {
        return __awaiter(this, void 0, void 0, function () {
            var sodium, secret;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _sodium.ready];
                    case 1:
                        _a.sent();
                        sodium = _sodium;
                        secret = sodium.crypto_sign_keypair("hex");
                        return [2 /*return*/, {
                                privateKey: secret.privateKey,
                                publicKey: secret.publicKey,
                                keyType: secret.keyType,
                            }];
                }
            });
        });
    };
    DIDCommSuite.prototype.pack = function (encrypt, toHexKeys, documentToSign) {
        return __awaiter(this, void 0, void 0, function () {
            var sodium, didcomm, toKey, key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _sodium.ready];
                    case 1:
                        _a.sent();
                        sodium = _sodium;
                        didcomm = new didcomm_1.DIDComm();
                        return [4 /*yield*/, didcomm.ready];
                    case 2:
                        _a.sent();
                        toKey = toHexKeys.map(function (x) { return sodium.from_hex(x); });
                        key = {
                            keyType: this.keyPair.keyType,
                            privateKey: sodium.from_hex(this.keyPair.privateKey),
                            publicKey: sodium.from_hex(this.keyPair.publicKey),
                        };
                        return [4 /*yield*/, didcomm.pack_auth_msg_for_recipients(documentToSign, toKey, key)];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    DIDCommSuite.prototype.unpack = function (encryptedDocument) {
        return __awaiter(this, void 0, void 0, function () {
            var sodium, didcomm, unpackedMsg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _sodium.ready];
                    case 1:
                        _a.sent();
                        sodium = _sodium;
                        didcomm = new didcomm_1.DIDComm();
                        return [4 /*yield*/, didcomm.ready];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, didcomm.unpackMessage(encryptedDocument, {
                                keyType: this.keyPair.keyType,
                                privateKey: sodium.from_hex(this.keyPair.privateKey),
                                publicKey: sodium.from_hex(this.keyPair.publicKey),
                            })];
                    case 3:
                        unpackedMsg = _a.sent();
                        return [2 /*return*/, unpackedMsg.message];
                }
            });
        });
    };
    DIDCommSuite = __decorate([
        (0, kms_core_1.suiteDecorator)(kms_core_1.Suite.DIDComm),
        __metadata("design:paramtypes", [])
    ], DIDCommSuite);
    return DIDCommSuite;
}());
exports.DIDCommSuite = DIDCommSuite;
//# sourceMappingURL=did-comm-suite.js.map
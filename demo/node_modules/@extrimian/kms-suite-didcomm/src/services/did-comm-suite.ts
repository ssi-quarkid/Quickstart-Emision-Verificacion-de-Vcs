import { DIDComm } from "@hearro/didcomm";
import { IDidCommKeyPair, Suite, suiteDecorator } from "@extrimian/kms-core";
// import { crypto_sign_keypair, sodium.from_hex } from 'wrappers';
const _sodium = require("libsodium-wrappers");

@suiteDecorator(Suite.DIDComm)
export class DIDCommSuite {
    keyPair: IDidCommKeyPair;

    constructor() {

    }

    load(keyPair?: IDidCommKeyPair) {
        this.keyPair = keyPair;
        if (keyPair) {
            if (keyPair.publicKey.indexOf("0x") == 0) {
                this.keyPair = {
                    privateKey: this.keyPair.privateKey,
                    publicKey: this.keyPair.publicKey.substring(2),
                    keyType: this.keyPair.keyType
                }
            }
            if (keyPair.privateKey.indexOf("0x") == 0) {
                this.keyPair = {
                    privateKey: this.keyPair.privateKey.substring(2),
                    publicKey: this.keyPair.publicKey,
                    keyType: this.keyPair.keyType
                }
            }
        }
    }

    async create(): Promise<IDidCommKeyPair> {
        await _sodium.ready;

        const sodium = _sodium;

        const secret = sodium.crypto_sign_keypair("hex");

        return {
            privateKey: secret.privateKey,
            publicKey: secret.publicKey,
            keyType: secret.keyType,
        };
    }

    async pack(encrypt: boolean, toHexKeys: string[], documentToSign: string): Promise<string> {
        await _sodium.ready;

        const sodium = _sodium;

        const didcomm = new DIDComm();
        await didcomm.ready;

        const toKey = toHexKeys.map(x => sodium.from_hex(x));

        const key = {
            keyType: this.keyPair.keyType,
            privateKey: sodium.from_hex(this.keyPair.privateKey),
            publicKey: sodium.from_hex(this.keyPair.publicKey),
        };

        return await didcomm.pack_auth_msg_for_recipients(documentToSign, toKey, key as any);

    }

    async unpack(encryptedDocument: string): Promise<any> {
        await _sodium.ready;

        const sodium = _sodium;

        const didcomm = new DIDComm();
        await didcomm.ready;

        const unpackedMsg = await didcomm.unpackMessage(encryptedDocument, {
            keyType: this.keyPair.keyType as any,
            privateKey: sodium.from_hex(this.keyPair.privateKey),
            publicKey: sodium.from_hex(this.keyPair.publicKey),
        });

        return unpackedMsg.message;
    }
}
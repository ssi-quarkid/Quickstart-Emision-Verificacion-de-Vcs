import { IVCJsonLDKeyPair, Suite, suiteDecorator } from "@extrimian/kms-core";
import { JsonLDSuite } from "@extrimian/kms-suite-jsonld";
// import cryptold from "crypto-ld";
const jsigs = require('jsonld-signatures');
const rsa = require('js-crypto-rsa'); // for npm
var jwkToPem = require('jwk-to-pem');

const { RsaSignature2018 } = jsigs.suites;

@suiteDecorator(Suite.RsaSignature2018)
export class RSASignature2018Suite extends JsonLDSuite {
  async create(): Promise<IVCJsonLDKeyPair> {
    return new Promise((resolve, rej) => {
      rsa.generateKey(2048).then((key) => {
        // now you get the JWK public and private keys
        const publicKey = key.publicKey;
        const privateKey = key.privateKey;

        resolve({
          publicKeyJWK: publicKey,
          privateKeyJWK: privateKey,
          privateKey: null,
          publicKey: null,
        })
      });
    })
  }

  protected async getSuite(params?: {
    verificationMethodId: string;
    controllerDid: string;
  }): Promise<any> {
    if (this.secret && params) {

      const key = new jsigs.RSAKeyPair({
        id: params.verificationMethodId,
        controller: params.controllerDid,
        privateKeyPem: jwkToPem(this.secret.privateKeyJWK, { private: true }),
        publicKeyPem: jwkToPem(this.secret.publicKeyJWK),
      });

      return new RsaSignature2018({ key });
    }
    else {
      return new RsaSignature2018();
    }
  }
}

import { IJWK, LANG, Suite } from "@extrimian/kms-core";
import { KMSClient } from "@extrimian/kms-client";
import fetch from "node-fetch";
import {
  ModenaDocumentModel,
  ModenaPublicKeyPurpose,
  ModenaRequest,
} from "@extrimian/modena-sdk";
import { Did } from "../src/index";
import { AssertionMethodPurpose, DIDDocument } from "@extrimian/did-core";
import { DIDModenaResolver } from "../../resolver/src/index";
import { ModenaUniversalRegistry } from "../src/services/modena-universal-registry.service";
import { AuthenticationPurpose } from "@extrimian/did-core";

jest.setTimeout(5000000);

let _kms: KMSClient | null = null;
let did: string;
let recoveryKey: IJWK;
let modenaEndpoint = "https://saas.extrimian.com/didethrrsk0xF5b474a7C3C8042dCbB124A385c398ce0FA08F73/BwcKVYxBlJml0QTn/sidetree-mainnet-polygon";
let modenaApiKey = "kHlt9syC4ZLLU4oJmWKNF9bbBCJUV9uV";
let universalRegistryEndpoint = "http://localhost:8010";

const getKMS = async (): Promise<KMSClient> => {
  if (!_kms) {
    let mapping = new Map();

    let storage = {
      add: async (key: string, data: any) => {
        mapping.set(key, data);
      },
      get: (key: string) => mapping.get(key),
      getAll: async () => mapping,
      remove: (key: string) => mapping.delete(key),
      update: (key: string, data: any) => mapping.set(key, data),
    };

    _kms = new KMSClient({
      lang: LANG.es,
      storage: storage,
    });
  }
  return _kms;
};

const getDidDocument = (did: string) =>
  new Promise<DIDDocument>((resolve, reject) => {
    setTimeout(async () => {
      const universalResolver = new DIDModenaResolver({
        modenaURL: modenaEndpoint,
        apiKey: { value: modenaApiKey }
      });

      const didDocument = await universalResolver.resolveDID(did);
      console.log(didDocument);

      return didDocument;
    }, 30000);
  });

describe("CREATE DID", () => {
  it("Modena Registry: Create and public DID", async () => {
    // const doc = await getDidDocument("EiB35zPKWp57fA9ugzk2tBvAe3NG6nygplW5UqFYjt5L9w");

    let kms = await getKMS();

    for (let i = 0; i < 1; i++) {
      const publicKey1 = await kms.create(Suite.ES256k);
      const secret1 = await kms.export(publicKey1.publicKeyJWK);
      console.log(secret1);

      const publicKey2 = await kms.create(Suite.ES256k);
      const secret2 = await kms.export(publicKey2.publicKeyJWK);
      console.log(secret2);

      //CREATE BBS PUBLIC KEYS
      const bbs = await kms.create(Suite.Bbsbls2020);
      const secretBbs = await kms.export(bbs.publicKeyJWK);
      console.log(secretBbs);

      const rsa = await kms.create(Suite.RsaSignature2018);
      const secretRSA = await kms.export(rsa.publicKeyJWK);
      console.log(secretRSA);

      const registry = new Did();

      const createDIDResponse = await registry.createDID({
        recoveryKeys: [publicKey1.publicKeyJWK, publicKey2.publicKeyJWK],
        updateKeys: [publicKey1.publicKeyJWK, publicKey2.publicKeyJWK],
        verificationMethods: [
          {
            id: "bbsbls",
            publicKeyJwk: bbs.publicKeyJWK,
            purpose: [new AssertionMethodPurpose()],
            type: "Bls12381G1Key2020",
          },
          {
            id: "rsa",
            publicKeyJwk: rsa.publicKeyJWK,
            purpose: [new AuthenticationPurpose()],
            type: "RSASignature"
          }
        ],
        // didMethod: "",
      });

      const input = {
        recoveryKeys: createDIDResponse.recoveryKeys,
        updateKeys: createDIDResponse.updateKeys,
        document: createDIDResponse.document,
      };

      const createRequest = ModenaRequest.createCreateRequest(input);
      console.log(createRequest);

      const result = await registry.publishDID({ createDIDResponse: createDIDResponse, modenaApiURL: modenaEndpoint, apiKey: { value: modenaApiKey } });

      const didDocument = await getDidDocument(result.canonicalId);
      expect(didDocument.id).toContain(result.canonicalId);
      console.log(didDocument);
    }
  });

  // it("Universal Registry: Create and public DID", async () => {
  //   let kms = await getKMS();

  //   const publicKey1 = await kms.create(Suite.ES256k);
  //   const secret1 = await kms.export(publicKey1.publicKeyJWK);
  //   console.log(secret1);

  //   const publicKey2 = await kms.create(Suite.ES256k);
  //   const secret2 = await kms.export(publicKey2.publicKeyJWK);
  //   console.log(secret2);

  //   //CREATE BBS PUBLIC KEYS
  //   const bbs = await kms.create(Suite.Bbsbls2020);
  //   const secretBbs = await kms.export(bbs.publicKeyJWK);
  //   console.log(secretBbs);

  //   const registry = new ModenaUniversalRegistry();

  //   const createDIDResponse = await registry.createDID({
  //     recoveryKeys: [publicKey1.publicKeyJWK, publicKey2.publicKeyJWK],
  //     updateKeys: [publicKey1.publicKeyJWK, publicKey2.publicKeyJWK],
  //     verificationMethods: [
  //       {
  //         id: "bbsbls",
  //         publicKeyJwk: bbs.publicKeyJWK,
  //         purpose: [new AssertionMethodPurpose()],
  //         type: "Bls12381G1Key2020",
  //       },
  //     ],
  //   });

  //   const result = await registry.publishDID({
  //     didMethod: "did:ganache",
  //     universalResolverURL: universalRegistryEndpoint,
  //     createDIDResponse: createDIDResponse,
  //   });

  //   const didDocument = await getDidDocument(result.did);
  //   expect(didDocument.id).toEqual(result.did);
  //   console.log(didDocument);
  // });
});

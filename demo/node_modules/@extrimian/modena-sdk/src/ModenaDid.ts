import Encoder from './Encoder';
import ModenaRequest from './ModenaRequest';
import ModenaSdkConfig from './ModenaSdkConfig';
import JsonCanonicalizer from './JsonCanonicalizer';
import Multihash from './Multihash';
import ModenaDocumentModel from './models/ModenaDocumentModel';
import { IJWK } from '@extrimian/kms-core';

/**
 * Class containing DID related operations.
 */
export default class ModenaDid {
  /**
   * Creates a long-form DID.
   * @param input.document The initial state to be associate with the ION DID to be created using a `replace` document patch action.
   */
  public static createLongFormDid (input: {
    recoveryKeys: IJWK[];
    updateKeys: IJWK[];
    document: ModenaDocumentModel;
  }): string {
    const createRequest = ModenaRequest.createCreateRequest(input);

    const didUniqueSuffix = ModenaDid.computeDidUniqueSuffix(createRequest.suffixData);

    // Add the network portion if not configured for mainnet.
    let shortFormDid;
    if (ModenaSdkConfig.network === undefined || ModenaSdkConfig.network === 'mainnet') {
      shortFormDid = `did:${didUniqueSuffix}`;
    } else {
      shortFormDid = `did:${ModenaSdkConfig.network}:${didUniqueSuffix}`;
    }

    const initialState = {
      suffixData: createRequest.suffixData,
      delta: createRequest.delta
    };

    // Initial state must be canonicalized as per spec.
    const canonicalizedInitialStateBuffer = JsonCanonicalizer.canonicalizeAsBuffer(initialState);
    const encodedCanonicalizedInitialStateString = Encoder.encode(canonicalizedInitialStateBuffer);

    const longFormDid = `${shortFormDid}:${encodedCanonicalizedInitialStateString}`;
    return longFormDid;
  }

  /**
   * Computes the DID unique suffix given the encoded suffix data string.
   */
  private static computeDidUniqueSuffix (suffixData: object): string {
    const canonicalizedStringBuffer = JsonCanonicalizer.canonicalizeAsBuffer(suffixData);
    const multihash = Multihash.hash(canonicalizedStringBuffer, ModenaSdkConfig.hashAlgorithmInMultihashCode);
    const encodedMultihash = Encoder.encode(multihash);
    return encodedMultihash;
  }
}

import { IJWK, LANG, Suite } from "@extrimian/kms-core";
import { KMSClient } from "@extrimian/kms-client";
import { ModenaDid, ModenaSdkConfig } from "../src/index";
import ModenaDocumentModel from "../src/models/ModenaDocumentModel";
import ModenaPublicKeyPurpose from "../src/enums/ModenaPublicKeyPurpose";
import ModenaRequest from "../src/ModenaRequest";

jest.setTimeout(5000000);

let _kms: KMSClient | null = null;
let did: string;
let recoveryKey: IJWK;
let modenaEndpoint = "http://localhost:3000";

const getKMS = async (): Promise<KMSClient> => {
    if (!_kms) {
        let mapping = new Map();

        let storage = {
            add: async (key: string, data: any) => { mapping.set(key, data) },
            get: (key: string) => mapping.get(key),
            getAll: async () => mapping,
            remove: (key: string) => mapping.delete(key),
            update: (key: string, data: any) => mapping.set(key, data),
        };

        _kms = new KMSClient({
            lang: LANG.es,
            storage: storage,
        });
    }
    return _kms;
}

const getDidDocument = (did: string) => new Promise((resolve, reject) => {
    setTimeout(async () => {
        let response = await fetch(`${modenaEndpoint}/resolve/${did}`, {
            method: "GET",
            headers: {
                'Content-Type': 'application/json',
            },
        });

        if (response.status >= 200 && response.status < 300) {
            const didDocument = await response.json();
            resolve(didDocument)
        }
        reject(response);
    }, 60000);
});

describe("STORAGE", () => {
    it("Create and public DID", async () => {
        let kms = await getKMS();

        const publicKey1 = await kms.create(Suite.ES256k);
        const secret1 = await kms.export(publicKey1.publicKeyJWK);
        console.log(secret1);

        const publicKey2 = await kms.create(Suite.ES256k);
        const secret2 = await kms.export(publicKey2.publicKeyJWK);
        console.log(secret2);

        //CREATE BBS PUBLIC KEYS
        const bbs = await kms.create(Suite.Bbsbls2020);
        const secretBbs = await kms.export(bbs.publicKeyJWK);
        console.log(secretBbs);

        const document: ModenaDocumentModel = {
            publicKeys: [{
                id: "bbs2020",
                publicKeyJwk: bbs.publicKeyJWK,
                type: "Bls12381G1Key2020",
                purposes: [ModenaPublicKeyPurpose.AssertionMethod],
            }],
            services: [],
        };

        const recoveryKeys = [publicKey1.publicKeyJWK, publicKey2.publicKeyJWK];
        recoveryKey = recoveryKeys[0];

        const updateKeys = [publicKey1.publicKeyJWK, publicKey2.publicKeyJWK];

        //Publicacion de un DID
        const input = { recoveryKeys, updateKeys, document };
        const result = ModenaRequest.createCreateRequest(input);

        ModenaSdkConfig.network = "quarkid:matic" as any;

        const longDID = await ModenaDid.createLongFormDid({
            document: document,
            recoveryKeys: recoveryKeys,
            updateKeys: updateKeys
        });

        console.log(longDID);

        const options = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(result)
        };

        let response = await fetch(`${modenaEndpoint}/create`, options)
        if (response.status != 200 && response.status != 201) {
            const msg = await response.json();
            throw new Error(`Ion DID creation is not ok: ${msg}`);
        }
        const canonicalId = (await response.json() as any).didDocumentMetadata.canonicalId;

        did = canonicalId.substring(canonicalId.lastIndexOf(":") + 1);

        console.log(did);

        const didDocument = await getDidDocument(did);
        console.log(didDocument);
    });

    it("Upate", async () => {
        let kms = await getKMS();

        const updateKey = (await kms.getPublicKeysBySuiteType(Suite.ES256k))[0];

        const nextUpdateKey1 = await kms.create(Suite.ES256k);
        const nextUpdateKey2 = await kms.create(Suite.ES256k);

        const services = [{
            "id": "Service1Id",
            "type": "service1Type",
            "serviceEndpoint": "http://www.service1.com"
        }];

        const bbs = await kms.create(Suite.Bbsbls2020);

        const publicKeysToAdd = [{
            id: "updatedBbs2020",
            publicKeyJwk: bbs.publicKeyJWK,
            type: "Bls12381G1Key2020",
            purposes: [ModenaPublicKeyPurpose.AssertionMethod],
        }];

        // const didDoc = getDidDocument()

        const result = await ModenaRequest.createUpdateRequest({
            didSuffix: did,
            updatePublicKey: updateKey,
            nextUpdatePublicKeys: [nextUpdateKey1.publicKeyJWK, nextUpdateKey2.publicKeyJWK],
            documentMetadata: {
                method: {
                    updateCommitment: [],
                }
            },
            signer: {
                sign: async (header: object, content: object): Promise<string> => {
                    console.log(header);
                    return await kms.sign(Suite.ES256k, updateKey, content);
                }
            },
            servicesToAdd: services,
            idsOfServicesToRemove: ['service5Id'],
            publicKeysToAdd: publicKeysToAdd,
            idsOfPublicKeysToRemove: ['publicKeyModel333Id']
        });

        const options = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(result)
        };


        let response = await fetch(`${modenaEndpoint}/create`, options)
        if (response.status != 200 && response.status != 201) {
            const msg = await response.json();
            throw new Error(`Ion DID creation is not ok: ${msg}`);
        }

        const didDocument: any = await getDidDocument(did);

        const pk = didDocument.verificationMethod.filter((x: any) => x.id == "#updatedBbs2020");
        expect(pk.length).toBe(1);
        console.log(pk);
    });

    it("Recovery", async () => {
        // const publicKey = recoveryKey;

        let kms = await getKMS();

        const nextUpdateKey1 = await kms.create(Suite.ES256k);
        const nextUpdateKey2 = await kms.create(Suite.ES256k);

        const bbsbls2020 = await kms.create(Suite.Bbsbls2020);

        const document: ModenaDocumentModel = {
            publicKeys: [{
                id: "bbsbls-recovery",
                publicKeyJwk: bbsbls2020.publicKeyJWK,
                type: "Bls12381G1Key2020",
                purposes: [ModenaPublicKeyPurpose.AssertionMethod],
            }],
            services: [{
                id: "dwn-from-recovery",
                serviceEndpoint: "http://dwn.extrimian.com",
                type: "DecentralizedWebNode"
            }]
        };

        const result = await ModenaRequest.createRecoverRequest({
            didSuffix: did,
            recoveryPublicKey: recoveryKey,
            nextRecoveryPublicKeys: [nextUpdateKey1.publicKeyJWK, nextUpdateKey2.publicKeyJWK],
            nextUpdatePublicKeys: [nextUpdateKey1.publicKeyJWK, nextUpdateKey2.publicKeyJWK],
            document,
            signer: {
                sign: async (header: object, content: object): Promise<string> => {
                    console.log(header);
                    return await kms.sign(Suite.ES256k, recoveryKey, content);
                }
            },
        });

        const options = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(result)
        };

        let ionCoreEndpoint = "http://localhost:3000/create";

        let response = await fetch(`${ionCoreEndpoint}`, options)
        if (response.status != 200 && response.status != 201) {
            const msg = await response.json();
            throw new Error(`Ion DID creation is not ok: ${msg}`);
        }

        const didDocument: any = await getDidDocument(did);

        const pk = didDocument.verificationMethod.filter((x: any) => x.id == "#bbsbls-recovery");
        expect(pk.length).toBe(1);
        console.log(pk);
    });
});
import ISigner from './interfaces/ISigner';
import JwkEs256k from './models/JwkEs256k';
import ModenaCreateRequestModel from './models/ModenaCreateRequestModel';
import ModenaDocumentModel from './models/ModenaDocumentModel';
import ModenaRecoverRequestModel from './models/ModenaRecoverRequestModel';
import ModenaUpdateRequestModel from './models/ModenaUpdateRequestModel';
import ModenaServiceModel from './models/ModenaServiceModel';
import ModenaPublicKeyModel from './models/ModenaPublicKeyModel';
import ModenaDeactivateRequestModel from './models/ModenaDeactivateRequestModel';
import { IJWK } from '@extrimian/kms-core';
import { DIDDocumentMetadata } from './models/DidDocumentMetadata';
/**
 * Class containing operations related to Modena requests.
 */
export default class ModenaRequest {
    /**
     * Creates an Modena DID create request.
     * @param input.document The initial state to be associate with the Modena DID to be created using a `replace` document patch action.
     */
    static createCreateRequest(input: {
        recoveryKeys: IJWK[];
        updateKeys: IJWK[];
        document: ModenaDocumentModel;
    }): ModenaCreateRequestModel;
    static createDeactivateRequest(input: {
        didSuffix: string;
        recoveryPublicKey: JwkEs256k;
        signer: ISigner;
    }): Promise<ModenaDeactivateRequestModel>;
    static createRecoverRequest(input: {
        didSuffix: string;
        recoveryPublicKey: JwkEs256k;
        nextRecoveryPublicKeys: JwkEs256k[];
        nextUpdatePublicKeys: JwkEs256k[];
        document: ModenaDocumentModel;
        signer: ISigner;
    }): Promise<ModenaRecoverRequestModel>;
    static createUpdateRequest(input: {
        didSuffix: string;
        updatePublicKey: JwkEs256k;
        documentMetadata: DIDDocumentMetadata;
        nextUpdatePublicKeys: IJWK[];
        updateKeysToRemove?: {
            publicKeys?: IJWK[];
            updateCommitment?: string[];
        };
        signer: ISigner;
        servicesToAdd?: ModenaServiceModel[];
        idsOfServicesToRemove?: string[];
        publicKeysToAdd?: ModenaPublicKeyModel[];
        idsOfPublicKeysToRemove?: string[];
    }): Promise<ModenaUpdateRequestModel>;
    private static validateDidSuffix;
    private static validateDidDocumentKeys;
    private static validateServices;
    private static validateService;
    private static validateDeltaSize;
}

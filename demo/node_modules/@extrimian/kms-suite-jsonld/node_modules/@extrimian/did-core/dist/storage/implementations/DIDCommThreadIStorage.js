"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DIDCommThreadIStorage = exports.DIDCommMessageIStorage = void 0;
//MessageStorage Using IStorage
var DIDCommMessageIStorage = /** @class */ (function () {
    function DIDCommMessageIStorage(messagesStorage, threadStorage) {
        this.messagesStorage = messagesStorage;
        this.threadStorage = threadStorage;
    }
    DIDCommMessageIStorage.prototype.add = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var thid, thread, messageThreadStorage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        thid = message.thid;
                        return [4 /*yield*/, this.threadStorage.get(message.thid)];
                    case 1:
                        thread = _a.sent();
                        if (!!thread) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.threadStorage.add(thid, [])];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        messageThreadStorage = new DIDCommThreadIStorage(this.messagesStorage, this.threadStorage, thid);
                        return [4 /*yield*/, messageThreadStorage.add(message)];
                    case 4: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    DIDCommMessageIStorage.prototype.get = function (id, thid) {
        return __awaiter(this, void 0, void 0, function () {
            var ids;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!thid) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.threadStorage.get(thid)
                            // console.log("ids")
                        ];
                    case 1:
                        ids = _a.sent();
                        // console.log("ids")
                        if (!ids || ids.findIndex(function (x) { return x === id; }) < 0)
                            return [2 /*return*/];
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.messagesStorage.get(id)];
                }
            });
        });
    };
    DIDCommMessageIStorage.prototype.getByThread = function (thid) {
        return __awaiter(this, void 0, void 0, function () {
            var messageThreadStorage;
            return __generator(this, function (_a) {
                messageThreadStorage = new DIDCommThreadIStorage(this.messagesStorage, this.threadStorage, thid);
                return [2 /*return*/, messageThreadStorage];
            });
        });
    };
    DIDCommMessageIStorage.prototype.remove = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var messageThreadStorage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        messageThreadStorage = new DIDCommThreadIStorage(this.messagesStorage, this.threadStorage, message.thid);
                        return [4 /*yield*/, messageThreadStorage.remove(message.id)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    DIDCommMessageIStorage.prototype.removeById = function (id, thid) {
        return __awaiter(this, void 0, void 0, function () {
            var message, messageThreadStorage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.messagesStorage.get(id)];
                    case 1:
                        message = _a.sent();
                        if (!message)
                            return [2 /*return*/, false];
                        if (thid && message.thid !== thid)
                            return [2 /*return*/, false];
                        messageThreadStorage = new DIDCommThreadIStorage(this.messagesStorage, this.threadStorage, thid);
                        return [4 /*yield*/, messageThreadStorage.remove(id)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    DIDCommMessageIStorage.prototype.removeThread = function (thid) {
        return __awaiter(this, void 0, void 0, function () {
            var messageThreadStorage, ids, promises, e_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        messageThreadStorage = new DIDCommThreadIStorage(this.messagesStorage, this.threadStorage, thid);
                        return [4 /*yield*/, messageThreadStorage.getThreadMessagesId()];
                    case 1:
                        ids = _a.sent();
                        return [4 /*yield*/, this.threadStorage.remove(thid)];
                    case 2:
                        _a.sent();
                        promises = ids.map(function (x) { return _this.messagesStorage.remove(x); });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        return [2 /*return*/, false];
                    case 5: return [2 /*return*/, true];
                }
            });
        });
    };
    return DIDCommMessageIStorage;
}());
exports.DIDCommMessageIStorage = DIDCommMessageIStorage;
var DIDCommThreadIStorage = /** @class */ (function () {
    function DIDCommThreadIStorage(messagesStorage, threadStorage, thid) {
        this.messagesStorage = messagesStorage;
        this.threadStorage = threadStorage;
        this.thid = thid;
    }
    DIDCommThreadIStorage.prototype.getThreadMessagesId = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.threadStorage.get(this.thid)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    DIDCommThreadIStorage.prototype.getThid = function () {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, this.thid];
        }); });
    };
    DIDCommThreadIStorage.prototype.getMessageCount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var messages;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.threadStorage.get(this.thid)];
                    case 1:
                        messages = (_a.sent());
                        return [2 /*return*/, (messages || []).length];
                }
            });
        });
    };
    DIDCommThreadIStorage.prototype.add = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var ids;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.has(message)];
                    case 1:
                        if (_a.sent()) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.messagesStorage.add(message.id, message)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.getThreadMessagesId()];
                    case 3:
                        ids = (_a.sent()) || [];
                        ids.push(message.id);
                        return [4 /*yield*/, this.threadStorage.update(this.thid, ids)];
                    case 4:
                        _a.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    DIDCommThreadIStorage.prototype.has = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var ids;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!message)
                            return [2 /*return*/, false];
                        return [4 /*yield*/, this.getThreadMessagesId()];
                    case 1:
                        ids = (_a.sent()) || [];
                        // console.log(ids)
                        return [2 /*return*/, ids.findIndex(function (x) { return x === message.id; }) >= 0];
                }
            });
        });
    };
    DIDCommThreadIStorage.prototype.getAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ids, messagePromises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getThreadMessagesId()];
                    case 1:
                        ids = (_a.sent()) || [];
                        messagePromises = ids.map(function (x) { return _this.messagesStorage.get(x); });
                        return [4 /*yield*/, Promise.all(messagePromises)];
                    case 2: return [2 /*return*/, (_a.sent()).filter(function (x) { return x; }) || []];
                }
            });
        });
    };
    DIDCommThreadIStorage.prototype.getByIndex = function (index) {
        return __awaiter(this, void 0, void 0, function () {
            var ids;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (index < 0)
                            return [2 /*return*/];
                        return [4 /*yield*/, this.getThreadMessagesId()];
                    case 1:
                        ids = _a.sent();
                        if (index >= ids.length)
                            return [2 /*return*/];
                        return [4 /*yield*/, this.messagesStorage.get(ids[index])];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    DIDCommThreadIStorage.prototype.get = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.messagesStorage.get(id)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    DIDCommThreadIStorage.prototype.remove = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var ids, filteredIds;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getThreadMessagesId()];
                    case 1:
                        ids = _a.sent();
                        filteredIds = ids.filter(function (x) { return x !== id; });
                        if (ids.length == filteredIds.length)
                            return [2 /*return*/, false];
                        return [4 /*yield*/, this.threadStorage.update(this.thid, filteredIds)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.messagesStorage.remove(id)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    DIDCommThreadIStorage.prototype.removeByIndex = function (index) {
        return __awaiter(this, void 0, void 0, function () {
            var ids;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (index < 0)
                            return [2 /*return*/];
                        return [4 /*yield*/, this.getThreadMessagesId()];
                    case 1:
                        ids = _a.sent();
                        if (index >= ids.length)
                            return [2 /*return*/];
                        return [2 /*return*/, this.remove(ids[index])];
                }
            });
        });
    };
    return DIDCommThreadIStorage;
}());
exports.DIDCommThreadIStorage = DIDCommThreadIStorage;
//# sourceMappingURL=DIDCommThreadIStorage.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonLDSuite = void 0;
var jsonld = require("jsonld-signatures");
var documentLoaders = require("jsonld");
var axios = require("axios");
var util_1 = require("util");
var JsonLDSuite = /** @class */ (function () {
    function JsonLDSuite() {
        var _this = this;
        this.contextDictionary = [
            { key: "https://www.w3.org/2018/credentials/v1", value: "https://storage.googleapis.com/contexts/credentials-v1.json" },
            { key: "https://w3id.org/security/bbs/v1", value: "https://storage.googleapis.com/contexts/vc-di-bbs.json" },
        ];
        this.cache = new Map();
        this.customDocLoader = function (url) { return __awaiter(_this, void 0, void 0, function () {
            var vm, didDocument, response;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(url.indexOf('did:') > -1 && url.indexOf("#") > -1)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getVerificationMethod(url)];
                    case 1:
                        vm = _a.sent();
                        if (vm) {
                            return [2 /*return*/, {
                                    contextUrl: null,
                                    document: this.vmConvertions(vm),
                                    documentUrl: url // this is the actual context URL after redirects
                                }];
                        }
                        return [3 /*break*/, 6];
                    case 2:
                        if (!(url.indexOf("did:") > -1)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.cacheGetter(url, function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.didDocumentResolver(url)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            }); }); })];
                    case 3:
                        didDocument = _a.sent();
                        return [2 /*return*/, {
                                contextUrl: null,
                                document: didDocument,
                                documentUrl: url // this is the actual context URL after redirects
                            }];
                    case 4: return [4 /*yield*/, this.cacheGetter(url, function () { return __awaiter(_this, void 0, void 0, function () {
                            var contextURL, response;
                            var _a;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        contextURL = ((_a = this.contextDictionary.find(function (x) { return url.includes(x.key); })) === null || _a === void 0 ? void 0 : _a.value) || url;
                                        return [4 /*yield*/, axios.get(contextURL)];
                                    case 1:
                                        response = _b.sent();
                                        return [2 /*return*/, response.data];
                                }
                            });
                        }); })];
                    case 5:
                        response = _a.sent();
                        return [2 /*return*/, {
                                contextUrl: null,
                                document: response,
                                documentUrl: url
                            }];
                    case 6: return [2 /*return*/];
                }
            });
        }); };
        this.documentLoader = jsonld.extendContextLoader(this.customDocLoader);
    }
    JsonLDSuite.prototype.loadSuite = function (params) {
        this.secret = params.secrets;
        this.useCache = params.useCache;
    };
    JsonLDSuite.prototype.sign = function (documentToSign, controllerDid, verificationMethodId, purpuse) {
        return __awaiter(this, void 0, void 0, function () {
            var suite, purpose, parsedDocumentToSign, signedDocument;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSuite({
                            controllerDid: controllerDid,
                            verificationMethodId: verificationMethodId
                        })];
                    case 1:
                        suite = _a.sent();
                        return [4 /*yield*/, this.getPurpose(purpuse)];
                    case 2:
                        purpose = _a.sent();
                        parsedDocumentToSign = JSON.parse(JSON.stringify(documentToSign));
                        return [4 /*yield*/, jsonld.sign(parsedDocumentToSign, {
                                suite: suite,
                                purpose: purpose,
                                documentLoader: this.documentLoader,
                            })];
                    case 3:
                        signedDocument = _a.sent();
                        return [2 /*return*/, signedDocument];
                }
            });
        });
    };
    JsonLDSuite.prototype.verify = function (data, purpose) {
        return __awaiter(this, void 0, void 0, function () {
            var suite, dataToSign, verifyProof, _a, _b, _c;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, this.getSuite()];
                    case 1:
                        suite = _e.sent();
                        dataToSign = JSON.parse(data);
                        _b = (_a = jsonld).verify;
                        _c = [dataToSign];
                        _d = {
                            suite: suite
                        };
                        return [4 /*yield*/, this.getPurpose(purpose)];
                    case 2: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.purpose = _e.sent(),
                                _d.documentLoader = this.documentLoader,
                                _d)]))];
                    case 3:
                        verifyProof = _e.sent();
                        return [2 /*return*/, verifyProof.verified];
                }
            });
        });
    };
    JsonLDSuite.prototype.cacheGetter = function (key, action) {
        return __awaiter(this, void 0, void 0, function () {
            var value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.cache.has(key)) return [3 /*break*/, 2];
                        return [4 /*yield*/, action(key)];
                    case 1:
                        value = _a.sent();
                        this.cache.set(key, value);
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.cache.get(key)];
                }
            });
        });
    };
    JsonLDSuite.prototype.getPurpose = function (purpose) {
        if (purpose.name == "authentication") {
            if (purpose.challenge) {
                return new jsonld.purposes.AuthenticationProofPurpose({
                    challenge: purpose.challenge
                });
            }
            throw new Error("Authentication purpose requires challenge. Set this on purpose.challenge field");
        }
        return new jsonld.purposes.ControllerProofPurpose({ term: purpose.name });
    };
    JsonLDSuite.prototype.vmConvertions = function (vm) { return vm; };
    JsonLDSuite.prototype.getVerificationMethod = function (vmId) {
        return __awaiter(this, void 0, void 0, function () {
            var did, didDocument, vm, field, vm_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        did = vmId.substring(0, vmId.indexOf("#"));
                        return [4 /*yield*/, this.cacheGetter(did, function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.didDocumentResolver(did)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            }); }); })];
                    case 1:
                        didDocument = _a.sent();
                        if (!didDocument || !(didDocument === null || didDocument === void 0 ? void 0 : didDocument.id))
                            throw new Error("DID Document can't be resolved");
                        vm = didDocument.verificationMethod.find(function (x) { return x.id.substring(x.id.lastIndexOf("#")) == vmId.substring(vmId.lastIndexOf("#")); });
                        if (vm)
                            return [2 /*return*/, vm];
                        for (field in didDocument) {
                            if ((0, util_1.isArray)(didDocument[field])) {
                                for (vm_1 in didDocument[field]) {
                                    if (didDocument[field][vm_1].id == vmId) {
                                        return [2 /*return*/, didDocument[field][vm_1]];
                                    }
                                }
                            }
                        }
                        throw new Error("Verification method not found: " + vmId);
                }
            });
        });
    };
    return JsonLDSuite;
}());
exports.JsonLDSuite = JsonLDSuite;
//# sourceMappingURL=jsonld-suite.js.map
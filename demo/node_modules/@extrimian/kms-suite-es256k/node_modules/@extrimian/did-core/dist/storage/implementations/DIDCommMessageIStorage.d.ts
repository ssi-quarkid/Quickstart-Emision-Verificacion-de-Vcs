import { IStorage } from "../interfaces/IStorage";
import { IDIDCommMessageStorage } from "../interfaces/IDIDCommMessageStorage";
import { DIDCommMessage } from "../../models/messaging/didcom-message";
import { DIDCommThreadIStorage } from "./DIDCommThreadIStorage";
export declare class DIDCommMessageIStorage<T extends DIDCommMessage<any, any>> implements IDIDCommMessageStorage<T> {
    private messagesStorage;
    private threadStorage;
    constructor(messagesStorage: IStorage, threadStorage: IStorage);
    add(message: T): Promise<boolean>;
    get(id: string, thid?: string): Promise<T>;
    getByThread(thid: string): Promise<DIDCommThreadIStorage<T>>;
    remove(message: T): Promise<boolean>;
    removeById(id: string, thid?: string): Promise<boolean>;
    removeThread(thid: string): Promise<boolean>;
}

import { IStorage } from "../interfaces/IStorage";
import { IDIDCommThreadStorage } from "../interfaces/IDIDCommThreadStorage";
import { IDIDCommMessageStorage } from "../interfaces/IDIDCommMessageStorage";
import { DIDCommMessage } from "../../models/messaging/didcom-message";
export declare class DIDCommMessageIStorage<T extends DIDCommMessage<any, any>> implements IDIDCommMessageStorage<T> {
    private messagesStorage;
    private threadStorage;
    constructor(messagesStorage: IStorage, threadStorage: IStorage);
    add(message: T): Promise<boolean>;
    get(id: string, thid?: string): Promise<T>;
    getByThread(thid: string): Promise<DIDCommThreadIStorage<T>>;
    remove(message: T): Promise<boolean>;
    removeById(id: string, thid?: string): Promise<boolean>;
    removeThread(thid: string): Promise<boolean>;
}
export declare class DIDCommThreadIStorage<T extends DIDCommMessage<any, any>> implements IDIDCommThreadStorage<T> {
    private messagesStorage;
    private threadStorage;
    private thid;
    constructor(messagesStorage: IStorage, threadStorage: IStorage, thid: string);
    getThreadMessagesId(): Promise<string[]>;
    getThid(): Promise<string>;
    getMessageCount(): Promise<number>;
    add(message: T): Promise<boolean>;
    has(message: T): Promise<boolean>;
    getAll(): Promise<T[]>;
    getByIndex(index: number): Promise<T>;
    get(id: string): Promise<T>;
    remove(id: string): Promise<boolean>;
    removeByIndex(index: number): Promise<boolean>;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseConverter = exports.Base = void 0;
var multibase = require("multibase");
var bs58 = require("bs58");
var base64_1 = require("multiformats/bases/base64");
var text_encoding_1 = require("text-encoding");
var Base;
(function (Base) {
    Base["Hex"] = "hex";
    Base["Base58"] = "base58";
    Base["Base64"] = "base64";
    Base["JWK"] = "jwk";
})(Base = exports.Base || (exports.Base = {}));
var BaseConverter = /** @class */ (function () {
    function BaseConverter() {
    }
    BaseConverter.hex2base64url = function (dataHex) {
        var buffer = Buffer.from(dataHex, "hex");
        var base64 = buffer.toString("base64");
        var base64url = base64
            .replace(/\+/g, "-")
            .replace(/\//g, "_")
            .replace(/=/g, "");
        return base64url;
    };
    BaseConverter.getPrivateJWKfromHex = function (_privKey, pubKey) {
        var privKey = _privKey;
        // remove 0x and 0x04 to be used in jose library
        privKey = privKey.replace("0x", "");
        pubKey = pubKey.replace("0x04", "");
        return {
            crv: "secp256k1",
            kty: "EC",
            d: BaseConverter.hex2base64url(privKey),
            x: BaseConverter.hex2base64url(pubKey.substr(0, 64)),
            y: BaseConverter.hex2base64url(pubKey.substr(64, 64))
        };
    };
    BaseConverter.convert = function (value, fromBase, toBase, keyType) {
        if (fromBase == Base.Base58 && toBase == Base.Hex) {
            var hex = this.toHexString(bs58.decode(value));
            return hex;
        }
        if (fromBase == Base.Hex && toBase == Base.Base58) {
            return bs58.encode(Buffer.from(value, "hex"));
        }
        if (fromBase == Base.Hex && toBase == Base.JWK) {
            return this.hexToJWK(value, keyType);
        }
        if (fromBase == Base.JWK && toBase == Base.Hex) {
            return this.JWKToHex(value);
        }
        if (fromBase == Base.Base58 && toBase == Base.JWK) {
            var hex = this.toHexString(bs58.decode(value));
            return this.hexToJWK(hex, keyType);
        }
        if (fromBase == Base.JWK && toBase == Base.Base58) {
            return bs58.encode(Buffer.from(this.JWKToHex(value).replace("0x", ""), "hex"));
        }
    };
    BaseConverter.hexToJWK = function (value, keyType) {
        value = value.replace("0x04", "");
        value = value.replace("0x", "");
        // if (value.indexOf("04") == 0) {
        //     value = value.substring(2);
        // }
        return {
            // kid: "",
            kty: "EC",
            crv: keyType,
            x: this.base64url(Buffer.from(value.substring(0, value.length / 2), "hex")),
            y: this.base64url(Buffer.from(value.substring(value.length / 2), "hex")),
        };
    };
    BaseConverter.base64url = function (buffer) {
        var decoder = new text_encoding_1.TextDecoder();
        var bytes = multibase.encode("base64url", buffer);
        return decoder.decode(bytes).slice(1);
    };
    BaseConverter.JWKToHex = function (value) {
        // const b1 = multibase.decode();
        if (value.kty == "RSA" && value.n) {
            return "0x".concat(Buffer.from(base64_1.base64url.baseDecode(value.n)).toString("hex"));
        }
        else if (value.x && value.y) {
            var b1 = Buffer.from(base64_1.base64url.baseDecode(value.x)).toString("hex");
            var b2 = Buffer.from(base64_1.base64url.baseDecode(value.y)).toString("hex");
            // return `0x04${b1.toString("hex")}${b2.toString("hex")}`;
            return "0x".concat(b1).concat(b2);
        }
        throw new Error("This JWK To Hex conversion is not supported: " + JSON.stringify(value));
    };
    BaseConverter.fromHexString = function (hexString) {
        return Uint8Array.from(hexString.match(/.{1,2}/g).map(function (byte) { return parseInt(byte, 16); }));
    };
    BaseConverter.toHexString = function (bytes) {
        return bytes.reduce(function (str, byte) { return str + byte.toString(16).padStart(2, "0"); }, "");
    };
    return BaseConverter;
}());
exports.BaseConverter = BaseConverter;
//# sourceMappingURL=base-converter.js.map
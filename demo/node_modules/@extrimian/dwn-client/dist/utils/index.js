"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.match = exports.createUUID = exports.parseDateToUnixTimestamp = exports.trimString = exports.decodeMessage = void 0;
const uuid = __importStar(require("uuid"));
const decodeMessage = (message) => {
    try {
        const chunkSize = 5000; // Adjust the chunk size as needed
        const dataArray = new Uint8Array(message.data.data.data);
        const chunks = [];
        for (let i = 0; i < dataArray.length; i += chunkSize) {
            const chunk = dataArray.subarray(i, i + chunkSize);
            // Convert chunk to string and add to chunks array
            chunks.push(String.fromCharCode.apply(null, chunk));
        }
        const decodedString = chunks.join('');
        const trimmedString = (0, exports.trimString)(decodedString); // Assuming trimString is a function you have
        try {
            return JSON.parse(trimmedString);
        }
        catch (error) {
            console.log("Error trying to parse message data to JSON of size . Returning raw value");
            return trimmedString;
        }
    }
    catch (error) {
        throw new Error(`On decoding message: ${error.message}`);
    }
};
exports.decodeMessage = decodeMessage;
const trimString = (message) => {
    let str = message;
    while (!(str[0] === "{" && str[str.length - 1] === "}")) {
        if (str[0] !== "{")
            str = str.substring(1);
        if (str[str.length - 1] !== "}")
            str = str.substring(0, str.length - 1);
    }
    return str;
};
exports.trimString = trimString;
const parseDateToUnixTimestamp = (date) => Math.floor(date.getTime() / 1000);
exports.parseDateToUnixTimestamp = parseDateToUnixTimestamp;
const createUUID = () => uuid.v4();
exports.createUUID = createUUID;
const match = (object1, object2) => Object.keys(object1).every((key1) => object1[key1] === object2[key1]);
exports.match = match;
//# sourceMappingURL=index.js.map
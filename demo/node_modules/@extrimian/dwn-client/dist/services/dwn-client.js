"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DWNClient = void 0;
const events_1 = require("events");
const inbox_consumer_1 = require("./inbox-consumer");
const inbox_sender_1 = require("./inbox-sender");
const utils_1 = require("../utils");
class DWNClient {
    constructor(config) {
        this.consumer = new inbox_consumer_1.InboxConsumer(config.inboxURL, config.did);
        this.sender = new inbox_sender_1.InboxSender();
        this.emitter = new events_1.EventEmitter();
        this.storage = config.storage;
    }
    async checkOutLastPullDate() {
        let lastPullDate = await this.storage.getLastPullDate();
        if (!lastPullDate) {
            lastPullDate = new Date();
            await this.storage.updateLastPullDate(lastPullDate);
        }
        return lastPullDate;
    }
    addSubscriber(callback) {
        this.emitter.on("message-received" /* DWNClientEvent.MessageReceived */, callback);
    }
    async pullNewMessageWait() {
        const dateFilter = (0, utils_1.parseDateToUnixTimestamp)(await this.checkOutLastPullDate());
        const newMessages = await this.consumer.getMessages({ dateCreated: dateFilter });
        await this.storage.saveMessages(newMessages);
        await this.storage.updateLastPullDate(new Date());
        this.emitter.emit("message-received" /* DWNClientEvent.MessageReceived */, newMessages);
    }
    async pullNewMessages() {
        const dateFilter = (0, utils_1.parseDateToUnixTimestamp)(await this.checkOutLastPullDate());
        this.consumer
            .getMessages({ dateCreated: dateFilter })
            .then(async (newMessages) => {
            await this.storage.saveMessages(newMessages);
            await this.storage.updateLastPullDate(new Date());
            this.emitter.emit("message-received" /* DWNClientEvent.MessageReceived */, newMessages);
        });
    }
    async getMessages(filters) {
        const allMessages = await this.storage.getMessages();
        return allMessages.filter((message) => {
            var _a;
            return (0, utils_1.match)(filters, message.descriptor) ||
                (filters.root ? filters.root === ((_a = message === null || message === void 0 ? void 0 : message.descriptor) === null || _a === void 0 ? void 0 : _a.objectId) : false);
        });
    }
    async sendMessage(params) {
        const sentMessages = await this.sender.sendMessage(params);
        await this.storage.saveMessages(sentMessages.map((message) => (Object.assign(Object.assign({}, message), { data: message.data }))));
    }
}
exports.DWNClient = DWNClient;
//# sourceMappingURL=dwn-client.js.map
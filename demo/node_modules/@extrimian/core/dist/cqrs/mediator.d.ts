import { ICommand } from "./icommand";
import { INotification } from "./inotification";
export declare abstract class IMediator {
    abstract send<TCommand extends ICommand<TResult>, TResult>(command: TCommand): Promise<TResult>;
    abstract sendSymbol<TCommand extends ICommand<TResult>, TResult>(symbol: symbol, command: TCommand): Promise<TResult>;
    abstract notify<TNotification extends INotification>(command: TNotification): Promise<void>;
    abstract notifySymbol<TNotification extends INotification>(symbol: symbol, command: TNotification): Promise<void>;
}
export declare class Mediator {
    send<TCommand extends ICommand<TResult>, TResult>(command: TCommand): Promise<TResult>;
    sendSymbol<TCommand extends ICommand<TResult>, TResult>(symbol: symbol, command: TCommand): Promise<TResult>;
    notify<TNotification extends INotification>(notification: TNotification): Promise<void>;
    notifySymbol<TNotification extends INotification>(symbol: symbol, notification: TNotification): Promise<void>;
}

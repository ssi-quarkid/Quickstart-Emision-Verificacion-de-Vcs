import { ICommandHandler } from "../../cqrs/icommand.handler";
import { ICommand } from "../../cqrs/icommand";
declare enum ServiceScope {
    Singleton = 0,
    Transient = 1,
    InRequest = 2
}
declare const Injectable: (key: any, scope?: ServiceScope) => (implementation: new (...args: never[]) => any) => void;
declare const Inject: <T = unknown>(serviceIdentifier: any) => (target: any, targetKey?: string | symbol | undefined, indexOrPropertyDescriptor?: number | TypedPropertyDescriptor<any> | undefined) => void;
declare const InjectableHandler: (command: new (...args: never[]) => ICommand<any>) => (handler: new (...args: never[]) => ICommandHandler<any, any>) => void;
declare const InjectableHandlerSymbol: (symbol: symbol) => (handler: new (...args: never[]) => ICommandHandler<any, any>) => void;
export { Injectable, Inject, InjectableHandler, ServiceScope, InjectableHandlerSymbol, };

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InjectableHandlerSymbol = exports.ServiceScope = exports.InjectableHandler = exports.Inject = exports.Injectable = void 0;
var dependency_injection_service_1 = require("../../services/dependency-injection.service");
var inversify_1 = require("inversify");
var ServiceScope;
(function (ServiceScope) {
    ServiceScope[ServiceScope["Singleton"] = 0] = "Singleton";
    ServiceScope[ServiceScope["Transient"] = 1] = "Transient";
    ServiceScope[ServiceScope["InRequest"] = 2] = "InRequest";
})(ServiceScope || (ServiceScope = {}));
exports.ServiceScope = ServiceScope;
var Injectable = function (key, scope) {
    if (scope === void 0) { scope = ServiceScope.Transient; }
    return function (implementation) {
        (0, inversify_1.injectable)()(implementation);
        switch (scope) {
            case ServiceScope.InRequest:
                dependency_injection_service_1.DIService.container.bind(key).to(implementation).inRequestScope();
                break;
            case ServiceScope.Singleton:
                dependency_injection_service_1.DIService.container
                    .bind(key)
                    .to(implementation)
                    .inSingletonScope();
                break;
            case ServiceScope.Transient:
                dependency_injection_service_1.DIService.container
                    .bind(key)
                    .to(implementation)
                    .inTransientScope();
                break;
            default:
                break;
        }
    };
};
exports.Injectable = Injectable;
var Inject = function (serviceIdentifier) {
    return function (target, targetKey, indexOrPropertyDescriptor) {
        (0, inversify_1.inject)(serviceIdentifier)(target, targetKey, indexOrPropertyDescriptor);
    };
};
exports.Inject = Inject;
var InjectableHandler = function (command) {
    return function (handler) {
        (0, inversify_1.injectable)()(handler);
        dependency_injection_service_1.DIService.addCommand(command, handler);
    };
};
exports.InjectableHandler = InjectableHandler;
var InjectableHandlerSymbol = function (symbol) {
    return function (handler) {
        (0, inversify_1.injectable)()(handler);
        dependency_injection_service_1.DIService.addSymbol(symbol, handler);
    };
};
exports.InjectableHandlerSymbol = InjectableHandlerSymbol;
//# sourceMappingURL=diconfig.decorator.js.map
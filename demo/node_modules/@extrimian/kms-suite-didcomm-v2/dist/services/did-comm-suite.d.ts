import { IDidCommKeyPair, IDIDCommV2Suite, DIDCommMessagePacking, IPackedDIDCommMessage } from "@extrimian/kms-core";
import { JWE } from "did-jwt";
import { IKeyManagerSignArgs } from "../models/key-manager-sign-args";
import { ParsedDID } from "../models/parsed-did";
import { IDIDCommMessage } from "../models/didcomm-message-media-type";
import { DIDDocument } from "@extrimian/did-core";
export declare class DIDCommSuite implements IDIDCommV2Suite {
    private didResolver?;
    keyPair: IDidCommKeyPair;
    constructor(didResolver?: (did: string) => Promise<DIDDocument>);
    load(keyPair?: IDidCommKeyPair): void;
    create(): Promise<IDidCommKeyPair>;
    pack(params: {
        senderVerificationMethodId: string;
        toKeys: {
            verificationMethodId: string;
            publicKeyHex: string;
        }[];
        message: IDIDCommMessage;
        packing: DIDCommMessagePacking;
    }): Promise<IPackedDIDCommMessage>;
    packJWS(params: {
        senderVerificationMethodId: string;
        toKeys: {
            verificationMethodId: string;
            publicKeyHex: string;
        }[];
        message: IDIDCommMessage;
        packing: DIDCommMessagePacking;
    }): Promise<IPackedDIDCommMessage>;
    private packJWE;
    unpack(jwe: any): Promise<any>;
    private unpackJWE;
    private unpackJWS;
    private encodeJoseBlob;
    keyManagerSign(args: IKeyManagerSignArgs): Promise<string>;
    private createEcdhWrapper;
    private sharedSecret;
    parseDidUrl(didUrl: string): ParsedDID | null;
    decodeJoseBlob(blob: string): any;
    isDefined<T>(arg: T): arg is Exclude<T, null | undefined>;
    private decodeMessageAndMediaType;
    private getPublicKeyByVerificationMethod;
    extractSenderEncryptionKey(jwe: JWE): Promise<{
        publicKeyHex: string;
        publicKeyType: string;
    }>;
}

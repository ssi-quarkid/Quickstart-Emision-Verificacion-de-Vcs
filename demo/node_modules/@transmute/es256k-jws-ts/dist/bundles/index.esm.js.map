{"version":3,"file":"index.esm.js","sources":["../../src/keyUtils.ts","../../src/JWS.ts","../../src/JWT.ts"],"sourcesContent":["import keyto from '@trust/keyto';\nimport base64url from 'base64url';\nimport crypto from 'crypto';\n\nimport { binToHex, hexToBin, instantiateSecp256k1 } from 'bitcoin-ts';\n\nimport stringify from 'json-stringify-deterministic';\n\nconst compressedHexEncodedPublicKeyLength = 66;\n\n/** Secp256k1 Private Key JWK  */\nexport interface ISecp256k1PrivateKeyJWK {\n  /** key type */\n  kty: string;\n\n  /** curve */\n  crv: string;\n\n  /** private point */\n  d: string;\n\n  /** public point */\n  x: string;\n\n  /** public point */\n  y: string;\n\n  /** key id */\n  kid: string;\n}\n\n/** Secp256k1 Public Key JWK  */\nexport interface ISecp256k1PublicJWK {\n  /** key type */\n  kty: string;\n\n  /** curve */\n  crv: string;\n\n  /** public point */\n  x: string;\n\n  /** public point */\n  y: string;\n\n  /** key id */\n  kid: string;\n}\n\n/**\n * Example\n * ```js\n * {\n *  kty: 'EC',\n *  crv: 'secp256k1',\n *  d: 'rhYFsBPF9q3-uZThy7B3c4LDF_8wnozFUAEm5LLC4Zw',\n *  x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',\n *  y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',\n *  kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw'\n * }\n * ```\n * See [rfc7638](https://tools.ietf.org/html/rfc7638) for more details on JWK.\n */\nexport const getKid = (jwk: ISecp256k1PrivateKeyJWK | ISecp256k1PublicJWK) => {\n  const copy = { ...jwk } as any;\n  delete copy.d;\n  delete copy.kid;\n  delete copy.alg;\n  const digest = crypto\n    .createHash('sha256')\n    .update(stringify(copy))\n    .digest();\n\n  return base64url.encode(Buffer.from(digest));\n};\n\n/** convert compressed hex encoded private key to jwk */\nexport const privateJWKFromPrivateKeyHex = async (privateKeyHex: string) => {\n  const jwk = {\n    ...keyto.from(privateKeyHex, 'blk').toJwk('private'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert compressed hex encoded public key to jwk */\nexport const publicJWKFromPublicKeyHex = async (publicKeyHex: string) => {\n  const secp256k1 = await instantiateSecp256k1();\n  let key = publicKeyHex;\n  if (publicKeyHex.length === compressedHexEncodedPublicKeyLength) {\n    key = binToHex(secp256k1.uncompressPublicKey(hexToBin(publicKeyHex)));\n  }\n  const jwk = {\n    ...keyto.from(key, 'blk').toJwk('public'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert pem encoded private key to jwk */\nexport const privateJWKFromPrivateKeyPem = (privateKeyPem: string) => {\n  const jwk = {\n    ...keyto.from(privateKeyPem, 'pem').toJwk('private'),\n    crv: 'secp256k1',\n  };\n  // console.log(jwk);\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert pem encoded private key to jwk */\nexport const publicJWKFromPublicKeyPem = (publicKeyPem: string) => {\n  const jwk = {\n    ...keyto.from(publicKeyPem, 'pem').toJwk('public'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert jwk to hex encoded private key */\nexport const privateKeyHexFromJWK = async (jwk: ISecp256k1PrivateKeyJWK) =>\n  keyto\n    .from(\n      {\n        ...jwk,\n        crv: 'K-256',\n      },\n      'jwk'\n    )\n    .toString('blk', 'private');\n\n/** convert jwk to hex encoded public key */\nexport const publicKeyHexFromJWK = async (jwk: ISecp256k1PublicJWK) => {\n  const secp256k1 = await instantiateSecp256k1();\n  const uncompressedPublicKey = keyto\n    .from(\n      {\n        ...jwk,\n        crv: 'K-256',\n      },\n      'jwk'\n    )\n    .toString('blk', 'public');\n  const compressed = secp256k1.compressPublicKey(\n    hexToBin(uncompressedPublicKey)\n  );\n  return binToHex(compressed);\n};\n\n/** convert jwk to binary encoded private key */\nexport const privateKeyUInt8ArrayFromJWK = async (\n  jwk: ISecp256k1PrivateKeyJWK\n) => {\n  const privateKeyHex = await privateKeyHexFromJWK(jwk);\n  return hexToBin(privateKeyHex);\n};\n\n/** convert jwk to binary encoded public key */\nexport const publicKeyUInt8ArrayFromJWK = async (jwk: ISecp256k1PublicJWK) => {\n  const publicKeyHex = await publicKeyHexFromJWK(jwk);\n  return hexToBin(publicKeyHex);\n};\n\nexport default {\n  binToHex,\n  getKid,\n  hexToBin,\n  privateJWKFromPrivateKeyHex,\n  privateJWKFromPrivateKeyPem,\n  privateKeyHexFromJWK,\n  privateKeyUInt8ArrayFromJWK,\n  publicJWKFromPublicKeyHex,\n  publicJWKFromPublicKeyPem,\n  publicKeyHexFromJWK,\n  publicKeyUInt8ArrayFromJWK,\n};\n","import base64url from 'base64url';\n\nimport { binToHex, hexToBin, instantiateSecp256k1 } from 'bitcoin-ts';\n\nimport crypto from 'crypto';\n\nimport {\n  ISecp256k1PrivateKeyJWK,\n  ISecp256k1PublicJWK,\n  privateKeyUInt8ArrayFromJWK,\n  publicKeyUInt8ArrayFromJWK,\n} from './keyUtils';\n\n/** error matching @panva/jose for JWS verification failure. */\nclass JWSVerificationFailed extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'JWSVerificationFailed';\n  }\n}\n\n/** JWS Header */\nexport interface IJWSHeader {\n  /** algorithm, ES256K */\n  alg: string;\n\n  /** type, JWT */\n  typ?: string;\n  /** signing key id, ... */\n  kid?: string;\n}\n\n/** Produce a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\nexport const signDetached = async (\n  // in the case of EcdsaSecp256k1Signature2019 this is the result of createVerifyData\n  payload: Buffer,\n  privateKeyJWK: ISecp256k1PrivateKeyJWK,\n  header = {\n    alg: 'ES256K',\n    b64: false,\n    crit: ['b64'],\n  }\n) => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJWK(privateKeyJWK);\n  const secp256k1 = await instantiateSecp256k1();\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n\n  const message = Buffer.from(toBeSignedBuffer);\n\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest()\n    .toString('hex');\n\n  const messageHashUInt8Array = hexToBin(digest);\n\n  const signatureUInt8Array = secp256k1.signMessageHashCompact(\n    privateKeyUInt8Array,\n    messageHashUInt8Array\n  );\n\n  const signatureHex = binToHex(signatureUInt8Array);\n  const encodedSignature = base64url.encode(Buffer.from(signatureHex, 'hex'));\n\n  return `${encodedHeader}..${encodedSignature}`;\n};\n\n/** Verify a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\nexport const verifyDetached = async (\n  jws: string,\n  payload: Buffer,\n  publicKeyJWK: ISecp256k1PublicJWK\n) => {\n  if (jws.indexOf('..') === -1) {\n    throw new JWSVerificationFailed('not a valid rfc7797 jws.');\n  }\n  const [encodedHeader, encodedSignature] = jws.split('..');\n  const header = JSON.parse(base64url.decode(encodedHeader));\n  if (header.alg !== 'ES256K') {\n    throw new Error('JWS alg is not signed with ES256K.');\n  }\n  if (\n    header.b64 !== false ||\n    !header.crit ||\n    !header.crit.length ||\n    header.crit[0] !== 'b64'\n  ) {\n    throw new Error('JWS Header is not in rfc7797 format (not detached).');\n  }\n  const publicKeyUInt8Array = await publicKeyUInt8ArrayFromJWK(publicKeyJWK);\n  const secp256k1 = await instantiateSecp256k1();\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n  const message = Buffer.from(toBeSignedBuffer);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest()\n    .toString('hex');\n  const messageHashUInt8Array = hexToBin(digest);\n  const signatureUInt8Array = hexToBin(\n    base64url.toBuffer(encodedSignature).toString('hex')\n  );\n  const verified = secp256k1.verifySignatureCompact(\n    signatureUInt8Array,\n    publicKeyUInt8Array,\n    messageHashUInt8Array\n  );\n  if (verified) {\n    return true;\n  }\n  throw new Error('Cannot verify detached signature.');\n};\n\n/** Produce a normal ES256K JWS */\nexport const sign = async (\n  payload: any,\n  privateKeyJWK: ISecp256k1PrivateKeyJWK,\n  header: IJWSHeader = { alg: 'ES256K' }\n) => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJWK(privateKeyJWK);\n  const secp256k1 = await instantiateSecp256k1();\n\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n  const encodedPayload = base64url.encode(JSON.stringify(payload));\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n  const message = Buffer.from(toBeSigned);\n\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest()\n    .toString('hex');\n  const messageHashUInt8Array = hexToBin(digest);\n  const signatureUInt8Array = secp256k1.signMessageHashCompact(\n    privateKeyUInt8Array,\n    messageHashUInt8Array\n  );\n  const signatureHex = binToHex(signatureUInt8Array);\n  const encodedSignature = base64url.encode(Buffer.from(signatureHex, 'hex'));\n  return `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n};\n\n/** Verify an ES256K JWS, returns the decoded object if successful, throws otherwise. */\nexport const verify = async (\n  jws: string,\n  publicKeyJWK: ISecp256k1PublicJWK\n) => {\n  const secp256k1 = await instantiateSecp256k1();\n  const publicKeyUInt8Array = await publicKeyUInt8ArrayFromJWK(publicKeyJWK);\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n\n  const message = Buffer.from(toBeSigned);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest()\n    .toString('hex');\n\n  const messageHashUInt8Array = hexToBin(digest);\n\n  const signatureUInt8Array = hexToBin(\n    base64url.toBuffer(encodedSignature).toString('hex')\n  );\n\n  const verified = secp256k1.verifySignatureCompact(\n    signatureUInt8Array,\n    publicKeyUInt8Array,\n    messageHashUInt8Array\n  );\n  if (verified) {\n    return JSON.parse(base64url.decode(encodedPayload));\n  }\n  throw new JWSVerificationFailed('signature verification failed');\n};\n\n/** decode a JWS (without verifying it) */\nexport const decode = (jws: string, options = { complete: false }) => {\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  if (options.complete) {\n    return {\n      header: JSON.parse(base64url.decode(encodedHeader)),\n      payload: JSON.parse(base64url.decode(encodedPayload)),\n      signature: encodedSignature,\n    };\n  }\n  return JSON.parse(base64url.decode(encodedPayload));\n};\n\nexport default {\n  decode,\n\n  sign,\n  signDetached,\n\n  verify,\n  verifyDetached,\n};\n","import JWS from './JWS';\n\nimport { ISecp256k1PrivateKeyJWK, ISecp256k1PublicJWK } from './keyUtils';\n\n/** default expiration in hours added automatically */\nconst defaultExpiresInHours = 1;\n\nclass JWTVerificationFailed extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'JWTVerificationFailed';\n  }\n}\n\n/** return a JWT singed with ES256K JWS */\nexport const sign = async (\n  payload: any,\n  privateKeyJWK: ISecp256k1PrivateKeyJWK\n) => {\n  const iat = Math.floor(Date.now() / 1000);\n\n  const exp = iat + 60 * 60 * defaultExpiresInHours;\n\n  return JWS.sign(\n    {\n      ...payload,\n      exp: payload.exp || exp,\n      iat,\n    },\n    privateKeyJWK,\n    {\n      alg: 'ES256K',\n      kid: privateKeyJWK.kid,\n    }\n  );\n};\n\n/** verify a JWT singed with ES256K JWS */\nexport const verify = async (\n  jwt: string,\n  publicKeyJWK: ISecp256k1PublicJWK\n) => {\n  const verified = await JWS.verify(jwt, publicKeyJWK);\n  if (Math.floor(Date.now() / 1000) > verified.exp) {\n    throw new JWTVerificationFailed('token is expired');\n  }\n  return verified;\n};\n\nexport default { sign, decode: JWS.decode, verify };\n"],"names":["sign","verify"],"mappings":"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"}
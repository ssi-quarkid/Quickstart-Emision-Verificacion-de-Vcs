{"version":3,"file":"index.umd.js","sources":["../../src/keyUtils.ts","../../src/JWS.ts","../../src/JWT.ts"],"sourcesContent":["import keyto from '@trust/keyto';\nimport base64url from 'base64url';\nimport crypto from 'crypto';\n\nimport { binToHex, hexToBin, instantiateSecp256k1 } from 'bitcoin-ts';\n\nimport stringify from 'json-stringify-deterministic';\n\nconst compressedHexEncodedPublicKeyLength = 66;\n\n/** Secp256k1 Private Key JWK  */\nexport interface ISecp256k1PrivateKeyJWK {\n  /** key type */\n  kty: string;\n\n  /** curve */\n  crv: string;\n\n  /** private point */\n  d: string;\n\n  /** public point */\n  x: string;\n\n  /** public point */\n  y: string;\n\n  /** key id */\n  kid: string;\n}\n\n/** Secp256k1 Public Key JWK  */\nexport interface ISecp256k1PublicJWK {\n  /** key type */\n  kty: string;\n\n  /** curve */\n  crv: string;\n\n  /** public point */\n  x: string;\n\n  /** public point */\n  y: string;\n\n  /** key id */\n  kid: string;\n}\n\n/**\n * Example\n * ```js\n * {\n *  kty: 'EC',\n *  crv: 'secp256k1',\n *  d: 'rhYFsBPF9q3-uZThy7B3c4LDF_8wnozFUAEm5LLC4Zw',\n *  x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',\n *  y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',\n *  kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw'\n * }\n * ```\n * See [rfc7638](https://tools.ietf.org/html/rfc7638) for more details on JWK.\n */\nexport const getKid = (jwk: ISecp256k1PrivateKeyJWK | ISecp256k1PublicJWK) => {\n  const copy = { ...jwk } as any;\n  delete copy.d;\n  delete copy.kid;\n  delete copy.alg;\n  const digest = crypto\n    .createHash('sha256')\n    .update(stringify(copy))\n    .digest();\n\n  return base64url.encode(Buffer.from(digest));\n};\n\n/** convert compressed hex encoded private key to jwk */\nexport const privateJWKFromPrivateKeyHex = async (privateKeyHex: string) => {\n  const jwk = {\n    ...keyto.from(privateKeyHex, 'blk').toJwk('private'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert compressed hex encoded public key to jwk */\nexport const publicJWKFromPublicKeyHex = async (publicKeyHex: string) => {\n  const secp256k1 = await instantiateSecp256k1();\n  let key = publicKeyHex;\n  if (publicKeyHex.length === compressedHexEncodedPublicKeyLength) {\n    key = binToHex(secp256k1.uncompressPublicKey(hexToBin(publicKeyHex)));\n  }\n  const jwk = {\n    ...keyto.from(key, 'blk').toJwk('public'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert pem encoded private key to jwk */\nexport const privateJWKFromPrivateKeyPem = (privateKeyPem: string) => {\n  const jwk = {\n    ...keyto.from(privateKeyPem, 'pem').toJwk('private'),\n    crv: 'secp256k1',\n  };\n  // console.log(jwk);\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert pem encoded private key to jwk */\nexport const publicJWKFromPublicKeyPem = (publicKeyPem: string) => {\n  const jwk = {\n    ...keyto.from(publicKeyPem, 'pem').toJwk('public'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert jwk to hex encoded private key */\nexport const privateKeyHexFromJWK = async (jwk: ISecp256k1PrivateKeyJWK) =>\n  keyto\n    .from(\n      {\n        ...jwk,\n        crv: 'K-256',\n      },\n      'jwk'\n    )\n    .toString('blk', 'private');\n\n/** convert jwk to hex encoded public key */\nexport const publicKeyHexFromJWK = async (jwk: ISecp256k1PublicJWK) => {\n  const secp256k1 = await instantiateSecp256k1();\n  const uncompressedPublicKey = keyto\n    .from(\n      {\n        ...jwk,\n        crv: 'K-256',\n      },\n      'jwk'\n    )\n    .toString('blk', 'public');\n  const compressed = secp256k1.compressPublicKey(\n    hexToBin(uncompressedPublicKey)\n  );\n  return binToHex(compressed);\n};\n\n/** convert jwk to binary encoded private key */\nexport const privateKeyUInt8ArrayFromJWK = async (\n  jwk: ISecp256k1PrivateKeyJWK\n) => {\n  const privateKeyHex = await privateKeyHexFromJWK(jwk);\n  return hexToBin(privateKeyHex);\n};\n\n/** convert jwk to binary encoded public key */\nexport const publicKeyUInt8ArrayFromJWK = async (jwk: ISecp256k1PublicJWK) => {\n  const publicKeyHex = await publicKeyHexFromJWK(jwk);\n  return hexToBin(publicKeyHex);\n};\n\nexport default {\n  binToHex,\n  getKid,\n  hexToBin,\n  privateJWKFromPrivateKeyHex,\n  privateJWKFromPrivateKeyPem,\n  privateKeyHexFromJWK,\n  privateKeyUInt8ArrayFromJWK,\n  publicJWKFromPublicKeyHex,\n  publicJWKFromPublicKeyPem,\n  publicKeyHexFromJWK,\n  publicKeyUInt8ArrayFromJWK,\n};\n","import base64url from 'base64url';\n\nimport { binToHex, hexToBin, instantiateSecp256k1 } from 'bitcoin-ts';\n\nimport crypto from 'crypto';\n\nimport {\n  ISecp256k1PrivateKeyJWK,\n  ISecp256k1PublicJWK,\n  privateKeyUInt8ArrayFromJWK,\n  publicKeyUInt8ArrayFromJWK,\n} from './keyUtils';\n\n/** error matching @panva/jose for JWS verification failure. */\nclass JWSVerificationFailed extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'JWSVerificationFailed';\n  }\n}\n\n/** JWS Header */\nexport interface IJWSHeader {\n  /** algorithm, ES256K */\n  alg: string;\n\n  /** type, JWT */\n  typ?: string;\n  /** signing key id, ... */\n  kid?: string;\n}\n\n/** Produce a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\nexport const signDetached = async (\n  // in the case of EcdsaSecp256k1Signature2019 this is the result of createVerifyData\n  payload: Buffer,\n  privateKeyJWK: ISecp256k1PrivateKeyJWK,\n  header = {\n    alg: 'ES256K',\n    b64: false,\n    crit: ['b64'],\n  }\n) => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJWK(privateKeyJWK);\n  const secp256k1 = await instantiateSecp256k1();\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n\n  const message = Buffer.from(toBeSignedBuffer);\n\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest()\n    .toString('hex');\n\n  const messageHashUInt8Array = hexToBin(digest);\n\n  const signatureUInt8Array = secp256k1.signMessageHashCompact(\n    privateKeyUInt8Array,\n    messageHashUInt8Array\n  );\n\n  const signatureHex = binToHex(signatureUInt8Array);\n  const encodedSignature = base64url.encode(Buffer.from(signatureHex, 'hex'));\n\n  return `${encodedHeader}..${encodedSignature}`;\n};\n\n/** Verify a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\nexport const verifyDetached = async (\n  jws: string,\n  payload: Buffer,\n  publicKeyJWK: ISecp256k1PublicJWK\n) => {\n  if (jws.indexOf('..') === -1) {\n    throw new JWSVerificationFailed('not a valid rfc7797 jws.');\n  }\n  const [encodedHeader, encodedSignature] = jws.split('..');\n  const header = JSON.parse(base64url.decode(encodedHeader));\n  if (header.alg !== 'ES256K') {\n    throw new Error('JWS alg is not signed with ES256K.');\n  }\n  if (\n    header.b64 !== false ||\n    !header.crit ||\n    !header.crit.length ||\n    header.crit[0] !== 'b64'\n  ) {\n    throw new Error('JWS Header is not in rfc7797 format (not detached).');\n  }\n  const publicKeyUInt8Array = await publicKeyUInt8ArrayFromJWK(publicKeyJWK);\n  const secp256k1 = await instantiateSecp256k1();\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n  const message = Buffer.from(toBeSignedBuffer);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest()\n    .toString('hex');\n  const messageHashUInt8Array = hexToBin(digest);\n  const signatureUInt8Array = hexToBin(\n    base64url.toBuffer(encodedSignature).toString('hex')\n  );\n  const verified = secp256k1.verifySignatureCompact(\n    signatureUInt8Array,\n    publicKeyUInt8Array,\n    messageHashUInt8Array\n  );\n  if (verified) {\n    return true;\n  }\n  throw new Error('Cannot verify detached signature.');\n};\n\n/** Produce a normal ES256K JWS */\nexport const sign = async (\n  payload: any,\n  privateKeyJWK: ISecp256k1PrivateKeyJWK,\n  header: IJWSHeader = { alg: 'ES256K' }\n) => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJWK(privateKeyJWK);\n  const secp256k1 = await instantiateSecp256k1();\n\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n  const encodedPayload = base64url.encode(JSON.stringify(payload));\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n  const message = Buffer.from(toBeSigned);\n\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest()\n    .toString('hex');\n  const messageHashUInt8Array = hexToBin(digest);\n  const signatureUInt8Array = secp256k1.signMessageHashCompact(\n    privateKeyUInt8Array,\n    messageHashUInt8Array\n  );\n  const signatureHex = binToHex(signatureUInt8Array);\n  const encodedSignature = base64url.encode(Buffer.from(signatureHex, 'hex'));\n  return `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n};\n\n/** Verify an ES256K JWS, returns the decoded object if successful, throws otherwise. */\nexport const verify = async (\n  jws: string,\n  publicKeyJWK: ISecp256k1PublicJWK\n) => {\n  const secp256k1 = await instantiateSecp256k1();\n  const publicKeyUInt8Array = await publicKeyUInt8ArrayFromJWK(publicKeyJWK);\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n\n  const message = Buffer.from(toBeSigned);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest()\n    .toString('hex');\n\n  const messageHashUInt8Array = hexToBin(digest);\n\n  const signatureUInt8Array = hexToBin(\n    base64url.toBuffer(encodedSignature).toString('hex')\n  );\n\n  const verified = secp256k1.verifySignatureCompact(\n    signatureUInt8Array,\n    publicKeyUInt8Array,\n    messageHashUInt8Array\n  );\n  if (verified) {\n    return JSON.parse(base64url.decode(encodedPayload));\n  }\n  throw new JWSVerificationFailed('signature verification failed');\n};\n\n/** decode a JWS (without verifying it) */\nexport const decode = (jws: string, options = { complete: false }) => {\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  if (options.complete) {\n    return {\n      header: JSON.parse(base64url.decode(encodedHeader)),\n      payload: JSON.parse(base64url.decode(encodedPayload)),\n      signature: encodedSignature,\n    };\n  }\n  return JSON.parse(base64url.decode(encodedPayload));\n};\n\nexport default {\n  decode,\n\n  sign,\n  signDetached,\n\n  verify,\n  verifyDetached,\n};\n","import JWS from './JWS';\n\nimport { ISecp256k1PrivateKeyJWK, ISecp256k1PublicJWK } from './keyUtils';\n\n/** default expiration in hours added automatically */\nconst defaultExpiresInHours = 1;\n\nclass JWTVerificationFailed extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'JWTVerificationFailed';\n  }\n}\n\n/** return a JWT singed with ES256K JWS */\nexport const sign = async (\n  payload: any,\n  privateKeyJWK: ISecp256k1PrivateKeyJWK\n) => {\n  const iat = Math.floor(Date.now() / 1000);\n\n  const exp = iat + 60 * 60 * defaultExpiresInHours;\n\n  return JWS.sign(\n    {\n      ...payload,\n      exp: payload.exp || exp,\n      iat,\n    },\n    privateKeyJWK,\n    {\n      alg: 'ES256K',\n      kid: privateKeyJWK.kid,\n    }\n  );\n};\n\n/** verify a JWT singed with ES256K JWS */\nexport const verify = async (\n  jwt: string,\n  publicKeyJWK: ISecp256k1PublicJWK\n) => {\n  const verified = await JWS.verify(jwt, publicKeyJWK);\n  if (Math.floor(Date.now() / 1000) > verified.exp) {\n    throw new JWTVerificationFailed('token is expired');\n  }\n  return verified;\n};\n\nexport default { sign, decode: JWS.decode, verify };\n"],"names":["__assign","instantiateSecp256k1","binToHex","hexToBin","__extends","sign","verify"],"mappings":"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"}
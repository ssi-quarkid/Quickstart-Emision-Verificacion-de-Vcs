/** Secp256k1 Private Key JWK  */
export interface ISecp256k1PrivateKeyJWK {
    /** key type */
    kty: string;
    /** curve */
    crv: string;
    /** private point */
    d: string;
    /** public point */
    x: string;
    /** public point */
    y: string;
    /** key id */
    kid: string;
}
/** Secp256k1 Public Key JWK  */
export interface ISecp256k1PublicJWK {
    /** key type */
    kty: string;
    /** curve */
    crv: string;
    /** public point */
    x: string;
    /** public point */
    y: string;
    /** key id */
    kid: string;
}
/**
 * Example
 * ```js
 * {
 *  kty: 'EC',
 *  crv: 'secp256k1',
 *  d: 'rhYFsBPF9q3-uZThy7B3c4LDF_8wnozFUAEm5LLC4Zw',
 *  x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',
 *  y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',
 *  kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw'
 * }
 * ```
 * See [rfc7638](https://tools.ietf.org/html/rfc7638) for more details on JWK.
 */
export declare const getKid: (jwk: ISecp256k1PrivateKeyJWK | ISecp256k1PublicJWK) => any;
/** convert compressed hex encoded private key to jwk */
export declare const privateJWKFromPrivateKeyHex: (privateKeyHex: string) => Promise<any>;
/** convert compressed hex encoded public key to jwk */
export declare const publicJWKFromPublicKeyHex: (publicKeyHex: string) => Promise<any>;
/** convert pem encoded private key to jwk */
export declare const privateJWKFromPrivateKeyPem: (privateKeyPem: string) => any;
/** convert pem encoded private key to jwk */
export declare const publicJWKFromPublicKeyPem: (publicKeyPem: string) => any;
/** convert jwk to hex encoded private key */
export declare const privateKeyHexFromJWK: (jwk: ISecp256k1PrivateKeyJWK) => Promise<any>;
/** convert jwk to hex encoded public key */
export declare const publicKeyHexFromJWK: (jwk: ISecp256k1PublicJWK) => Promise<string>;
/** convert jwk to binary encoded private key */
export declare const privateKeyUInt8ArrayFromJWK: (jwk: ISecp256k1PrivateKeyJWK) => Promise<Uint8Array>;
/** convert jwk to binary encoded public key */
export declare const publicKeyUInt8ArrayFromJWK: (jwk: ISecp256k1PublicJWK) => Promise<Uint8Array>;
declare const _default: {
    binToHex: (bytes: Uint8Array) => string;
    getKid: (jwk: ISecp256k1PrivateKeyJWK | ISecp256k1PublicJWK) => any;
    hexToBin: (validHex: string) => Uint8Array;
    privateJWKFromPrivateKeyHex: (privateKeyHex: string) => Promise<any>;
    privateJWKFromPrivateKeyPem: (privateKeyPem: string) => any;
    privateKeyHexFromJWK: (jwk: ISecp256k1PrivateKeyJWK) => Promise<any>;
    privateKeyUInt8ArrayFromJWK: (jwk: ISecp256k1PrivateKeyJWK) => Promise<Uint8Array>;
    publicJWKFromPublicKeyHex: (publicKeyHex: string) => Promise<any>;
    publicJWKFromPublicKeyPem: (publicKeyPem: string) => any;
    publicKeyHexFromJWK: (jwk: ISecp256k1PublicJWK) => Promise<string>;
    publicKeyUInt8ArrayFromJWK: (jwk: ISecp256k1PublicJWK) => Promise<Uint8Array>;
};
export default _default;
//# sourceMappingURL=keyUtils.d.ts.map
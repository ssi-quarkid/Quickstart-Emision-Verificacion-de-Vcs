{"version":3,"file":"did-key-secp256k1.cjs.development.js","sources":["../src/keyUtils.ts","../src/ES256K.ts","../src/ES256K-R.ts","../src/Secp256k1KeyPair.ts","../src/driver.ts"],"sourcesContent":["import keyto from '@trust/keyto';\nimport base64url from 'base64url';\nimport crypto from 'crypto';\nimport bs58 from 'bs58';\nimport secp256k1 from 'secp256k1';\n\nimport canonicalize from 'canonicalize';\n\nconst compressedHexEncodedPublicKeyLength = 66;\n\n/** Secp256k1 Private Key  */\nexport interface ISecp256k1PrivateKeyJwk {\n  /** key type */\n  kty: string;\n\n  /** curve */\n  crv: string;\n\n  /** private point */\n  d: string;\n\n  /** public point */\n  x: string;\n\n  /** public point */\n  y: string;\n\n  /** key id */\n  kid: string;\n}\n\n/** Secp256k1 Public Key  */\nexport interface ISecp256k1PublicKeyJwk {\n  /** key type */\n  kty: string;\n\n  /** curve */\n  crv: string;\n\n  /** public point */\n  x: string;\n\n  /** public point */\n  y: string;\n\n  /** key id */\n  kid: string;\n}\n\n/**\n * Example\n * ```js\n * {\n *  kty: 'EC',\n *  crv: 'secp256k1',\n *  d: 'rhYFsBPF9q3-uZThy7B3c4LDF_8wnozFUAEm5LLC4Zw',\n *  x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',\n *  y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',\n *  kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw'\n * }\n * ```\n * See [rfc7638](https://tools.ietf.org/html/rfc7638) for more details on Jwk.\n */\nexport const getKid = (\n  jwk: ISecp256k1PrivateKeyJwk | ISecp256k1PublicKeyJwk\n) => {\n  const copy = { ...jwk } as any;\n  delete copy.d;\n  delete copy.kid;\n  delete copy.alg;\n  const digest = crypto\n    .createHash('sha256')\n    .update(canonicalize(copy))\n    .digest();\n\n  return base64url.encode(Buffer.from(digest));\n};\n\n/** convert compressed hex encoded private key to jwk */\nexport const privateKeyJwkFromPrivateKeyHex = (privateKeyHex: string) => {\n  const jwk = {\n    ...keyto.from(privateKeyHex, 'blk').toJwk('private'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert compressed hex encoded public key to jwk */\nexport const publicKeyJwkFromPublicKeyHex = (publicKeyHex: string) => {\n  let key = publicKeyHex;\n  if (publicKeyHex.length === compressedHexEncodedPublicKeyLength) {\n    const keyBin = secp256k1.publicKeyConvert(\n      Buffer.from(publicKeyHex, 'hex'),\n      false\n    );\n    key = Buffer.from(keyBin).toString('hex');\n  }\n  const jwk = {\n    ...keyto.from(key, 'blk').toJwk('public'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert pem encoded private key to jwk */\nexport const privateKeyJwkFromPrivateKeyPem = (privateKeyPem: string) => {\n  const jwk = {\n    ...keyto.from(privateKeyPem, 'pem').toJwk('private'),\n    crv: 'secp256k1',\n  };\n  // console.log(jwk);\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert pem encoded public key to jwk */\nexport const publicKeyJwkFromPublicKeyPem = (publicKeyPem: string) => {\n  const jwk = {\n    ...keyto.from(publicKeyPem, 'pem').toJwk('public'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert jwk to hex encoded private key */\nexport const privateKeyHexFromJwk = (jwk: ISecp256k1PrivateKeyJwk) =>\n  keyto\n    .from(\n      {\n        ...jwk,\n        crv: 'K-256',\n      },\n      'jwk'\n    )\n    .toString('blk', 'private');\n\n/** convert jwk to hex encoded public key */\nexport const publicKeyHexFromJwk = (jwk: ISecp256k1PublicKeyJwk) => {\n  const uncompressedPublicKey = keyto\n    .from(\n      {\n        ...jwk,\n        crv: 'K-256',\n      },\n      'jwk'\n    )\n    .toString('blk', 'public');\n\n  const compressed = secp256k1.publicKeyConvert(\n    Buffer.from(uncompressedPublicKey, 'hex'),\n    true\n  );\n  return Buffer.from(compressed).toString('hex');\n};\n\n/** convert jwk to binary encoded private key */\nexport const privateKeyUInt8ArrayFromJwk = (jwk: ISecp256k1PrivateKeyJwk) => {\n  const privateKeyHex = privateKeyHexFromJwk(jwk);\n  let asBuffer = Buffer.from(privateKeyHex, 'hex');\n  let padding = 32 - asBuffer.length;\n  while (padding > 0) {\n    asBuffer = Buffer.concat([Buffer.from('00', 'hex'), asBuffer]);\n    padding--;\n  }\n  return asBuffer;\n};\n\n/** convert jwk to binary encoded public key */\nexport const publicKeyUInt8ArrayFromJwk = (jwk: ISecp256k1PublicKeyJwk) => {\n  const publicKeyHex = publicKeyHexFromJwk(jwk);\n  let asBuffer = Buffer.from(publicKeyHex, 'hex');\n  let padding = 32 - asBuffer.length;\n  while (padding > 0) {\n    asBuffer = Buffer.concat([Buffer.from('00', 'hex'), asBuffer]);\n    padding--;\n  }\n  return asBuffer;\n};\n\n/** convert publicKeyHex to base58 */\nexport const publicKeyBase58FromPublicKeyHex = (publicKeyHex: string) => {\n  return bs58.encode(Buffer.from(publicKeyHex, 'hex'));\n};\n\n/** convert publicKeyHex to base58 */\nexport const privateKeyBase58FromPrivateKeyHex = (privateKeyHex: string) => {\n  return bs58.encode(Buffer.from(privateKeyHex, 'hex'));\n};\n\nexport const privateKeyUInt8ArrayFromPrivateKeyBase58 = (\n  privateKeyBase58: string\n) => {\n  return bs58.decode(privateKeyBase58);\n};\n\nexport const publicKeyUInt8ArrayFromPublicKeyBase58 = (\n  publicKeyBase58: string\n) => {\n  return bs58.decode(publicKeyBase58);\n};\n\nexport const publicKeyHexFromPrivateKeyHex = (privateKeyHex: string) => {\n  const publicKey = secp256k1.publicKeyCreate(\n    new Uint8Array(Buffer.from(privateKeyHex, 'hex'))\n  );\n  return Buffer.from(publicKey).toString('hex');\n};\n\nexport const publicKeyJwkFromPublicKeyBase58 = (publicKeybase58: string) => {\n  return publicKeyJwkFromPublicKeyHex(\n    bs58.decode(publicKeybase58).toString('hex')\n  );\n};\n\nexport const privateKeyJwkFromPrivateKeyBase58 = (privateKeyBase58: string) => {\n  return privateKeyJwkFromPrivateKeyHex(\n    bs58.decode(privateKeyBase58).toString('hex')\n  );\n};\n","import base64url from 'base64url';\n\nimport crypto from 'crypto';\nimport secp256k1 from 'secp256k1';\n\nimport {\n  ISecp256k1PrivateKeyJwk,\n  ISecp256k1PublicKeyJwk,\n  privateKeyUInt8ArrayFromJwk,\n  publicKeyUInt8ArrayFromJwk,\n} from './keyUtils';\n\n/** error matching @panva/jose for JWS verification failure. */\nclass JWSVerificationFailed extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'JWSVerificationFailed';\n  }\n}\n\n/** JWS Header */\nexport interface IJWSHeader {\n  /** algorithm, ES256K */\n  alg: string;\n\n  /** type, JWT */\n  typ?: string;\n  /** signing key id, ... */\n  kid?: string;\n}\n\n/** Produce a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\nexport const signDetached = async (\n  // in the case of EcdsaSecp256k1Signature2019 this is the result of createVerifyData\n  payload: Buffer,\n  privateKeyJwk: ISecp256k1PrivateKeyJwk,\n  header = {\n    alg: 'ES256K',\n    b64: false,\n    crit: ['b64'],\n  }\n): Promise<string> => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJwk(privateKeyJwk);\n\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n\n  const message = Buffer.from(toBeSignedBuffer);\n\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n  const sigObj: any = secp256k1.ecdsaSign(\n    messageHashUInt8Array,\n    privateKeyUInt8Array\n  );\n\n  const encodedSignature = base64url.encode(Buffer.from(sigObj.signature));\n\n  return `${encodedHeader}..${encodedSignature}`;\n};\n\n/** Verify a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\nexport const verifyDetached = async (\n  jws: string,\n  payload: Buffer,\n  publicKeyJwk: ISecp256k1PublicKeyJwk\n): Promise<boolean> => {\n  if (jws.indexOf('..') === -1) {\n    throw new JWSVerificationFailed('not a valid rfc7797 jws.');\n  }\n  const [encodedHeader, encodedSignature] = jws.split('..');\n  const header = JSON.parse(base64url.decode(encodedHeader));\n  if (header.alg !== 'ES256K') {\n    throw new Error('JWS alg is not signed with ES256K.');\n  }\n  if (\n    header.b64 !== false ||\n    !header.crit ||\n    !header.crit.length ||\n    header.crit[0] !== 'b64'\n  ) {\n    throw new Error('JWS Header is not in rfc7797 format (not detached).');\n  }\n  const publicKeyUInt8Array = await publicKeyUInt8ArrayFromJwk(publicKeyJwk);\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n  const message = Buffer.from(toBeSignedBuffer);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n  const signatureUInt8Array = base64url.toBuffer(encodedSignature);\n  let signatureLowerS = secp256k1.signatureNormalize(signatureUInt8Array);\n  const verified = secp256k1.ecdsaVerify(\n    signatureLowerS,\n    messageHashUInt8Array,\n    publicKeyUInt8Array\n  );\n\n  return verified;\n};\n\n/** Produce a normal ES256K JWS */\nexport const sign = async (\n  payload: any,\n  privateKeyJwk: ISecp256k1PrivateKeyJwk,\n  header: IJWSHeader = { alg: 'ES256K' }\n): Promise<string> => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJwk(privateKeyJwk);\n\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n  const encodedPayload = base64url.encode(JSON.stringify(payload));\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n  const message = Buffer.from(toBeSigned);\n\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n\n  const sigObj: any = secp256k1.ecdsaSign(\n    messageHashUInt8Array,\n    privateKeyUInt8Array\n  );\n\n  const encodedSignature = base64url.encode(sigObj.signature);\n  return `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n};\n\n/** Verify an ES256K JWS, returns the decoded object if successful, throws otherwise. */\nexport const verify = async (\n  jws: string,\n  publicKeyJwk: ISecp256k1PublicKeyJwk\n): Promise<boolean> => {\n  const publicKeyUInt8Array = await publicKeyUInt8ArrayFromJwk(publicKeyJwk);\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n\n  const message = Buffer.from(toBeSigned);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n\n  const signatureUInt8Array = base64url.toBuffer(encodedSignature);\n  let signatureLowerS = secp256k1.signatureNormalize(signatureUInt8Array);\n\n  const verified = secp256k1.ecdsaVerify(\n    signatureLowerS,\n    messageHashUInt8Array,\n    publicKeyUInt8Array\n  );\n\n  return verified;\n};\n\n/** decode a JWS (without verifying it) */\nexport const decode = (jws: string, options = { complete: false }): any => {\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  if (options.complete) {\n    return {\n      header: JSON.parse(base64url.decode(encodedHeader)),\n      payload: JSON.parse(base64url.decode(encodedPayload)),\n      signature: encodedSignature,\n    };\n  }\n  return JSON.parse(base64url.decode(encodedPayload));\n};\n","import {\n  privateKeyUInt8ArrayFromJwk,\n  publicKeyUInt8ArrayFromJwk,\n} from './keyUtils';\nimport base64url from 'base64url';\nimport secp256k1 from 'secp256k1';\nimport crypto from 'crypto';\n\nexport const sign = async (\n  payload: any,\n  privateKeyJwk: any,\n  header: any = { alg: 'ES256K-R' }\n): Promise<string> => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJwk(privateKeyJwk);\n\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n  const encodedPayload = base64url.encode(JSON.stringify(payload));\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n  const message = Buffer.from(toBeSigned);\n\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n\n  const sigObj: any = secp256k1.ecdsaSign(\n    messageHashUInt8Array,\n    privateKeyUInt8Array\n  );\n\n  const encodedSignature = base64url.encode(sigObj.signature);\n  return `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n};\n\nexport const verify = async (\n  jws: string,\n  publicKeyJwk: any\n): Promise<boolean> => {\n  const publicKeyUInt8Array = await publicKeyUInt8ArrayFromJwk(publicKeyJwk);\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  const header = JSON.parse(base64url.decode(encodedHeader));\n  if (header.alg !== 'ES256K-R') {\n    throw new Error('Expecteed header.alg to be  ES256K-R');\n  }\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n  const message = Buffer.from(toBeSigned);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n  const signatureUInt8Array = base64url.toBuffer(encodedSignature);\n  let signatureLowerS = secp256k1.signatureNormalize(signatureUInt8Array);\n\n  const verified = secp256k1.ecdsaVerify(\n    signatureLowerS,\n    messageHashUInt8Array,\n    publicKeyUInt8Array\n  );\n\n  return verified;\n};\n\nexport const signDetached = async (\n  payload: Buffer,\n  privateKeyJwk: any,\n  header = {\n    alg: 'ES256K-R',\n    b64: false,\n    crit: ['b64'],\n  }\n): Promise<string> => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJwk(privateKeyJwk);\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n\n  const message = Buffer.from(toBeSignedBuffer);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n  const { signature, recid }: any = secp256k1.ecdsaSign(\n    messageHashUInt8Array,\n    privateKeyUInt8Array\n  );\n\n  const signatureUInt8Array = Buffer.concat([\n    Buffer.from(signature),\n    Buffer.from(new Uint8Array([recid])),\n  ]);\n\n  const encodedSignature = base64url.encode(signatureUInt8Array);\n  return `${encodedHeader}..${encodedSignature}`;\n};\n\nexport const recoverPublicKey = async (\n  jws: string,\n  payload: any\n): Promise<Uint8Array> => {\n  if (jws.indexOf('..') === -1) {\n    throw new Error('not a valid rfc7797 jws.');\n  }\n  const [encodedHeader, encodedSignature] = jws.split('..');\n  const header = JSON.parse(base64url.decode(encodedHeader));\n  if (header.alg !== 'ES256K-R') {\n    throw new Error('JWS alg is not signed with ES256K-R.');\n  }\n  if (\n    header.b64 !== false ||\n    !header.crit ||\n    !header.crit.length ||\n    header.crit[0] !== 'b64'\n  ) {\n    throw new Error('JWS Header is not in rfc7797 format (not detached).');\n  }\n\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n  const message = Buffer.from(toBeSignedBuffer);\n\n  const digest = new Uint8Array(\n    crypto\n      .createHash('sha256')\n      .update(message)\n      .digest()\n  );\n\n  let signatureUInt8Array = new Uint8Array(\n    base64url.toBuffer(encodedSignature)\n  );\n\n  const recoveryId = signatureUInt8Array[64];\n  signatureUInt8Array = signatureUInt8Array.slice(0, 64);\n\n  return secp256k1.ecdsaRecover(signatureUInt8Array, recoveryId, digest);\n};\n","import crypto from 'crypto';\n\nimport * as keyUtils from './keyUtils';\nimport bs58 from 'bs58';\nimport secp256k1 from 'secp256k1';\n\nimport * as common from '@transmute/did-key-common';\n\nconst _generate = (secureRandom: any) => {\n  let privateKey;\n  do {\n    privateKey = secureRandom();\n  } while (!secp256k1.privateKeyVerify(privateKey));\n\n  const publicKey = secp256k1.publicKeyCreate(privateKey);\n  return { publicKey, privateKey };\n};\n\n@common.types.staticImplements<common.types.KeyPairClass>()\nexport class Secp256k1KeyPair {\n  public id: string;\n  public type: string;\n  public controller: string;\n\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static fingerprintFromPublicKey(\n    keypair: common.types.KeyPairJwk | common.types.KeyPairBase58\n  ) {\n    let pubkeyBytes: any;\n\n    if ((keypair as any).publicKeyBase58) {\n      pubkeyBytes = bs58.decode(\n        (keypair as common.types.KeyPairBase58).publicKeyBase58\n      );\n    }\n\n    if ((keypair as any).publicKeyJwk) {\n      pubkeyBytes = new Uint8Array(\n        Buffer.from(\n          keyUtils.publicKeyHexFromJwk(\n            (keypair as common.types.KeyPairJwk).publicKeyJwk\n          )\n        )\n      );\n    }\n\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    // See https://github.com/multiformats/multicodec/blob/master/table.csv\n    // 0xe7 is Secp256k1 public key\n    buffer[0] = 0xe7; //\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${bs58.encode(buffer)}`;\n  }\n\n  static async generate(options: any = {}) {\n    let privateKey;\n    let publicKey;\n    if (options.secureRandom) {\n      ({ privateKey, publicKey } = _generate(options.secureRandom));\n    }\n\n    if (!privateKey) {\n      throw new Error('Cannot generate private key.');\n    }\n\n    const publicKeyBase58 = keyUtils.publicKeyBase58FromPublicKeyHex(\n      Buffer.from(publicKey).toString('hex')\n    );\n    const privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyHex(\n      Buffer.from(privateKey).toString('hex')\n    );\n\n    const did = `did:key:${Secp256k1KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    const keyId = `#${Secp256k1KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n\n    return new Secp256k1KeyPair({\n      id: keyId,\n      controller: did,\n      publicKeyBase58,\n      privateKeyBase58,\n    });\n  }\n\n  static async from(options: any) {\n    let privateKeyBase58 = options.privateKeyBase58;\n    let publicKeyBase58 = options.publicKeyBase58;\n\n    if (options.privateKeyHex) {\n      privateKeyBase58 = await keyUtils.privateKeyBase58FromPrivateKeyHex(\n        options.privateKeyHex\n      );\n    }\n\n    if (options.publicKeyHex) {\n      publicKeyBase58 = await keyUtils.publicKeyBase58FromPublicKeyHex(\n        options.publicKeyHex\n      );\n    }\n\n    if (options.privateKeyJwk) {\n      privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyHex(\n        await keyUtils.privateKeyHexFromJwk(options.privateKeyJwk)\n      );\n    }\n\n    if (options.publicKeyJwk) {\n      publicKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyHex(\n        await keyUtils.publicKeyHexFromJwk(options.publicKeyJwk)\n      );\n    }\n\n    return new Secp256k1KeyPair({\n      ...options,\n      privateKeyBase58,\n      publicKeyBase58,\n    });\n  }\n\n  static fromFingerprint({ fingerprint }: any) {\n    // skip leading `z` that indicates base58 encoding\n    const buffer = bs58.decode(fingerprint.substr(1));\n\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L77\n    if (buffer[0] === 0xe7 && buffer[1] === 0x01) {\n      const publicKeyBase58 = bs58.encode(buffer.slice(2));\n      const did = `did:key:${Secp256k1KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      const keyId = `#${Secp256k1KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      return new Secp256k1KeyPair({\n        id: keyId,\n        controller: did,\n        publicKeyBase58,\n      });\n    }\n\n    throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n  }\n\n  constructor(options: any = {}) {\n    this.type = 'EcdsaSecp256k1VerificationKey2019';\n    this.id = options.id;\n    this.controller = options.controller;\n\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    } else if (options.publicKeyJwk) {\n      this.publicKeyBuffer = Buffer.from(\n        keyUtils.publicKeyHexFromJwk(options.publicKeyJwk),\n        'hex'\n      );\n    } else {\n      throw new Error(\n        'Secp256k1KeyPair requires publicKeyBase58 or publicKeyJwk, recieved neither.'\n      );\n    }\n\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    }\n\n    if (options.privateKeyJwk) {\n      this.privateKeyBuffer = Buffer.from(\n        keyUtils.privateKeyHexFromJwk(options.privateKeyJwk),\n        'hex'\n      );\n    }\n\n    if (this.controller && !this.id) {\n      this.id = `${this.controller}#${this.fingerprint()}`;\n    }\n  }\n\n  publicNode() {\n    return this.toKeyPair(false);\n  }\n\n  signer() {\n    if (!this.privateKeyBuffer) {\n      throw new Error('No private key to sign with.');\n    }\n    let { privateKeyBuffer } = this;\n    return {\n      async sign({ data }: any) {\n        const messageHashUInt8Array = crypto\n          .createHash('sha256')\n          .update(data)\n          .digest();\n\n        const sigObj: any = secp256k1.ecdsaSign(\n          messageHashUInt8Array,\n          new Uint8Array(privateKeyBuffer)\n        );\n\n        return sigObj.signature;\n      },\n    };\n  }\n\n  verifier() {\n    if (!this.publicKeyBuffer) {\n      throw new Error('No public key to verify with.');\n    }\n    let { publicKeyBuffer } = this;\n    return {\n      async verify({ data, signature }: any) {\n        const messageHashUInt8Array = crypto\n          .createHash('sha256')\n          .update(data)\n          .digest();\n\n        let verified = false;\n        try {\n          verified = secp256k1.ecdsaVerify(\n            signature,\n            messageHashUInt8Array,\n            new Uint8Array(publicKeyBuffer)\n          );\n        } catch (e) {\n          console.error('An error occurred when verifying signature: ', e);\n        }\n        return verified;\n      },\n    };\n  }\n\n  fingerprint() {\n    return Secp256k1KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    } as any);\n  }\n\n  verifyFingerprint(fingerprint: string) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if (!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false,\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = bs58.decode(fingerprint.slice(1));\n    } catch (e) {\n      return { error: e, valid: false };\n    }\n    let { publicKeyBuffer } = this;\n\n    // validate the first two multicodec bytes 0xe701\n    const valid =\n      fingerprintBuffer.slice(0, 2).toString('hex') === 'e701' &&\n      publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n    if (!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false,\n      };\n    }\n    return { valid };\n  }\n\n  toJwk(_private: boolean = false) {\n    if (_private) {\n      if (!this.privateKeyBuffer) {\n        throw new Error('No private key to export');\n      }\n      return keyUtils.privateKeyJwkFromPrivateKeyHex(\n        this.privateKeyBuffer.toString('hex')\n      );\n    }\n    return keyUtils.publicKeyJwkFromPublicKeyHex(\n      this.publicKeyBuffer.toString('hex')\n    );\n  }\n\n  async toHex(_private: boolean = false) {\n    if (_private) {\n      if (!this.privateKeyBuffer) {\n        throw new Error('No private key to export');\n      }\n      return keyUtils.privateKeyHexFromJwk(\n        await keyUtils.privateKeyJwkFromPrivateKeyHex(\n          this.privateKeyBuffer.toString('hex')\n        )\n      );\n    }\n    return keyUtils.publicKeyHexFromJwk(\n      await keyUtils.publicKeyJwkFromPublicKeyHex(\n        this.publicKeyBuffer.toString('hex')\n      )\n    );\n  }\n\n  toKeyPair(exportPrivate = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n    if (exportPrivate) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivate: boolean = false): any {\n    let kp: any = {\n      id: this.id,\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: this.toJwk(),\n    };\n    delete kp.publicKeyJwk.kid;\n    if (exportPrivate) {\n      kp.privateKeyJwk = this.toJwk(true);\n      delete kp.privateKeyJwk.kid;\n    }\n\n    return kp;\n  }\n}\n","import { Secp256k1KeyPair } from './Secp256k1KeyPair';\nimport { getResolve, getGet } from '@transmute/did-key-common';\n\nexport const resolve = getResolve(Secp256k1KeyPair);\nexport const get = getGet(resolve);\n"],"names":["compressedHexEncodedPublicKeyLength","getKid","jwk","copy","d","kid","alg","digest","crypto","createHash","update","canonicalize","base64url","encode","Buffer","from","privateKeyJwkFromPrivateKeyHex","privateKeyHex","keyto","toJwk","crv","publicKeyJwkFromPublicKeyHex","publicKeyHex","key","length","keyBin","secp256k1","publicKeyConvert","toString","privateKeyJwkFromPrivateKeyPem","privateKeyPem","publicKeyJwkFromPublicKeyPem","publicKeyPem","privateKeyHexFromJwk","publicKeyHexFromJwk","uncompressedPublicKey","compressed","privateKeyUInt8ArrayFromJwk","asBuffer","padding","concat","publicKeyUInt8ArrayFromJwk","publicKeyBase58FromPublicKeyHex","bs58","privateKeyBase58FromPrivateKeyHex","privateKeyUInt8ArrayFromPrivateKeyBase58","privateKeyBase58","decode","publicKeyUInt8ArrayFromPublicKeyBase58","publicKeyBase58","publicKeyHexFromPrivateKeyHex","publicKey","publicKeyCreate","Uint8Array","publicKeyJwkFromPublicKeyBase58","publicKeybase58","privateKeyJwkFromPrivateKeyBase58","JWSVerificationFailed","message","name","Error","signDetached","payload","privateKeyJwk","header","b64","crit","privateKeyUInt8Array","encodedHeader","JSON","stringify","toBeSignedBuffer","buffer","byteOffset","messageHashUInt8Array","sigObj","ecdsaSign","encodedSignature","signature","verifyDetached","jws","publicKeyJwk","indexOf","split","parse","publicKeyUInt8Array","signatureUInt8Array","toBuffer","signatureLowerS","signatureNormalize","verified","ecdsaVerify","sign","encodedPayload","toBeSigned","verify","options","complete","recid","recoverPublicKey","recoveryId","slice","ecdsaRecover","_generate","secureRandom","privateKey","privateKeyVerify","Secp256k1KeyPair","type","id","controller","publicKeyBuffer","keyUtils","privateKeyBuffer","fingerprint","fingerprintFromPublicKey","keypair","pubkeyBytes","set","generate","did","Secp256k1KeyPair_1","keyId","fromFingerprint","substr","publicNode","toKeyPair","signer","data","verifier","e","console","error","verifyFingerprint","valid","fingerprintBuffer","equals","_private","toHex","exportPrivate","kp","toJsonWebKeyPair","common","staticImplements","resolve","getResolve","get","getGet"],"mappings":"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"}
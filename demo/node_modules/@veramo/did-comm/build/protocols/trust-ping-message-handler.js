"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrustPingMessageHandler = exports.createTrustPingResponse = exports.createTrustPingMessage = void 0;
const message_handler_1 = require("@veramo/message-handler");
const debug_1 = __importDefault(require("debug"));
const uuid_1 = require("uuid");
const debug = (0, debug_1.default)('veramo:did-comm:trust-ping-message-handler');
const TRUST_PING_MESSAGE_TYPE = 'https://didcomm.org/trust-ping/2.0/ping';
const TRUST_PING_RESPONSE_MESSAGE_TYPE = 'https://didcomm.org/trust-ping/2.0/ping-response';
function createTrustPingMessage(senderDidUrl, recipientDidUrl) {
    return {
        type: TRUST_PING_MESSAGE_TYPE,
        from: senderDidUrl,
        to: recipientDidUrl,
        id: (0, uuid_1.v4)(),
        body: {
            responseRequested: true
        }
    };
}
exports.createTrustPingMessage = createTrustPingMessage;
function createTrustPingResponse(senderDidUrl, recipientDidUrl, pingId) {
    return {
        type: TRUST_PING_RESPONSE_MESSAGE_TYPE,
        from: senderDidUrl,
        to: recipientDidUrl,
        id: `${pingId}-response`,
        thid: pingId,
        body: {}
    };
}
exports.createTrustPingResponse = createTrustPingResponse;
/**
 * A plugin for the {@link @veramo/message-handler#MessageHandler} that handles Trust Ping messages.
 * @beta This API may change without a BREAKING CHANGE notice.
 */
class TrustPingMessageHandler extends message_handler_1.AbstractMessageHandler {
    constructor() {
        super();
    }
    /**
     * Handles a Trust Ping Message
     * https://identity.foundation/didcomm-messaging/spec/#trust-ping-protocol-10
     */
    handle(message, context) {
        const _super = Object.create(null, {
            handle: { get: () => super.handle }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (message.type === TRUST_PING_MESSAGE_TYPE) {
                debug('TrustPing Message Received');
                try {
                    const { from, to, id } = message;
                    if (!from) {
                        throw new Error("invalid_argument: Trust Ping Message received without `from` set");
                    }
                    if (!to) {
                        throw new Error("invalid_argument: Trust Ping Message received without `to` set");
                    }
                    const response = createTrustPingResponse(to, from, id);
                    const packedResponse = yield context.agent.packDIDCommMessage({ message: response, packing: 'authcrypt' });
                    const sent = yield context.agent.sendDIDCommMessage({
                        messageId: response.id,
                        packedMessage: packedResponse,
                        recipientDidUrl: from,
                    });
                    message.addMetaData({ type: 'TrustPingResponseSent', value: sent });
                }
                catch (ex) {
                    debug(ex);
                }
                return message;
            }
            else if (message.type === TRUST_PING_RESPONSE_MESSAGE_TYPE) {
                debug('TrustPingResponse Message Received');
                message.addMetaData({ type: 'TrustPingResponseReceived', value: 'true' });
                return message;
            }
            return _super.handle.call(this, message, context);
        });
    }
}
exports.TrustPingMessageHandler = TrustPingMessageHandler;
//# sourceMappingURL=trust-ping-message-handler.js.map
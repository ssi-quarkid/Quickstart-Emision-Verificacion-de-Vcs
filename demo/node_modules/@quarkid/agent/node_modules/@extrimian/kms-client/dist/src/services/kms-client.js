"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KMSClient = void 0;
var did_core_1 = require("@extrimian/did-core");
var kms_core_1 = require("@extrimian/kms-core");
require("@extrimian/kms-suite-didcomm");
require("@extrimian/kms-suite-didcomm-v2");
require("@extrimian/kms-suite-es256k");
require("@extrimian/kms-suite-rsa-signature-2018");
var kms_suite_didcomm_1 = require("@extrimian/kms-suite-didcomm");
var kms_suite_didcomm_v2_1 = require("@extrimian/kms-suite-didcomm-v2");
var kms_suite_bbsbls2020_1 = require("@extrimian/kms-suite-bbsbls2020");
var kms_suite_rsa_signature_2018_1 = require("@extrimian/kms-suite-rsa-signature-2018");
var kms_suite_es256k_1 = require("@extrimian/kms-suite-es256k");
var KMSClient = /** @class */ (function () {
    function KMSClient(config) {
        this.config = config;
        this.suites = new Map();
        this.suites.set(kms_core_1.Suite.DIDComm, kms_suite_didcomm_1.DIDCommSuite);
        this.suites.set(kms_core_1.Suite.DIDCommV2, kms_suite_didcomm_v2_1.DIDCommSuite);
        this.suites.set(kms_core_1.Suite.ES256k, kms_suite_es256k_1.ES256kSuite);
        this.suites.set(kms_core_1.Suite.RsaSignature2018, kms_suite_rsa_signature_2018_1.RSASignature2018Suite);
        if (!config.mobile) {
            Promise.resolve().then(function () { return require("@extrimian/kms-suite-bbsbls2020"); });
            this.suites.set(kms_core_1.Suite.Bbsbls2020, kms_suite_bbsbls2020_1.BbsBls2020Suite);
        }
        if (!config.didResolver)
            console.info("KMS didResolver not configured. You need set a didResolver to signVC");
    }
    KMSClient.prototype.create = function (suite) {
        return __awaiter(this, void 0, void 0, function () {
            var suiteType, suiteInstance, secrets, jwk, ethrSuite, pkHex;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        suiteType = this.suites.get(suite);
                        if (!suiteType) {
                            throw new Error("Unsupported Suite");
                        }
                        suiteInstance = new suiteType();
                        if (!(suite == kms_core_1.Suite.ES256k)) return [3 /*break*/, 2];
                        ethrSuite = suiteInstance;
                        return [4 /*yield*/, ethrSuite.create({ lang: this.config.lang })];
                    case 1:
                        secrets = _a.sent();
                        jwk = kms_core_1.BaseConverter.convert(secrets.publicKey, kms_core_1.Base.Hex, kms_core_1.Base.JWK, secrets.keyType || secrets.curve);
                        return [3 /*break*/, 11];
                    case 2:
                        if (!(suite == kms_core_1.Suite.Bbsbls2020)) return [3 /*break*/, 4];
                        return [4 /*yield*/, suiteInstance.create()];
                    case 3:
                        secrets = _a.sent();
                        jwk = kms_core_1.BaseConverter.convert(secrets.publicKey, kms_core_1.Base.Base58, kms_core_1.Base.JWK, secrets.keyType);
                        return [3 /*break*/, 11];
                    case 4:
                        if (!(suite == kms_core_1.Suite.RsaSignature2018)) return [3 /*break*/, 6];
                        return [4 /*yield*/, suiteInstance.create()];
                    case 5:
                        secrets = _a.sent();
                        jwk = secrets.publicKeyJWK;
                        return [3 /*break*/, 11];
                    case 6:
                        if (!(suite == kms_core_1.Suite.DIDComm)) return [3 /*break*/, 8];
                        return [4 /*yield*/, suiteInstance.create()];
                    case 7:
                        secrets = _a.sent();
                        jwk = kms_core_1.BaseConverter.convert(secrets.publicKey, kms_core_1.Base.Hex, kms_core_1.Base.JWK, secrets.keyType);
                        return [3 /*break*/, 11];
                    case 8:
                        if (!(suite == kms_core_1.Suite.DIDCommV2)) return [3 /*break*/, 10];
                        return [4 /*yield*/, suiteInstance.create()];
                    case 9:
                        secrets = _a.sent();
                        jwk = kms_core_1.BaseConverter.convert(secrets.publicKey, kms_core_1.Base.Hex, kms_core_1.Base.JWK, secrets.keyType);
                        return [3 /*break*/, 11];
                    case 10: throw new Error("Unsupported Suite");
                    case 11:
                        pkHex = kms_core_1.BaseConverter.convert(jwk, kms_core_1.Base.JWK, kms_core_1.Base.Hex);
                        return [4 /*yield*/, this.config.storage.add(pkHex, __assign({ suite: suite }, secrets))];
                    case 12:
                        _a.sent();
                        return [2 /*return*/, { publicKeyJWK: jwk }];
                }
            });
        });
    };
    KMSClient.prototype.sign = function (suite, publicKeyJWK, content) {
        return __awaiter(this, void 0, void 0, function () {
            var publicKeyHex, suiteType, privateKey, suiteInstance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        publicKeyHex = kms_core_1.BaseConverter.convert(publicKeyJWK, kms_core_1.Base.JWK, kms_core_1.Base.Hex);
                        suiteType = this.suites.get(suite);
                        if (!suiteType) {
                            throw new Error("Unsupported Suite");
                        }
                        return [4 /*yield*/, this.config.storage.get(publicKeyHex)];
                    case 1:
                        privateKey = (_a.sent());
                        suiteInstance = new suiteType();
                        return [4 /*yield*/, suiteInstance.load(privateKey)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, suiteInstance.sign(content)];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    KMSClient.prototype.verifySignature = function (publicKeyJWK, originalContent, signature) {
        return __awaiter(this, void 0, void 0, function () {
            var suiteType, suiteInstance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        suiteType = this.suites.get(kms_core_1.Suite.ES256k);
                        suiteInstance = new suiteType();
                        return [4 /*yield*/, suiteInstance.verifySignature(originalContent, signature, publicKeyJWK)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    KMSClient.prototype.signVC = function (suite, publicKeyJWK, vc, did, verificationMethodId, purpose) {
        return __awaiter(this, void 0, void 0, function () {
            var suiteType, suiteInstance, publicKeyHex, key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        suiteType = this.suites.get(suite);
                        if (!suiteType) {
                            throw new Error("Unsupported Suite");
                        }
                        suiteInstance = new suiteType();
                        publicKeyHex = kms_core_1.BaseConverter.convert(publicKeyJWK, kms_core_1.Base.JWK, kms_core_1.Base.Hex);
                        return [4 /*yield*/, this.config.storage.get(publicKeyHex)];
                    case 1:
                        key = (_a.sent());
                        suiteInstance.loadSuite({
                            secrets: key,
                            useCache: true,
                        });
                        return [4 /*yield*/, suiteInstance.sign(vc, did, verificationMethodId, purpose)];
                    case 2: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    KMSClient.prototype.deriveVC = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var suiteType, suiteInstance, derivedVc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        suiteType = this.suites.get(kms_core_1.Suite.Bbsbls2020);
                        if (!suiteType) {
                            throw new Error("Unsupported Suite");
                        }
                        suiteInstance = new suiteType();
                        return [4 /*yield*/, suiteInstance.deriveVC(params.vc, params.frame, this.config.didResolver)];
                    case 1:
                        derivedVc = _a.sent();
                        return [2 /*return*/, derivedVc];
                }
            });
        });
    };
    KMSClient.prototype.signVCPresentation = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var suiteType, suiteInstance, publicKeyHex, key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        suiteType = this.suites.get(kms_core_1.Suite.RsaSignature2018);
                        if (!suiteType) {
                            throw new Error("Unsupported Suite");
                        }
                        suiteInstance = new suiteType();
                        publicKeyHex = kms_core_1.BaseConverter.convert(params.publicKeyJWK, kms_core_1.Base.JWK, kms_core_1.Base.Hex);
                        return [4 /*yield*/, this.config.storage.get(publicKeyHex)];
                    case 1:
                        key = (_a.sent());
                        suiteInstance.loadSuite({
                            secrets: key,
                            useCache: true,
                        });
                        return [4 /*yield*/, suiteInstance.sign(params.presentationObject, params.did, params.verificationMethodId, params.purpose)];
                    case 2: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    KMSClient.prototype.pack = function (publicKeyJWK, toHexPublicKeys, contentToSign) {
        return __awaiter(this, void 0, void 0, function () {
            var suiteType, publicKeyHex, privateKey, suiteInstance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        suiteType = this.suites.get(kms_core_1.Suite.DIDComm);
                        if (!suiteType) {
                            throw new Error("Unsupported Suite");
                        }
                        publicKeyHex = kms_core_1.BaseConverter.convert(publicKeyJWK, kms_core_1.Base.JWK, kms_core_1.Base.Hex);
                        return [4 /*yield*/, this.config.storage.get(publicKeyHex)];
                    case 1:
                        privateKey = (_a.sent());
                        suiteInstance = new suiteType();
                        suiteInstance.load(privateKey);
                        return [4 /*yield*/, suiteInstance.pack(true, toHexPublicKeys, contentToSign)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    KMSClient.prototype.packDIDCommV2 = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var suiteType, receiptKeys, senderDoc, senderPbk, senderPublicKeyHex, privateKey, suiteInstance, packedMessage;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        suiteType = this.suites.get(kms_core_1.Suite.DIDCommV2);
                        if (!suiteType) {
                            throw new Error("Unsupported Suite");
                        }
                        return [4 /*yield*/, Promise.all(params.recipientVerificationMethodIds.map(function (vmId) { return __awaiter(_this, void 0, void 0, function () {
                                var didDoc, vm;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.config.didResolver(vmId.substring(0, vmId.indexOf("#")))];
                                        case 1:
                                            didDoc = _a.sent();
                                            return [4 /*yield*/, did_core_1.DIDDocumentUtils.getVerificationMethodById(didDoc, vmId)];
                                        case 2:
                                            vm = _a.sent();
                                            if (vm) {
                                                return [2 /*return*/, {
                                                        verificationMethodId: vmId,
                                                        publicKeyHex: kms_core_1.BaseConverter.convert(vm.publicKeyJwk, kms_core_1.Base.JWK, kms_core_1.Base.Hex)
                                                    }];
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        receiptKeys = _a.sent();
                        return [4 /*yield*/, this.config.didResolver(params.senderVerificationMethodId.substring(0, params.senderVerificationMethodId.indexOf("#")))];
                    case 2:
                        senderDoc = _a.sent();
                        senderPbk = did_core_1.DIDDocumentUtils.getVerificationMethodById(senderDoc, params.senderVerificationMethodId);
                        senderPublicKeyHex = kms_core_1.BaseConverter.convert(senderPbk.publicKeyJwk, kms_core_1.Base.JWK, kms_core_1.Base.Hex);
                        return [4 /*yield*/, this.config.storage.get(senderPublicKeyHex)];
                    case 3:
                        privateKey = (_a.sent());
                        if (!privateKey) {
                            throw new Error("Cannot find private key for public '".concat(senderPublicKeyHex, "' key on KMS storage."));
                        }
                        suiteInstance = new suiteType(this.config.didResolver);
                        suiteInstance.load(privateKey);
                        return [4 /*yield*/, suiteInstance.pack({
                                packing: params.packing,
                                message: params.message,
                                toKeys: receiptKeys,
                                senderVerificationMethodId: params.senderVerificationMethodId
                            })];
                    case 4:
                        packedMessage = _a.sent();
                        return [2 /*return*/, { packedMessage: JSON.parse(packedMessage.message) }];
                }
            });
        });
    };
    KMSClient.prototype.packv2 = function (publicKeyJWK, senderVerificationMethodId, toHexPublicKeys, message, packing) {
        return __awaiter(this, void 0, void 0, function () {
            var suiteType, publicKeyHex, privateKey, suiteInstance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        suiteType = this.suites.get(kms_core_1.Suite.DIDCommV2);
                        if (!suiteType) {
                            throw new Error("Unsupported Suite");
                        }
                        publicKeyHex = kms_core_1.BaseConverter.convert(publicKeyJWK, kms_core_1.Base.JWK, kms_core_1.Base.Hex);
                        return [4 /*yield*/, this.config.storage.get(publicKeyHex)];
                    case 1:
                        privateKey = (_a.sent());
                        suiteInstance = new suiteType(this.config.didResolver);
                        suiteInstance.load(privateKey);
                        return [4 /*yield*/, suiteInstance.pack({
                                packing: packing,
                                message: message,
                                senderVerificationMethodId: senderVerificationMethodId,
                                toKeys: toHexPublicKeys.map(function (x) { return ({
                                    publicKeyHex: x,
                                    verificationMethodId: senderVerificationMethodId
                                }); }),
                            })];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    KMSClient.prototype.unpack = function (publicKeyJWK, packedContent) {
        return __awaiter(this, void 0, void 0, function () {
            var suiteType, publicKeyHex, privateKey, suiteInstance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        suiteType = this.suites.get(kms_core_1.Suite.DIDComm);
                        if (!suiteType) {
                            throw new Error("Unsupported Suite");
                        }
                        publicKeyHex = kms_core_1.BaseConverter.convert(publicKeyJWK, kms_core_1.Base.JWK, kms_core_1.Base.Hex);
                        return [4 /*yield*/, this.config.storage.get(publicKeyHex)];
                    case 1:
                        privateKey = (_a.sent());
                        suiteInstance = new suiteType();
                        suiteInstance.load(privateKey);
                        return [4 /*yield*/, suiteInstance.unpack(packedContent)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    KMSClient.prototype.unpackv2 = function (publicKeyJWK, jwe) {
        return __awaiter(this, void 0, void 0, function () {
            var suiteType, publicKeyHex, privateKey, suiteInstance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.config.didResolver) {
                            throw new Error("DID Resolver required on KMSClient instance to Unpack DIDComm v2");
                        }
                        suiteType = this.suites.get(kms_core_1.Suite.DIDCommV2);
                        if (!suiteType) {
                            throw new Error("Unsupported Suite");
                        }
                        publicKeyHex = kms_core_1.BaseConverter.convert(publicKeyJWK, kms_core_1.Base.JWK, kms_core_1.Base.Hex);
                        return [4 /*yield*/, this.config.storage.get(publicKeyHex)];
                    case 1:
                        privateKey = (_a.sent());
                        suiteInstance = new suiteType(this.config.didResolver);
                        suiteInstance.load(privateKey);
                        return [4 /*yield*/, suiteInstance.unpack(jwe)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    KMSClient.prototype.unpackvDIDCommV2 = function (receiptDID, packedMessage) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var publicKeyHex, dcpm, receiptKid, receiptDoc, pbk, suiteType, suiteInstance, privateKey, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.config.didResolver) {
                            throw new Error("DID Resolver required on KMSClient instance to Unpack DIDComm v2");
                        }
                        publicKeyHex = null;
                        dcpm = packedMessage;
                        receiptKid = (_a = dcpm.recipients) === null || _a === void 0 ? void 0 : _a.find(function (x) { return x.header.kid.indexOf(receiptDID) > -1; });
                        if (!(receiptKid != null)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.config.didResolver(receiptDID)];
                    case 1:
                        receiptDoc = _b.sent();
                        pbk = did_core_1.DIDDocumentUtils.getVerificationMethodById(receiptDoc, receiptKid.header.kid);
                        publicKeyHex = kms_core_1.BaseConverter.convert(pbk.publicKeyJwk, kms_core_1.Base.JWK, kms_core_1.Base.Hex, pbk.type);
                        _b.label = 2;
                    case 2:
                        suiteType = this.suites.get(kms_core_1.Suite.DIDCommV2);
                        if (!suiteType) {
                            throw new Error("Unsupported Suite");
                        }
                        suiteInstance = new suiteType(this.config.didResolver);
                        if (!publicKeyHex) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.config.storage.get(publicKeyHex)];
                    case 3:
                        privateKey = (_b.sent());
                        suiteInstance.load(privateKey);
                        _b.label = 4;
                    case 4: return [4 /*yield*/, suiteInstance.unpack({ message: packedMessage })];
                    case 5:
                        result = _b.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    KMSClient.prototype.export = function (publicKeyJWK) {
        return __awaiter(this, void 0, void 0, function () {
            var publicKeyHex, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        publicKeyHex = kms_core_1.BaseConverter.convert(publicKeyJWK, kms_core_1.Base.JWK, kms_core_1.Base.Hex);
                        return [4 /*yield*/, this.config.storage.get(publicKeyHex)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    KMSClient.prototype.import = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.config.storage.add(key.publicKeyHex, key.secret)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    KMSClient.prototype.getPublicKeysBySuiteType = function (suite) {
        return __awaiter(this, void 0, void 0, function () {
            var data, returnKeys;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.config.storage.getAll()];
                    case 1:
                        data = _a.sent();
                        returnKeys = new Array();
                        data.forEach(function (value, key) {
                            if (data.get(key).suite == suite)
                                value.publicKeyJWK ? returnKeys.push(value.publicKeyJWK) :
                                    returnKeys.push(kms_core_1.BaseConverter.convert(key, kms_core_1.Base.Hex, kms_core_1.Base.JWK, value.curve || value.keyType));
                        });
                        return [2 /*return*/, returnKeys];
                }
            });
        });
    };
    KMSClient.prototype.getAllPublicKeys = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.config.storage.getAll()];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, Array.from(data.keys()).map(function (x) {
                                return kms_core_1.BaseConverter.convert(x, kms_core_1.Base.Hex, kms_core_1.Base.JWK, data.get(x).curve || data.get(x).keyType);
                            })];
                }
            });
        });
    };
    return KMSClient;
}());
exports.KMSClient = KMSClient;
//# sourceMappingURL=kms-client.js.map
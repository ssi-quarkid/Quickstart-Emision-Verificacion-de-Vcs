"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var did_core_1 = require("@extrimian/did-core");
var kms_core_1 = require("@extrimian/kms-core");
var kms_client_1 = require("../src/services/kms-client");
var kms_core_2 = require("@extrimian/kms-core");
var vc_verifier_1 = require("@extrimian/vc-verifier");
var didDocument = require("./mock/did-document.json");
var vc = require("./mock/vc.json");
var bbsSignedVc = require("./mock/bbs-signed-vc.json");
var vcRsa = require("./mock/vc-rsa.json");
var rsaSignedVC = require("./mock/signed-vc.json");
jest.setTimeout(50000);
var contentToSign = "This is the content to sign";
var contentPacked;
describe("STORAGE", function () {
    it("Get All Keys", function () { return __awaiter(void 0, void 0, void 0, function () {
        var mapping, storage, kmsClient, publicKeys;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mapping = new Map();
                    storage = {
                        add: function (key, data) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            mapping.set(key, data);
                            return [2 /*return*/];
                        }); }); },
                        get: function (key) { return mapping.get(key); },
                        getAll: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, mapping];
                        }); }); },
                        remove: function (key) { return mapping.delete(key); },
                        update: function (key, data) { return mapping.set(key, data); },
                    };
                    mapping.set(hexToJWKHex("0x04121ee5c82d3d343fc899a3d923347188938c94f22b15ef9cd05f1c423c65dac9634c1986dbe07f42ef3cd9bbd307bc574e6e26c7987f40c089028c884705c44"), {
                        curve: 'secp256k1',
                        mnemonic: 'baile anemia término tabla tonto vivero remar gota útil morsa pájaro folio',
                        privateKey: '0x4d1a563f607425d8b545f2c73f944c7fe4301204d46bf152dd5ef9a7003de27d',
                        publicKey: '0x04121ee5c82d3d343fc899a3d923347188938c94f22b15ef9cd05f1c423c65dac9634c1986dbe07f42ef3cd9bbd307bc574e6e26c7987f40c089028c884705c44a',
                        suite: kms_core_1.Suite.ES256k
                    });
                    mapping.set(hexToJWKHex("d0f3d5f8bce2d547d44a19de2a4786cd13d760ae0eaf2c06b2c1334e7e97adb3"), {
                        keyType: 'ed25519',
                        privateKey: 'e96789382913cd4802bba5fff45d024ff63e43f06c372e0c95fd7b7d6e0d6a7ad0f3d5f8bce2d547d44a19de2a4786cd13d760ae0eaf2c06b2c1334e7e97adb3',
                        publicKey: 'd0f3d5f8bce2d547d44a19de2a4786cd13d760ae0eaf2c06b2c1334e7e97adb3',
                        suite: kms_core_1.Suite.DIDComm
                    });
                    mapping.set(base58ToJWKHex("qWb8CofFBmAxsRgvntXakizHkzyayVWcjQ8UdMQUUf3AJXLTtobjWdevUFiEibz9zDdmcGZg6H6Zr3YCpmvRzMyAuYfWi3uUZBvCi45ZzgfzJfr77SMV1r7aJZeSP9TDxqR"), {
                        privateKey: '5iZsbqAVp6h1CYGATPmYjLFa6zFfX5dSR52jG1S592ap',
                        publicKey: 'qWb8CofFBmAxsRgvntXakizHkzyayVWcjQ8UdMQUUf3AJXLTtobjWdevUFiEibz9zDdmcGZg6H6Zr3YCpmvRzMyAuYfWi3uUZBvCi45ZzgfzJfr77SMV1r7aJZeSP9TDxqR',
                        suite: kms_core_1.Suite.Bbsbls2020
                    });
                    kmsClient = new kms_client_1.KMSClient({ lang: kms_core_1.LANG.es, storage: storage });
                    return [4 /*yield*/, kmsClient.getAllPublicKeys()];
                case 1:
                    publicKeys = _a.sent();
                    expect(publicKeys).toHaveLength(3);
                    return [2 /*return*/];
            }
        });
    }); });
    it("Export Key", function () { return __awaiter(void 0, void 0, void 0, function () {
        var mapping, storage, kmsClient, publicKeyJWK, secrets;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mapping = new Map();
                    storage = {
                        add: function (key, data) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            mapping.set(key, data);
                            return [2 /*return*/];
                        }); }); },
                        get: function (key) { return mapping.get(key); },
                        getAll: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, mapping];
                        }); }); },
                        remove: function (key) { return mapping.delete(key); },
                        update: function (key, data) { return mapping.set(key, data); },
                    };
                    //Remove ethr prefix 0x04 from public key
                    mapping.set("0x121ee5c82d3d343fc899a3d923347188938c94f22b15ef9cd05f1c423c65dac9634c1986dbe07f42ef3cd9bbd307bc574e6e26c7987f40c089028c884705c44a", {
                        curve: 'secp256k1',
                        mnemonic: 'baile anemia término tabla tonto vivero remar gota útil morsa pájaro folio',
                        privateKey: '0x4d1a563f607425d8b545f2c73f944c7fe4301204d46bf152dd5ef9a7003de27d',
                        publicKey: '0x04121ee5c82d3d343fc899a3d923347188938c94f22b15ef9cd05f1c423c65dac9634c1986dbe07f42ef3cd9bbd307bc574e6e26c7987f40c089028c884705c44a',
                        suite: kms_core_1.Suite.ES256k
                    });
                    kmsClient = new kms_client_1.KMSClient({ lang: kms_core_1.LANG.es, storage: storage });
                    publicKeyJWK = kms_core_2.BaseConverter.convert("0x04121ee5c82d3d343fc899a3d923347188938c94f22b15ef9cd05f1c423c65dac9634c1986dbe07f42ef3cd9bbd307bc574e6e26c7987f40c089028c884705c44a", kms_core_2.Base.Hex, kms_core_2.Base.JWK);
                    return [4 /*yield*/, kmsClient.export(publicKeyJWK)];
                case 1:
                    secrets = _a.sent();
                    expect(secrets.curve).toEqual("secp256k1");
                    expect(secrets.mnemonic).toEqual("baile anemia término tabla tonto vivero remar gota útil morsa pájaro folio");
                    expect(secrets.privateKey).toEqual("0x4d1a563f607425d8b545f2c73f944c7fe4301204d46bf152dd5ef9a7003de27d");
                    expect(secrets.publicKey).toEqual("0x04121ee5c82d3d343fc899a3d923347188938c94f22b15ef9cd05f1c423c65dac9634c1986dbe07f42ef3cd9bbd307bc574e6e26c7987f40c089028c884705c44a");
                    expect(secrets.suite).toEqual(kms_core_1.Suite.ES256k);
                    return [2 /*return*/];
            }
        });
    }); });
});
describe('UNSUPPORTED SUITE', function () {
    it("Create unsupported suite", function () { return __awaiter(void 0, void 0, void 0, function () {
        var mapping, storage, kmsClient, secrets, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mapping = new Map();
                    storage = {
                        add: function (key, data) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            mapping.set(key, data);
                            return [2 /*return*/];
                        }); }); },
                        get: function (key) { return mapping.get(key); },
                        getAll: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, mapping];
                        }); }); },
                        remove: function (key) { return mapping.delete(key); },
                        update: function (key, data) { return mapping.set(key, data); },
                    };
                    kmsClient = new kms_client_1.KMSClient({ lang: kms_core_1.LANG.es, storage: storage });
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, kmsClient.create("unsupportedSuite")];
                case 2:
                    secrets = _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _a.sent();
                    expect(error_1).not.toBeNull();
                    expect(error_1.message).toEqual("Unsupported Suite");
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
});
describe('ETHR SUITE', function () {
    it("ETHR Create Secrets and sign", function () { return __awaiter(void 0, void 0, void 0, function () {
        var mapping, storage, kmsClient, secrets, publicKeys, signedContent;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mapping = new Map();
                    storage = {
                        add: function (key, data) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            mapping.set(key, data);
                            return [2 /*return*/];
                        }); }); },
                        get: function (key) { return mapping.get(key); },
                        getAll: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, mapping];
                        }); }); },
                        remove: function (key) { return mapping.delete(key); },
                        update: function (key, data) { return mapping.set(key, data); },
                    };
                    kmsClient = new kms_client_1.KMSClient({ lang: kms_core_1.LANG.es, storage: storage });
                    return [4 /*yield*/, kmsClient.create(kms_core_1.Suite.ES256k)];
                case 1:
                    secrets = _a.sent();
                    return [4 /*yield*/, kmsClient.getPublicKeysBySuiteType(kms_core_1.Suite.ES256k)];
                case 2:
                    publicKeys = _a.sent();
                    expect(publicKeys).toHaveLength(1);
                    expect(publicKeys[0]).not.toBeNull();
                    expect(publicKeys[0]).toEqual(secrets.publicKeyJWK);
                    return [4 /*yield*/, kmsClient.sign(kms_core_1.Suite.ES256k, publicKeys[0], "Este es el contenido a firmar")];
                case 3:
                    signedContent = _a.sent();
                    console.log(signedContent);
                    return [2 /*return*/];
            }
        });
    }); });
    it("ETHR Sign Content", function () { return __awaiter(void 0, void 0, void 0, function () {
        var mapping, storage, kmsClient, publicKeys, signedContent;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mapping = new Map();
                    storage = {
                        add: function (key, data) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            mapping.set(key, data);
                            return [2 /*return*/];
                        }); }); },
                        get: function (key) { return mapping.get(key); },
                        getAll: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, mapping];
                        }); }); },
                        remove: function (key) { return mapping.delete(key); },
                        update: function (key, data) { return mapping.set(key, data); },
                    };
                    mapping.set(hexToJWKHex("0x121ee5c82d3d343fc899a3d923347188938c94f22b15ef9cd05f1c423c65dac9634c1986dbe07f42ef3cd9bbd307bc574e6e26c7987f40c089028c884705c44a"), {
                        curve: 'secp256k1',
                        mnemonic: 'baile anemia término tabla tonto vivero remar gota útil morsa pájaro folio',
                        privateKey: '0x4d1a563f607425d8b545f2c73f944c7fe4301204d46bf152dd5ef9a7003de27d',
                        publicKey: '0x04121ee5c82d3d343fc899a3d923347188938c94f22b15ef9cd05f1c423c65dac9634c1986dbe07f42ef3cd9bbd307bc574e6e26c7987f40c089028c884705c44a',
                        suite: kms_core_1.Suite.ES256k
                    });
                    kmsClient = new kms_client_1.KMSClient({ lang: kms_core_1.LANG.es, storage: storage });
                    return [4 /*yield*/, kmsClient.getPublicKeysBySuiteType(kms_core_1.Suite.ES256k)];
                case 1:
                    publicKeys = _a.sent();
                    return [4 /*yield*/, kmsClient.sign(kms_core_1.Suite.ES256k, publicKeys[0], contentToSign)];
                case 2:
                    signedContent = _a.sent();
                    expect(signedContent).not.toBeNull();
                    return [2 /*return*/];
            }
        });
    }); });
});
describe("DIDComm v2 Suite", function () {
    it("Create Keys", function () { return __awaiter(void 0, void 0, void 0, function () {
        var mapping, storage, kmsClient, secrets, publicKeys;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mapping = new Map();
                    storage = {
                        add: function (key, data) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            mapping.set(key, data);
                            return [2 /*return*/];
                        }); }); },
                        get: function (key) { return mapping.get(key); },
                        getAll: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, mapping];
                        }); }); },
                        remove: function (key) { return mapping.delete(key); },
                        update: function (key, data) { return mapping.set(key, data); },
                    };
                    kmsClient = new kms_client_1.KMSClient({ lang: kms_core_1.LANG.es, storage: storage });
                    return [4 /*yield*/, kmsClient.create(kms_core_1.Suite.DIDCommV2)];
                case 1:
                    secrets = _a.sent();
                    return [4 /*yield*/, kmsClient.getPublicKeysBySuiteType(kms_core_1.Suite.DIDCommV2)];
                case 2:
                    publicKeys = _a.sent();
                    expect(publicKeys).toHaveLength(1);
                    expect(publicKeys[0]).not.toBeNull();
                    expect(publicKeys[0]).toEqual(secrets.publicKeyJWK);
                    return [2 /*return*/];
            }
        });
    }); });
    it("DIDComm 2 Pack & Unpack", function () { return __awaiter(void 0, void 0, void 0, function () {
        var mappingSigner, storage, kmsClient, publicKeys, contentPacked, mappingSigner2, storage2, kmsClient2, publicKeys2, value;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mappingSigner = new Map();
                    storage = {
                        add: function (key, data) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            mappingSigner.set(key, data);
                            return [2 /*return*/];
                        }); }); },
                        get: function (key) { return mappingSigner.get(key); },
                        getAll: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, mappingSigner];
                        }); }); },
                        remove: function (key) { return mappingSigner.delete(key); },
                        update: function (key, data) { return mappingSigner.set(key, data); },
                    };
                    mappingSigner.set(hexToJWKHex("d0f3d5f8bce2d547d44a19de2a4786cd13d760ae0eaf2c06b2c1334e7e97adb3"), {
                        keyType: 'Ed25519',
                        privateKey: 'e96789382913cd4802bba5fff45d024ff63e43f06c372e0c95fd7b7d6e0d6a7ad0f3d5f8bce2d547d44a19de2a4786cd13d760ae0eaf2c06b2c1334e7e97adb3',
                        publicKey: 'd0f3d5f8bce2d547d44a19de2a4786cd13d760ae0eaf2c06b2c1334e7e97adb3',
                        suite: kms_core_1.Suite.DIDComm
                    });
                    kmsClient = new kms_client_1.KMSClient({ lang: kms_core_1.LANG.es, storage: storage });
                    return [4 /*yield*/, kmsClient.getPublicKeysBySuiteType(kms_core_1.Suite.DIDComm)];
                case 1:
                    publicKeys = _a.sent();
                    return [4 /*yield*/, kmsClient.packv2(publicKeys[0], "did:modena:matic:EiDxVyreUxU_nBYhtifpAXC7PcgMJ3DLkl_1Vdxy0Izg0w#didcomm", //Sender verification method
                        ["8a983c05eaa75c9da139fb2f89e124acaef188db5c22ac9368ec3e8705634ce2"], {
                            from: "did:modena:matic:EiDxVyreUxU_nBYhtifpAXC7PcgMJ3DLkl_1Vdxy0Izg0w",
                            to: ["did:fake:example1"],
                            id: "test",
                            body: {},
                            type: "protocol-identifier-uri/message-type-name",
                        }, "authcrypt")];
                case 2:
                    contentPacked = _a.sent();
                    expect(contentPacked).not.toBeNull();
                    mappingSigner2 = new Map();
                    storage2 = {
                        add: function (key, data) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            mappingSigner2.set(key, data);
                            return [2 /*return*/];
                        }); }); },
                        get: function (key) { return mappingSigner2.get(key); },
                        getAll: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, mappingSigner2];
                        }); }); },
                        remove: function (key) { return mappingSigner2.delete(key); },
                        update: function (key, data) { return mappingSigner2.set(key, data); },
                    };
                    mappingSigner2.set(hexToJWKHex("8a983c05eaa75c9da139fb2f89e124acaef188db5c22ac9368ec3e8705634ce2"), {
                        keyType: 'Ed25519',
                        privateKey: '5cf687264f496205a122c51edd3497902a380690c7a6ab2331e271b32949cdf48a983c05eaa75c9da139fb2f89e124acaef188db5c22ac9368ec3e8705634ce2',
                        publicKey: '8a983c05eaa75c9da139fb2f89e124acaef188db5c22ac9368ec3e8705634ce2',
                        suite: kms_core_1.Suite.DIDCommV2
                    });
                    kmsClient2 = new kms_client_1.KMSClient({
                        lang: kms_core_1.LANG.es, storage: storage2, didResolver: function (did) {
                            return didDocument;
                        }
                    });
                    return [4 /*yield*/, kmsClient2.getPublicKeysBySuiteType(kms_core_1.Suite.DIDCommV2)];
                case 3:
                    publicKeys2 = _a.sent();
                    return [4 /*yield*/, kmsClient2.unpackv2(publicKeys2[0], contentPacked)];
                case 4:
                    value = _a.sent();
                    console.log(value);
                    return [2 /*return*/];
            }
        });
    }); });
});
describe("DIDComm Suite", function () {
    it("Create Keys", function () { return __awaiter(void 0, void 0, void 0, function () {
        var mapping, storage, kmsClient, secrets, publicKeys, signedContent;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mapping = new Map();
                    storage = {
                        add: function (key, data) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            mapping.set(key, data);
                            return [2 /*return*/];
                        }); }); },
                        get: function (key) { return mapping.get(key); },
                        getAll: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, mapping];
                        }); }); },
                        remove: function (key) { return mapping.delete(key); },
                        update: function (key, data) { return mapping.set(key, data); },
                    };
                    kmsClient = new kms_client_1.KMSClient({ lang: kms_core_1.LANG.es, storage: storage });
                    return [4 /*yield*/, kmsClient.create(kms_core_1.Suite.DIDComm)];
                case 1:
                    secrets = _a.sent();
                    return [4 /*yield*/, kmsClient.getPublicKeysBySuiteType(kms_core_1.Suite.DIDComm)];
                case 2:
                    publicKeys = _a.sent();
                    expect(publicKeys).toHaveLength(1);
                    expect(publicKeys[0]).not.toBeNull();
                    expect(publicKeys[0]).toEqual(secrets.publicKeyJWK);
                    return [4 /*yield*/, kmsClient.pack(publicKeys[0], ["d0f3d5f8bce2d547d44a19de2a4786cd13d760ae0eaf2c06b2c1334e7e97adb3"], "Este es el contenido a firmar")];
                case 3:
                    signedContent = _a.sent();
                    console.log(signedContent);
                    return [2 /*return*/];
            }
        });
    }); });
    it("DIDComm PACK", function () { return __awaiter(void 0, void 0, void 0, function () {
        var mappingSigner, storage, kmsClient, publicKeys;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mappingSigner = new Map();
                    storage = {
                        add: function (key, data) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            mappingSigner.set(key, data);
                            return [2 /*return*/];
                        }); }); },
                        get: function (key) { return mappingSigner.get(key); },
                        getAll: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, mappingSigner];
                        }); }); },
                        remove: function (key) { return mappingSigner.delete(key); },
                        update: function (key, data) { return mappingSigner.set(key, data); },
                    };
                    mappingSigner.set(hexToJWKHex("d0f3d5f8bce2d547d44a19de2a4786cd13d760ae0eaf2c06b2c1334e7e97adb3"), {
                        keyType: 'ed25519',
                        privateKey: 'e96789382913cd4802bba5fff45d024ff63e43f06c372e0c95fd7b7d6e0d6a7ad0f3d5f8bce2d547d44a19de2a4786cd13d760ae0eaf2c06b2c1334e7e97adb3',
                        publicKey: 'd0f3d5f8bce2d547d44a19de2a4786cd13d760ae0eaf2c06b2c1334e7e97adb3',
                        suite: kms_core_1.Suite.DIDComm
                    });
                    kmsClient = new kms_client_1.KMSClient({ lang: kms_core_1.LANG.es, storage: storage });
                    return [4 /*yield*/, kmsClient.getPublicKeysBySuiteType(kms_core_1.Suite.DIDComm)];
                case 1:
                    publicKeys = _a.sent();
                    return [4 /*yield*/, kmsClient.pack(publicKeys[0], ["5ba46c41ec8d511954cdb0c787b5b710a6c744389dba77d12b3f20777418b4fc"], contentToSign)];
                case 2:
                    contentPacked = _a.sent();
                    expect(contentPacked).not.toBeNull();
                    return [2 /*return*/];
            }
        });
    }); });
    it("DIDComm Unpack", function () { return __awaiter(void 0, void 0, void 0, function () {
        var mapping, storage, kmsClient, keys, plainText;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mapping = new Map();
                    storage = {
                        add: function (key, data) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            mapping.set(key, data);
                            return [2 /*return*/];
                        }); }); },
                        get: function (key) { return mapping.get(key); },
                        getAll: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, mapping];
                        }); }); },
                        remove: function (key) { return mapping.delete(key); },
                        update: function (key, data) { return mapping.set(key, data); },
                    };
                    mapping.set(hexToJWKHex("5ba46c41ec8d511954cdb0c787b5b710a6c744389dba77d12b3f20777418b4fc"), {
                        keyType: 'ed25519',
                        privateKey: '9d4db891f8494d90f6c0783dce115158cac757c760c83203982b198bbe107f0a5ba46c41ec8d511954cdb0c787b5b710a6c744389dba77d12b3f20777418b4fc',
                        publicKey: '5ba46c41ec8d511954cdb0c787b5b710a6c744389dba77d12b3f20777418b4fc',
                        suite: kms_core_1.Suite.DIDComm
                    });
                    kmsClient = new kms_client_1.KMSClient({ lang: kms_core_1.LANG.es, storage: storage });
                    return [4 /*yield*/, kmsClient.getPublicKeysBySuiteType(kms_core_1.Suite.DIDComm)];
                case 1:
                    keys = _a.sent();
                    return [4 /*yield*/, kmsClient.unpack(keys[0], contentPacked)];
                case 2:
                    plainText = _a.sent();
                    expect(plainText).toEqual(contentToSign);
                    return [2 /*return*/];
            }
        });
    }); });
});
describe('BbsBls2020 SUITE', function () {
    it("BbsBls2020 Create Secrets", function () { return __awaiter(void 0, void 0, void 0, function () {
        var mapping, storage, kmsClient, secrets, publicKeys;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mapping = new Map();
                    storage = {
                        add: function (key, data) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            mapping.set(key, data);
                            return [2 /*return*/];
                        }); }); },
                        get: function (key) { return mapping.get(key); },
                        getAll: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, mapping];
                        }); }); },
                        remove: function (key) { return mapping.delete(key); },
                        update: function (key, data) { return mapping.set(key, data); },
                    };
                    kmsClient = new kms_client_1.KMSClient({ lang: kms_core_1.LANG.es, storage: storage });
                    return [4 /*yield*/, kmsClient.create(kms_core_1.Suite.Bbsbls2020)];
                case 1:
                    secrets = _a.sent();
                    return [4 /*yield*/, kmsClient.getPublicKeysBySuiteType(kms_core_1.Suite.Bbsbls2020)];
                case 2:
                    publicKeys = _a.sent();
                    expect(publicKeys).toHaveLength(1);
                    expect(publicKeys[0]).not.toBeNull();
                    expect(publicKeys[0]).toEqual(secrets.publicKeyJWK);
                    return [2 /*return*/];
            }
        });
    }); });
    it("BbsBls2020 Sign VC", function () { return __awaiter(void 0, void 0, void 0, function () {
        var mapping, storage, kmsClient, publicKeys, signedVC;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mapping = new Map();
                    storage = {
                        add: function (key, data) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            mapping.set(key, data);
                            return [2 /*return*/];
                        }); }); },
                        get: function (key) { return mapping.get(key); },
                        getAll: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, mapping];
                        }); }); },
                        remove: function (key) { return mapping.delete(key); },
                        update: function (key, data) { return mapping.set(key, data); },
                    };
                    mapping.set("0x881bd53b1cfe84de8c737e73d58223f4683efd8407ffb572af6e8505a2e372199e85e6bdb11a33be95c89761abf61222190a1c987f42dce08a062af6c48edcbf51d78168086d3b5e1cf2be0d35d214ae0a4a8584eca7d970b36d74b7f41ca20c", {
                        privateKey: '7hCCyZGj7L4zTvf4W17H16v5u4U2mRwzJPKhwgSMfHyd',
                        publicKey: 'otPct785rAkXEsU86Sk2Q8qDnivMCkWYRRRmoRJqoTuh4kzL1GhGZvvTVAi9ddTuuDKDxEPgazfdvy9HcykynzaoNWDeUFot8kZL7zbMtcYLMrXEE25R9ioVjbwGJADXHTR',
                        suite: kms_core_1.Suite.Bbsbls2020
                    });
                    kmsClient = new kms_client_1.KMSClient({
                        lang: kms_core_1.LANG.es,
                        storage: storage,
                        didResolver: function (did) {
                            console.log(didDocument);
                            return didDocument;
                        }
                    });
                    return [4 /*yield*/, kmsClient.getPublicKeysBySuiteType(kms_core_1.Suite.Bbsbls2020)];
                case 1:
                    publicKeys = _a.sent();
                    return [4 /*yield*/, kmsClient.signVC(kms_core_1.Suite.Bbsbls2020, publicKeys[0], vc, "did:modena:matic:EiDxVyreUxU_nBYhtifpAXC7PcgMJ3DLkl_1Vdxy0Izg0w#bbsbls", "did:modena:matic:EiDxVyreUxU_nBYhtifpAXC7PcgMJ3DLkl_1Vdxy0Izg0w#bbsbls", new did_core_1.AssertionMethodPurpose())];
                case 2:
                    signedVC = _a.sent();
                    expect(signedVC).not.toBeNull();
                    expect(signedVC.proof).not.toBeNull();
                    expect(signedVC.proof.proofPurpose).toEqual("assertionMethod");
                    expect(signedVC.proof.type).toEqual("BbsBlsSignature2020");
                    expect(signedVC.proof.verificationMethod).toEqual("did:modena:matic:EiDxVyreUxU_nBYhtifpAXC7PcgMJ3DLkl_1Vdxy0Izg0w#bbsbls");
                    return [2 /*return*/];
            }
        });
    }); });
    it("BBS Verify VC", function () { return __awaiter(void 0, void 0, void 0, function () {
        var vcVerifier, verification;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    vcVerifier = new vc_verifier_1.VCVerifierService({
                        didDocumentResolver: function (did) { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                console.log(didDocument);
                                return [2 /*return*/, didDocument];
                            });
                        }); }
                    });
                    return [4 /*yield*/, vcVerifier.verify(bbsSignedVc, new did_core_1.AssertionMethodPurpose())];
                case 1:
                    verification = _a.sent();
                    expect(verification.result).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
});
describe('RSASignature2018 SUITE', function () {
    it("RSASignature2018 Create Secrets", function () { return __awaiter(void 0, void 0, void 0, function () {
        var mapping, storage, kmsClient, secrets, publicKeys;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mapping = new Map();
                    storage = {
                        add: function (key, data) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            mapping.set(key, data);
                            return [2 /*return*/];
                        }); }); },
                        get: function (key) { return mapping.get(key); },
                        getAll: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, mapping];
                        }); }); },
                        remove: function (key) { return mapping.delete(key); },
                        update: function (key, data) { return mapping.set(key, data); },
                    };
                    kmsClient = new kms_client_1.KMSClient({ lang: kms_core_1.LANG.es, storage: storage });
                    return [4 /*yield*/, kmsClient.create(kms_core_1.Suite.RsaSignature2018)];
                case 1:
                    secrets = _a.sent();
                    return [4 /*yield*/, kmsClient.getPublicKeysBySuiteType(kms_core_1.Suite.RsaSignature2018)];
                case 2:
                    publicKeys = _a.sent();
                    expect(publicKeys).toHaveLength(1);
                    expect(publicKeys[0]).not.toBeNull();
                    expect(publicKeys[0]).toEqual(secrets.publicKeyJWK);
                    return [2 /*return*/];
            }
        });
    }); });
    it("RSASignature2018 Sign VC", function () { return __awaiter(void 0, void 0, void 0, function () {
        var mapping, storage, kmsClient, publicKeys, signedVC;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mapping = new Map();
                    storage = {
                        add: function (key, data) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            mapping.set(key, data);
                            return [2 /*return*/];
                        }); }); },
                        get: function (key) { return mapping.get(key); },
                        getAll: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, mapping];
                        }); }); },
                        remove: function (key) { return mapping.delete(key); },
                        update: function (key, data) { return mapping.set(key, data); },
                    };
                    mapping.set("0xb372b68aa99c74cd18027bdd7166b76fce6689452b25c19201f193bc5b180f2d48a5e1e576258c40f0c5903ecb5081806d2b83b327fd080d571066386805d4719d3aa08d2ef1f1e98f59afe07c0fb144a38e2b0377258f7171abc00f8d8db8372f5e3d3f14cb899278e12bc1b58257261f0c5b2ecc7304d30605e2afbb62792b57c43b9722535a28fa873688cdd924ce4b71268eba53c065d34e27be1a1bb678bb6fc1a3e0b5b12dde380eec3e6c2e7011c1dc52215fbe35a3fec102391f8806555ff2a5dc181c64f5249cfbb2d3f325af638ab8af560889e8ab5a0f9a1a7be0e796981e94e50807010f8ca696469b9ff1f5cd1e7c3ab63c67245145298aace9", {
                        privateKeyJWK: {
                            kty: "RSA",
                            n: "s3K2iqmcdM0YAnvdcWa3b85miUUrJcGSAfGTvFsYDy1IpeHldiWMQPDFkD7LUIGAbSuDsyf9CA1XEGY4aAXUcZ06oI0u8fHpj1mv4HwPsUSjjisDdyWPcXGrwA-Njbg3L149PxTLiZJ44SvBtYJXJh8MWy7McwTTBgXir7tieStXxDuXIlNaKPqHNojN2STOS3EmjrpTwGXTTie-Ghu2eLtvwaPgtbEt3jgO7D5sLnARwdxSIV--NaP-wQI5H4gGVV_ypdwYHGT1JJz7stPzJa9jirivVgiJ6KtaD5oae-DnlpgelOUIBwEPjKaWRpuf8fXNHnw6tjxnJFFFKYqs6Q",
                            e: "AQAB",
                            d: "k6OtzCgAMZkMR_7hEowQIE0Qz5-5ADdiiXbYtf-8q7_2JYTV5X6_Bi8SXLtNS89AepFyqdQcuqM_Hp77iZpCT7espKuEFEuUffysV2W7A34VksKQ91ZPzmZXiI1DSXZm8PH4Mg5J58Y67geyOEQkr5ib8elvDLLLbAkrmKnzOvyrrvLhFJdFo57E2zn0A8cohyWnVW1XCjxWssswh8GWmljcMEQPtKTAJTbMxlRIrhlqpnLNHTWWFf-8-AhWODMfptcXA_BOnR6g9Vtq61n2YqcbX8BVnnIPdScPOU6ClZaYbYVoFQONh_dDPUJ3pg5HQ5LvFT8lkVbBwRXs8-hgAQ",
                            p: "7KA0JOOZb_WIZ2d6vNEFzuitdXIPBrFN3HdJfbKw9tzA7hBJYffVWsMQGwCuk8pIjHA6bddKzCL7vMidEhJ0mgqMtnElEucy_MRmsWHBzehbx-MSaEhOPlUQNjo5Oy2KqS_APQwvCscviMuIdAa6oUUIIF-hxof3-2g_ji6uM-E",
                            q: "wiQJMXzmwuAq-zj0eFqkLkONO4rfDK5f-VmrfdhdsL1UV2nLOfPZJKT_mzUXJH8JK2CvePOfG_NBnZ9W9JuxUNJjuslEOd0DfTf32KRN_0X_mcyWrepKtqbyLKTFnt5l02ygefHxOrnLZWJwYUJu_CjuCsAnM9YqgJZuLDjmGgk",
                            dp: "2XM3uBa4cJzQ50W_Ezl6_vPwQ5e3m0zg4pN0o-DMo2-mlJ--8BrSpH_Rkx8DT6l7FiQkbcCFaidT897gCTWQlebP_PDpQv_YaVULkkLl2RWJEp3n0pFv5fRB27OR2II3hNbu8Kr7qAn38twn34g3hfBsUWPQxSM6jnz0uvLG_8E",
                            dq: "XINLljeMx4SHNtv3M3sODbXHEX6lt6dIuMwQOpHmY5h1Hoqde2pGKX4vB8kO1CdtOSyDscF2Kp2KwQ_zIfEnV_pJ5_KM_n3hccQ_6Q6y1FiI6sNhclLZc5yufrOuMHyOTWfQOQwgBfoPgKqeHtrHhIYEmT7j74G5EzmcGpqqm_E",
                            qi: "E_M2ruvsR10UmIobVAOvS3LzFoTsHBsvID5VEI2P1Vh1isNjtLF6upD07G44HNoUxoyxq5XWrB418oStvSZHsv6xOSCoAkdAUDYYhOhXkN5cZRCBDof-ZPJgjXXyccgB963WdA8OkTI5LcEcxax6bBXsw3fIZRyDB8M15FgPGr4"
                        },
                        publicKeyJWK: {
                            kty: "RSA",
                            n: "s3K2iqmcdM0YAnvdcWa3b85miUUrJcGSAfGTvFsYDy1IpeHldiWMQPDFkD7LUIGAbSuDsyf9CA1XEGY4aAXUcZ06oI0u8fHpj1mv4HwPsUSjjisDdyWPcXGrwA-Njbg3L149PxTLiZJ44SvBtYJXJh8MWy7McwTTBgXir7tieStXxDuXIlNaKPqHNojN2STOS3EmjrpTwGXTTie-Ghu2eLtvwaPgtbEt3jgO7D5sLnARwdxSIV--NaP-wQI5H4gGVV_ypdwYHGT1JJz7stPzJa9jirivVgiJ6KtaD5oae-DnlpgelOUIBwEPjKaWRpuf8fXNHnw6tjxnJFFFKYqs6Q",
                            e: "AQAB"
                        },
                        suite: kms_core_1.Suite.RsaSignature2018
                    });
                    kmsClient = new kms_client_1.KMSClient({ lang: kms_core_1.LANG.es, storage: storage });
                    return [4 /*yield*/, kmsClient.getPublicKeysBySuiteType(kms_core_1.Suite.RsaSignature2018)];
                case 1:
                    publicKeys = _a.sent();
                    return [4 /*yield*/, kmsClient.signVCPresentation({
                            publicKeyJWK: publicKeys[0],
                            presentationObject: vcRsa,
                            did: "did:modena:matic:EiDxVyreUxU_nBYhtifpAXC7PcgMJ3DLkl_1Vdxy0Izg0w",
                            verificationMethodId: "did:modena:matic:EiDxVyreUxU_nBYhtifpAXC7PcgMJ3DLkl_1Vdxy0Izg0w#rsa",
                            purpose: new did_core_1.AssertionMethodPurpose()
                        })];
                case 2:
                    signedVC = _a.sent();
                    expect(signedVC).not.toBeNull();
                    expect(signedVC.proof).not.toBeNull();
                    expect(signedVC.proof.proofPurpose).toEqual("assertionMethod");
                    expect(signedVC.proof.type).toEqual("RsaSignature2018");
                    expect(signedVC.proof.verificationMethod).toEqual("did:modena:matic:EiDxVyreUxU_nBYhtifpAXC7PcgMJ3DLkl_1Vdxy0Izg0w#rsa");
                    return [2 /*return*/];
            }
        });
    }); });
    it("RSASignature2018 Verify VC", function () { return __awaiter(void 0, void 0, void 0, function () {
        var vcVerifier, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    vcVerifier = new vc_verifier_1.VCVerifierService({
                        didDocumentResolver: function (did) { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                console.log(didDocument);
                                return [2 /*return*/, didDocument];
                            });
                        }); }
                    });
                    return [4 /*yield*/, vcVerifier.verify(rsaSignedVC, new did_core_1.AssertionMethodPurpose())];
                case 1:
                    result = _a.sent();
                    expect(result.result).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
});
var base58ToJWKHex = function (pk) {
    return kms_core_2.BaseConverter.convert(kms_core_2.BaseConverter.convert(pk, kms_core_2.Base.Base58, kms_core_2.Base.JWK), kms_core_2.Base.JWK, kms_core_2.Base.Hex);
};
var hexToJWKHex = function (pk) {
    return kms_core_2.BaseConverter.convert(kms_core_2.BaseConverter.convert(pk, kms_core_2.Base.Hex, kms_core_2.Base.JWK), kms_core_2.Base.JWK, kms_core_2.Base.Hex);
    ;
};
//# sourceMappingURL=kms-client.test.js.map
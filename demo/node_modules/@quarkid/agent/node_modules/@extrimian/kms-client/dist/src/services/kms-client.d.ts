import { DIDCommMessage, DIDDocument, Purpose } from "@extrimian/did-core";
import { IKMS, Suite, LANG, KMSStorage, IKeyPair, IJWK, IPackedDIDCommMessage, IDIDCommMessage, DIDCommMessagePacking, DIDCommPackedMessage } from "@extrimian/kms-core";
import { VerifiableCredential } from "@extrimian/vc-core";
import "@extrimian/kms-suite-didcomm";
import "@extrimian/kms-suite-didcomm-v2";
import "@extrimian/kms-suite-es256k";
import "@extrimian/kms-suite-rsa-signature-2018";
export declare class KMSClient implements IKMS {
    private config;
    suites: Map<Suite, new (...args: never[]) => any>;
    constructor(config: {
        lang: LANG;
        storage: KMSStorage;
        didResolver?: (did: string) => Promise<DIDDocument>;
        mobile?: boolean;
    });
    create(suite: Suite): Promise<{
        publicKeyJWK: IJWK;
    }>;
    sign(suite: Suite, publicKeyJWK: IJWK, content: any): Promise<string>;
    verifySignature(publicKeyJWK: IJWK, originalContent: string, signature: string): Promise<boolean>;
    signVC(suite: Suite, publicKeyJWK: IJWK, vc: any, did: string, verificationMethodId: string, purpose: Purpose): Promise<VerifiableCredential>;
    deriveVC(params: {
        vc: VerifiableCredential<any>;
        frame: any;
    }): Promise<VerifiableCredential<any>>;
    signVCPresentation(params: {
        publicKeyJWK: IJWK;
        presentationObject: any;
        did: string;
        verificationMethodId: string;
        purpose: Purpose;
    }): Promise<any>;
    pack(publicKeyJWK: IJWK, toHexPublicKeys: string[], contentToSign: string): Promise<string>;
    packDIDCommV2(params: {
        senderVerificationMethodId: string;
        recipientVerificationMethodIds: string[];
        message: IDIDCommMessage;
        packing: DIDCommMessagePacking;
    }): Promise<{
        packedMessage: DIDCommPackedMessage;
    }>;
    packv2(publicKeyJWK: IJWK, senderVerificationMethodId: string, toHexPublicKeys: string[], message: IDIDCommMessage, packing: DIDCommMessagePacking): Promise<IPackedDIDCommMessage>;
    unpack(publicKeyJWK: IJWK, packedContent: string): Promise<string>;
    unpackv2(publicKeyJWK: IJWK, jwe: any): Promise<string>;
    unpackvDIDCommV2(receiptDID: string, packedMessage: any | DIDCommPackedMessage): Promise<{
        message: DIDCommMessage;
        metaData: {
            packing: DIDCommMessagePacking;
        };
    }>;
    export(publicKeyJWK: IJWK): Promise<IKeyPair>;
    import(key: {
        publicKeyHex: string;
        secret: IKeyPair;
    }): Promise<void>;
    getPublicKeysBySuiteType(suite: Suite): Promise<IJWK[]>;
    getAllPublicKeys(): Promise<IJWK[]>;
}

{"version":3,"file":"base64.umd.min.js","sources":["lib/config.js","lib/from_buffer.js","lib/helper.js","lib/to_buffer.js","lib/browser.js","lib/nodejs.js","lib/index.js"],"sourcesContent":["export const baseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nexport const lookup = []\nexport const revLookup = []\nfor (let i = 0, len = baseChars.length; i < len; ++i) {\n    lookup[i] = baseChars[i]\n    revLookup[baseChars.charCodeAt(i)] = i\n}\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\nexport const ErrMsg = {\n    base64Invalidlength: 'Invalid string. Length must be a multiple of 4 and positive',\n    base64InvalidEqualPosition: 'Invalid base64 string, char \"=\" should not exists or at posiont >= 2',\n    encodeInvalidParam: 'Invalid value of parameter of encode(), should be string|number|bigint',\n    fromArrayBufferInvalidParam: 'Invalid input, should be ArrayBuffer or Uint8Array',\n    notString: 'Invalid value of parameter, should be string',\n    notValidB64String: 'Valid base64 string only matches /^[a-zA-Z0-9+/_-]+={0,2}$/',\n    notValidB64URLString: 'Valid URL-safe base64 string only matchs /^[a-zA-Z0-9_-]+$/',\n    notValidB64Length: 'Valid base64 string contains as least 4 chars',\n    notValidB64URLLength: 'Valid URL-safe base64 string contains as least 2 chars',\n    startMustGrossOrEqualToEnd: 'Parameters of start should less then or equal to end',\n    startMustGrossToEnd: 'Parameters of start should less then end',\n    textEncoderUndefined: 'TextEncoder undefined!',\n    textDecoderUndefined: 'TextDecoder undefined!',\n}\nexport const defaultConfig = {\n    forceBrowser: false,\n}\n","// rewrite from https://github.com/beatgammit/base64-js\nimport { lookup, ErrMsg } from './config'\nexport function fromUint8Array(input) {\n    /* tslint:disable: no-bitwise */\n    const len = input.length\n    const extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n    const len2 = len - extraBytes\n    const maxChunkLength = 12000 // must be multiple of 3\n    const parts = new Array(Math.ceil(len2 / maxChunkLength) + (extraBytes ? 1 : 0))\n    let curChunk = 0\n\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for (let i = 0, nextI = 0; i < len2; i = nextI) {\n        nextI = i + maxChunkLength\n        parts[curChunk] = encodeChunk(input, i, Math.min(nextI, len2))\n        curChunk += 1\n    }\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    if (extraBytes === 1) {\n        const tmp = input[len2] & 0xFF\n\n        parts[curChunk] = lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '=='\n    }\n    else if (extraBytes === 2) {\n        const tmp = (input[len2] & 0xFF) << 8 | (input[len2 + 1] & 0xFF)\n\n        parts[curChunk] = lookup[tmp >> 10] +\n            lookup[tmp >> 4 & 0x3F] +\n            lookup[tmp << 2 & 0x3F] +\n            '='\n    }\n    /* tslint:enable: no-bitwise */\n    return parts.join('')\n}\nfunction encodeChunk(input, start, end) {\n    if (start >= end) {\n        throw new Error(ErrMsg.startMustGrossToEnd)\n    }\n    const arrLen = Math.ceil((end - start) / 3)\n    const ret = new Array(arrLen)\n\n    /* tslint:disable: no-bitwise */\n    for (let i = start, curTriplet = 0; i < end; i += 3, curTriplet += 1) {\n        ret[curTriplet] = tripletToBase64((input[i] & 0xFF) << 16 |\n            (input[i + 1] & 0xFF) << 8 |\n            (input[i + 2] & 0xFF))\n    }\n    /* tslint:enable: no-bitwise */\n    return ret.join('')\n}\nfunction tripletToBase64(pos) {\n    /* tslint:disable: no-bitwise */\n    return lookup[pos >> 18 & 0x3F] +\n        lookup[pos >> 12 & 0x3F] +\n        lookup[pos >> 6 & 0x3F] +\n        lookup[pos & 0x3F]\n    /* tslint:enable: no-bitwise */\n}\n","import { ErrMsg } from './config'\nexport function parseEncodeInputString(input) {\n    const ret = typeof input === 'string'\n        ? input\n        // tslint:disable-next-line: valid-typeof\n        : (typeof input === 'number' || typeof input === 'bigint' ? input.toString() : null)\n\n    if (ret === null) {\n        throw new TypeError(ErrMsg.encodeInvalidParam)\n    }\n    return ret\n}\nexport function parseDecodeInputBase64(base64) {\n    if (typeof base64 !== 'string') {\n        throw new TypeError(ErrMsg.notString)\n    }\n    else if (!validB64Chars(base64)) {\n        throw new TypeError(ErrMsg.notValidB64String)\n    }\n    return base64\n}\nexport function parseTextEncoder(textEncoder) {\n    if (typeof textEncoder === 'function') {\n        return textEncoder\n    }\n    else if (typeof TextEncoder === 'function') {\n        return TextEncoder\n    }\n    else {\n        throw new TypeError(ErrMsg.textEncoderUndefined)\n    }\n}\nexport function parseTextDecoder(textDecoder) {\n    if (typeof textDecoder === 'function') {\n        return textDecoder\n    }\n    else if (typeof TextDecoder === 'function') {\n        return TextDecoder\n    }\n    else {\n        throw new TypeError(ErrMsg.textDecoderUndefined)\n    }\n}\n/** Whether string contains valid base64 characters */\nexport function validB64Chars(input) {\n    return /^[a-zA-Z0-9+/_-]+={0,2}$/.test(input)\n}\n/** Whether string contains valid URL-safe base64 characters */\nexport function validB64URLChars(input) {\n    return /^[a-zA-Z0-9_-]+$/.test(input)\n}\n/** Validate input is valid base64 string or throw error */\nexport function validateB64(input) {\n    const status = testB64(input)\n\n    if (status !== true) {\n        throw new Error(status)\n    }\n}\n/** Validate input is valid URL-safe base64 string or throw error */\nexport function validateB64URL(input) {\n    const status = testB64URL(input)\n\n    if (status !== true) {\n        throw new Error(status)\n    }\n}\n/** Return true for valid base64 input, error message for invalid */\nexport function testB64(input) {\n    if (typeof input !== 'string') {\n        return ErrMsg.notString\n    }\n    else if (!validB64Chars(input)) {\n        return ErrMsg.notValidB64String\n    }\n    else if (input.length < 4) {\n        return ErrMsg.notValidB64Length\n    }\n    else if (input.length % 4 !== 0) {\n        return ErrMsg.base64Invalidlength\n    }\n    return true\n}\n/** Return true for valid URL-safe base64 input,  error message for invalid */\nexport function testB64URL(input) {\n    if (typeof input !== 'string') {\n        return ErrMsg.notString\n    }\n    else if (!validB64URLChars(input)) {\n        return ErrMsg.notValidB64URLString\n    }\n    else if (input.length < 2) { // URL-safe at least 2\n        return ErrMsg.notValidB64URLLength\n    }\n    return true\n}\n/** Whether running in Node.js */\nexport function isRunningInNodejs() {\n    // Buffer exists under karma testing\n    /* istanbul ignore next */\n    return typeof process === 'object' && typeof Buffer === 'function' && typeof window === 'undefined'\n        ? true\n        : false\n}\n/** Whether input is instance of ArrayBuffer */\nexport function isArrayBuffer(buffer) {\n    return buffer && buffer instanceof ArrayBuffer ? true : false\n}\n/** Whether input is instance of Uint8Array */\nexport function isUint8Array(buffer) {\n    return ArrayBuffer.isView(buffer) && (buffer instanceof Uint8Array)\n        ? true\n        : false\n}\n/**\n * Convert base64 string to URL-safe base64 string.\n * Replace \"+\" to \"-\" and \"/\" to \"_\", and Remove \"=\"\n *\n * @see https://en.wikipedia.org/wiki/Base64#URL_applications\n */\nexport function b64toURLSafe(base64) {\n    validateB64(base64)\n    const pos = base64.indexOf('=')\n\n    return pos > 0\n        ? base64.slice(0, pos).replace(/\\+/g, '-').replace(/\\//g, '_')\n        : base64.replace(/\\+/g, '-').replace(/\\//g, '_')\n}\n/**\n * Convert URL-safe base64 string to base64 string.\n * Replace \"-\" to \"+\" and \"_\" to \"/\", and pad with \"=\"\n *\n * @see https://en.wikipedia.org/wiki/Base64#URL_applications\n */\nexport function b64fromURLSafe(base64) {\n    validateB64URL(base64)\n    const str = base64.replace(/-/g, '+').replace(/_/g, '/')\n\n    return b64PadSuffix(str)\n}\nexport function b64PadSuffix(input) {\n    let num = 0\n    const mo = input.length % 4\n\n    switch (mo) {\n        case 3:\n            num = 1\n            break\n        case 2:\n            num = 2\n            break\n        case 0:\n            num = 0\n            break\n        default:\n            throw new Error(ErrMsg.notValidB64URLLength)\n    }\n    return input + '='.repeat(num)\n}\n","// rewrite from https://github.com/beatgammit/base64-js\nimport { revLookup, ErrMsg } from './config'\nexport function toUint8Array(b64) {\n    /* tslint:disable: no-bitwise */\n    const lens = getLens(b64)\n    const validLen = lens[0]\n    const placeHoldersLen = lens[1]\n    const arr = new Uint8Array(_byteLength(validLen, placeHoldersLen))\n    let curByte = 0\n    // if there are placeholders, only get up to the last complete 4 chars\n    const len = placeHoldersLen\n        ? validLen - 4\n        : validLen\n    let i = 0\n\n    for (; i < len; i += 4) {\n        const tmp = revLookup[b64.charCodeAt(i)] << 18 |\n            revLookup[b64.charCodeAt(i + 1)] << 12 |\n            revLookup[b64.charCodeAt(i + 2)] << 6 |\n            revLookup[b64.charCodeAt(i + 3)]\n\n        arr[curByte++] = tmp >> 16 & 0xFF\n        arr[curByte++] = tmp >> 8 & 0xFF\n        arr[curByte++] = tmp & 0xFF\n    }\n    if (placeHoldersLen === 2) {\n        arr[curByte] = revLookup[b64.charCodeAt(i)] << 2 |\n            revLookup[b64.charCodeAt(i + 1)] >> 4\n    }\n    else if (placeHoldersLen === 1) {\n        const tmp = revLookup[b64.charCodeAt(i)] << 10 |\n            revLookup[b64.charCodeAt(i + 1)] << 4 |\n            revLookup[b64.charCodeAt(i + 2)] >> 2\n\n        arr[curByte++] = tmp >> 8 & 0xFF\n        arr[curByte] = tmp & 0xFF\n    }\n    /* tslint:enable: no-bitwise */\n    return arr\n}\nexport function getLens(input) {\n    /* tslint:disable: no-bitwise */\n    const len = input.length\n\n    if (len & 3 || len <= 0) {\n        throw new Error(ErrMsg.base64Invalidlength)\n    }\n    // Trim off extra bytes after placeholder bytes are found\n    // See: https://github.com/beatgammit/base64-js/issues/42\n    let validLen = input.indexOf('=')\n\n    if (validLen === -1) {\n        validLen = len\n    }\n    // 0 to 3 characters of padding so total length is a multiple of 4\n    const placeHoldersLen = 3 - ((validLen + 3) & 3)\n\n    /* tslint:enable: no-bitwise */\n    return [validLen, placeHoldersLen]\n}\nexport function _byteLength(validLen, placeHoldersLen) {\n    // tslint:disable-next-line: no-bitwise\n    return (((validLen + placeHoldersLen) * 3) >> 2) - placeHoldersLen\n}\n","import { ErrMsg, } from './config'\nimport { fromUint8Array } from './from_buffer'\nimport { isArrayBuffer, isUint8Array, parseDecodeInputBase64, parseEncodeInputString, parseTextDecoder, parseTextEncoder, } from './helper'\nimport { toUint8Array } from './to_buffer'\nexport function browserEncode(input, textEncoder) {\n    const str = parseEncodeInputString(input)\n    const Encoder = parseTextEncoder(textEncoder)\n    const u8arr = new Encoder().encode(str)\n    const ret = fromBuffer(u8arr)\n\n    return ret\n}\n/** Encode to base64, source from ArrayBuffer or Uint8Array */\nexport function fromBuffer(buf) {\n    let input\n\n    if (!buf) {\n        throw new TypeError(ErrMsg.fromArrayBufferInvalidParam)\n    }\n    else if (isUint8Array(buf)) {\n        input = buf\n    }\n    else if (isArrayBuffer(buf)) {\n        input = new Uint8Array(buf)\n    }\n    else {\n        throw new TypeError(ErrMsg.fromArrayBufferInvalidParam)\n    }\n    return fromUint8Array(input)\n}\nexport function browserDecode(base64, outputEncoding, textDecoder) {\n    const Decoder = parseTextDecoder(textDecoder)\n    const u8arr = toBuffer(base64)\n    const ret = new Decoder(outputEncoding).decode(u8arr)\n\n    return ret\n}\nexport function toBuffer(base64) {\n    const str = parseDecodeInputBase64(base64)\n    const u8arr = toUint8Array(str)\n\n    return u8arr\n}\n","import { ErrMsg } from './config'\nimport { isArrayBuffer, isUint8Array, parseDecodeInputBase64, parseEncodeInputString, } from './helper'\nexport function nodeEncode(input) {\n    const str = parseEncodeInputString(input)\n    const ret = Buffer.from(str).toString('base64')\n\n    return ret\n}\nexport function nodeDecode(base64, outputEncoding) {\n    const str = parseDecodeInputBase64(base64)\n    const ret = Buffer.from(str, 'base64').toString(outputEncoding)\n\n    return ret\n}\n/** Encode to base64, source from ArrayBuffer or Uint8Array */\nexport function fromBuffer(buf) {\n    let inst\n\n    if (!buf) {\n        throw new TypeError(ErrMsg.fromArrayBufferInvalidParam)\n    }\n    else if (isUint8Array(buf)) {\n        inst = Buffer.from(buf)\n    }\n    else if (isArrayBuffer(buf)) {\n        inst = Buffer.from(buf)\n    }\n    else {\n        throw new TypeError(ErrMsg.fromArrayBufferInvalidParam)\n    }\n    const ret = inst.toString('base64')\n\n    return ret\n}\n","import { browserDecode, browserEncode, fromBuffer as browserFromBuffer, } from './browser'\nimport { defaultConfig } from './config'\nimport { b64toURLSafe, b64PadSuffix, isRunningInNodejs } from './helper'\nimport { fromBuffer as nodeFromBuffer, nodeDecode, nodeEncode, } from './nodejs'\nimport { getLens, _byteLength } from './to_buffer'\n/** Encode to base64, source from string | number | bigint */\nexport function b64encode(input, textEncoder) {\n    const ret = isRunningInNodejs() && !defaultConfig.forceBrowser\n        ? nodeEncode(input)\n        : browserEncode(input, textEncoder)\n\n    return ret\n}\n/** Decode base64 to string */\nexport function b64decode(base64, outputEncoding = 'utf-8', textDecoder) {\n    const ret = isRunningInNodejs() && !defaultConfig.forceBrowser\n        ? nodeDecode(base64, outputEncoding)\n        : browserDecode(base64, outputEncoding, textDecoder)\n\n    return ret\n}\n/** Encode to base64, source from ArrayBuffer or Uint8Array */\nexport function b64fromBuffer(buffer) {\n    const ret = isRunningInNodejs() && !defaultConfig.forceBrowser\n        ? nodeFromBuffer(buffer)\n        : browserFromBuffer(buffer)\n\n    return ret\n}\n/**\n * Calculate buffer.byteLength from base64\n *\n * base64 is 4/3 + up to two characters of the original data\n */\nexport function b64byteLength(base64) {\n    const lens = getLens(base64)\n    const validLen = lens[0]\n    const placeHoldersLen = lens[1]\n\n    return _byteLength(validLen, placeHoldersLen)\n}\n/**\n * Encode to URL-safe base64, source from string | number | bigint.\n * Replace \"+\" to \"-\" and \"/\" to \"_\", and Remove \"=\".\n *\n * Note: using b64toURLSafe() for converting base64 string to URL-safe base64 string\n *\n * @see https://en.wikipedia.org/wiki/Base64#URL_applications\n */\nexport function b64urlEncode(input, textEncoder) {\n    const b64 = b64encode(input, textEncoder)\n\n    return b64toURLSafe(b64)\n}\n/**\n * Encode to URL-safe base64, source from ArrayBuffer or Uint8Array\n *\n * @see https://en.wikipedia.org/wiki/Base64#URL_applications\n */\nexport function b64urlFromBuffer(buffer) {\n    const b64 = b64fromBuffer(buffer)\n\n    return b64toURLSafe(b64)\n}\n/**\n * Decode URL-safe base64 to original string.\n *\n * Note: using b64fromURLSafe() for converting URL-safe base64 string to base64 string\n *\n * @see https://en.wikipedia.org/wiki/Base64#URL_applications\n */\nexport function b64urlDecode(input, outputEncoding = 'utf-8', textDecoder) {\n    const str = b64PadSuffix(input) // for URL-safe\n\n    return b64decode(str, outputEncoding, textDecoder)\n}\n"],"names":["baseChars","lookup","revLookup","i","len","length","charCodeAt","ErrMsg","base64Invalidlength","base64InvalidEqualPosition","encodeInvalidParam","fromArrayBufferInvalidParam","notString","notValidB64String","notValidB64URLString","notValidB64Length","notValidB64URLLength","startMustGrossOrEqualToEnd","startMustGrossToEnd","textEncoderUndefined","textDecoderUndefined","defaultConfig","forceBrowser","fromUint8Array","input","extraBytes","len2","maxChunkLength","parts","Array","Math","ceil","curChunk","nextI","encodeChunk","min","tmp","join","start","end","Error","arrLen","ret","curTriplet","tripletToBase64","pos","parseEncodeInputString","toString","TypeError","parseDecodeInputBase64","base64","validB64Chars","parseTextEncoder","textEncoder","TextEncoder","parseTextDecoder","textDecoder","TextDecoder","test","validB64URLChars","validateB64","status","testB64","validateB64URL","testB64URL","isRunningInNodejs","process","Buffer","window","isArrayBuffer","buffer","ArrayBuffer","isUint8Array","isView","Uint8Array","b64toURLSafe","indexOf","slice","replace","b64fromURLSafe","str","b64PadSuffix","num","mo","repeat","toUint8Array","b64","lens","getLens","validLen","placeHoldersLen","arr","_byteLength","curByte","browserEncode","Encoder","u8arr","encode","fromBuffer","buf","browserDecode","outputEncoding","Decoder","toBuffer","decode","nodeEncode","from","nodeDecode","inst","b64encode","b64decode","b64fromBuffer","nodeFromBuffer","browserFromBuffer","b64byteLength","b64urlEncode","b64urlFromBuffer","b64urlDecode"],"mappings":";;;;;;;;;;4MAAO,MAAMA,EAAY,mEACZC,EAAS,GACTC,EAAY,GACzB,IAAK,IAAIC,EAAI,EAAGC,EAAMJ,EAAUK,OAAQF,EAAIC,IAAOD,EAC/CF,EAAOE,GAAKH,EAAUG,GACtBD,EAAUF,EAAUM,WAAWH,IAAMA,EAIzCD,EAAU,IAAII,WAAW,IAAM,GAC/BJ,EAAU,IAAII,WAAW,IAAM,SAClBC,EAAS,CAClBC,oBAAqB,8DACrBC,2BAA4B,uEAC5BC,mBAAoB,yEACpBC,4BAA6B,qDAC7BC,UAAW,+CACXC,kBAAmB,8DACnBC,qBAAsB,8DACtBC,kBAAmB,gDACnBC,qBAAsB,yDACtBC,2BAA4B,uDAC5BC,oBAAqB,2CACrBC,qBAAsB,yBACtBC,qBAAsB,0BAEbC,EAAgB,CACzBC,cAAc,GCzBX,SAASC,EAAeC,GAE3B,MAAMpB,EAAMoB,EAAMnB,OACZoB,EAAarB,EAAM,EACnBsB,EAAOtB,EAAMqB,EACbE,EAAiB,KACjBC,EAAQ,IAAIC,MAAMC,KAAKC,KAAKL,EADX,OACqCD,EAAa,EAAI,IAC7E,IAAIO,EAAW,EAGf,IAAK,IAAI7B,EAAI,EAAG8B,EAAQ,EAAG9B,EAAIuB,EAAMvB,EAAI8B,EACrCA,EAAQ9B,EANW,KAOnByB,EAAMI,GAAYE,EAAYV,EAAOrB,EAAG2B,KAAKK,IAAIF,EAAOP,IACxDM,GAAY,EAGhB,GAAmB,IAAfP,EAAkB,CAClB,MAAMW,EAAoB,IAAdZ,EAAME,GAElBE,EAAMI,GAAY/B,EAAOmC,GAAO,GAAKnC,EAAOmC,GAAO,EAAI,IAAQ,UAE9D,GAAmB,IAAfX,EAAkB,CACvB,MAAMW,GAAqB,IAAdZ,EAAME,KAAiB,EAAuB,IAAlBF,EAAME,EAAO,GAEtDE,EAAMI,GAAY/B,EAAOmC,GAAO,IAC5BnC,EAAOmC,GAAO,EAAI,IAClBnC,EAAOmC,GAAO,EAAI,IAClB,IAGR,OAAOR,EAAMS,KAAK,IAEtB,SAASH,EAAYV,EAAOc,EAAOC,GAC/B,GAAID,GAASC,EACT,MAAM,IAAIC,MAAMjC,EAAOW,qBAE3B,MAAMuB,EAASX,KAAKC,MAAMQ,EAAMD,GAAS,GACnCI,EAAM,IAAIb,MAAMY,GAGtB,IAAK,IAAItC,EAAImC,EAAOK,EAAa,EAAGxC,EAAIoC,EAAKpC,GAAK,EAAGwC,GAAc,EAC/DD,EAAIC,GAAcC,GAA4B,IAAXpB,EAAMrB,KAAc,IACnC,IAAfqB,EAAMrB,EAAI,KAAc,EACT,IAAfqB,EAAMrB,EAAI,IAGnB,OAAOuC,EAAIL,KAAK,IAEpB,SAASO,EAAgBC,GAErB,OAAO5C,EAAO4C,GAAO,GAAK,IACtB5C,EAAO4C,GAAO,GAAK,IACnB5C,EAAO4C,GAAO,EAAI,IAClB5C,EAAa,GAAN4C,GCtDR,SAASC,EAAuBtB,GACnC,MAAMkB,EAAuB,iBAAVlB,EACbA,EAEkB,iBAAVA,GAAuC,iBAAVA,EAAqBA,EAAMuB,WAAa,KAEnF,GAAY,OAARL,EACA,MAAM,IAAIM,UAAUzC,EAAOG,oBAE/B,OAAOgC,EAEJ,SAASO,EAAuBC,GACnC,GAAsB,iBAAXA,EACP,MAAM,IAAIF,UAAUzC,EAAOK,WAE1B,IAAKuC,EAAcD,GACpB,MAAM,IAAIF,UAAUzC,EAAOM,mBAE/B,OAAOqC,EAEJ,SAASE,EAAiBC,GAC7B,GAA2B,mBAAhBA,EACP,OAAOA,EAEN,GAA2B,mBAAhBC,YACZ,OAAOA,YAGP,MAAM,IAAIN,UAAUzC,EAAOY,sBAG5B,SAASoC,EAAiBC,GAC7B,GAA2B,mBAAhBA,EACP,OAAOA,EAEN,GAA2B,mBAAhBC,YACZ,OAAOA,YAGP,MAAM,IAAIT,UAAUzC,EAAOa,sBAI5B,SAAS+B,EAAc3B,GAC1B,MAAO,4BAA2BkC,KAAKlC,GAGpC,SAASmC,EAAiBnC,GAC7B,MAAO,mBAAmBkC,KAAKlC,GAG5B,SAASoC,EAAYpC,GACxB,MAAMqC,EAASC,EAAQtC,GAEvB,IAAe,IAAXqC,EACA,MAAM,IAAIrB,MAAMqB,GAIjB,SAASE,EAAevC,GAC3B,MAAMqC,EAASG,EAAWxC,GAE1B,IAAe,IAAXqC,EACA,MAAM,IAAIrB,MAAMqB,GAIjB,SAASC,EAAQtC,GACpB,MAAqB,iBAAVA,EACAjB,EAAOK,UAERuC,EAAc3B,GAGfA,EAAMnB,OAAS,EACbE,EAAOQ,kBAETS,EAAMnB,OAAS,GAAM,GACnBE,EAAOC,oBANPD,EAAOM,kBAWf,SAASmD,EAAWxC,GACvB,MAAqB,iBAAVA,EACAjB,EAAOK,UAER+C,EAAiBnC,KAGlBA,EAAMnB,OAAS,IACbE,EAAOS,qBAHPT,EAAOO,qBAQf,SAASmD,IAGZ,MAA0B,iBAAZC,SAA0C,mBAAXC,QAA2C,oBAAXC,OAK1E,SAASC,EAAcC,GAC1B,SAAOA,GAAUA,aAAkBC,aAGhC,SAASC,EAAaF,GACzB,SAAOC,YAAYE,OAAOH,IAAYA,aAAkBI,YAUrD,SAASC,EAAazB,GACzBU,EAAYV,GACZ,MAAML,EAAMK,EAAO0B,QAAQ,KAE3B,OAAO/B,EAAM,EACPK,EAAO2B,MAAM,EAAGhC,GAAKiC,QAAQ,MAAO,KAAKA,QAAQ,MAAO,KACxD5B,EAAO4B,QAAQ,MAAO,KAAKA,QAAQ,MAAO,KAQ7C,SAASC,EAAe7B,GAC3Ba,EAAeb,GACf,MAAM8B,EAAM9B,EAAO4B,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAEpD,OAAOG,EAAaD,GAEjB,SAASC,EAAazD,GACzB,IAAI0D,EAAM,EACV,MAAMC,EAAK3D,EAAMnB,OAAS,EAE1B,OAAQ8E,GACJ,KAAK,EACDD,EAAM,EACN,MACJ,KAAK,EACDA,EAAM,EACN,MACJ,KAAK,EACDA,EAAM,EACN,MACJ,QACI,MAAM,IAAI1C,MAAMjC,EAAOS,sBAE/B,OAAOQ,EAAQ,IAAI4D,OAAOF,GC3JvB,SAASG,EAAaC,GAEzB,MAAMC,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GACvBI,EAAM,IAAIjB,WAAWkB,EAAYH,EAAUC,IACjD,IAAIG,EAAU,EAEd,MAAMzF,EAAMsF,EACND,EAAW,EACXA,EACN,IAAItF,EAAI,EAER,KAAOA,EAAIC,EAAKD,GAAK,EAAG,CACpB,MAAMiC,EAAMlC,EAAUoF,EAAIhF,WAAWH,KAAO,GACxCD,EAAUoF,EAAIhF,WAAWH,EAAI,KAAO,GACpCD,EAAUoF,EAAIhF,WAAWH,EAAI,KAAO,EACpCD,EAAUoF,EAAIhF,WAAWH,EAAI,IAEjCwF,EAAIE,KAAazD,GAAO,GAAK,IAC7BuD,EAAIE,KAAazD,GAAO,EAAI,IAC5BuD,EAAIE,KAAmB,IAANzD,EAErB,GAAwB,IAApBsD,EACAC,EAAIE,GAAW3F,EAAUoF,EAAIhF,WAAWH,KAAO,EAC3CD,EAAUoF,EAAIhF,WAAWH,EAAI,KAAO,OAEvC,GAAwB,IAApBuF,EAAuB,CAC5B,MAAMtD,EAAMlC,EAAUoF,EAAIhF,WAAWH,KAAO,GACxCD,EAAUoF,EAAIhF,WAAWH,EAAI,KAAO,EACpCD,EAAUoF,EAAIhF,WAAWH,EAAI,KAAO,EAExCwF,EAAIE,KAAazD,GAAO,EAAI,IAC5BuD,EAAIE,GAAiB,IAANzD,EAGnB,OAAOuD,EAEJ,SAASH,EAAQhE,GAEpB,MAAMpB,EAAMoB,EAAMnB,OAElB,GAAU,EAAND,GAAWA,GAAO,EAClB,MAAM,IAAIoC,MAAMjC,EAAOC,qBAI3B,IAAIiF,EAAWjE,EAAMoD,QAAQ,MAEX,IAAda,IACAA,EAAWrF,GAGf,MAAMsF,EAAkB,GAAMD,EAAW,EAAK,GAG9C,MAAO,CAACA,EAAUC,GAEf,SAASE,EAAYH,EAAUC,GAElC,OAAwC,GAA9BD,EAAWC,IAAyB,GAAKA,EC1DhD,SAASI,EAActE,EAAO6B,GACjC,MAAM2B,EAAMlC,EAAuBtB,GAC7BuE,EAAU3C,EAAiBC,GAC3B2C,GAAQ,IAAID,GAAUE,OAAOjB,GAC7BtC,EAAMwD,EAAWF,GAEvB,OAAOtD,EAGJ,SAASwD,EAAWC,GACvB,IAAI3E,EAEJ,IAAK2E,EACD,MAAM,IAAInD,UAAUzC,EAAOI,6BAE1B,GAAI6D,EAAa2B,GAClB3E,EAAQ2E,MAEP,CAAA,IAAI9B,EAAc8B,GAInB,MAAM,IAAInD,UAAUzC,EAAOI,6BAH3Ba,EAAQ,IAAIkD,WAAWyB,GAK3B,OAAO5E,EAAeC,GAEnB,SAAS4E,EAAclD,EAAQmD,EAAgB7C,GAClD,MAAM8C,EAAU/C,EAAiBC,GAC3BwC,EAAQO,EAASrD,GACjBR,EAAM,IAAI4D,EAAQD,GAAgBG,OAAOR,GAE/C,OAAOtD,EAEJ,SAAS6D,EAASrD,GACrB,MAAM8B,EAAM/B,EAAuBC,GAC7B8C,EAAQX,EAAaL,GAE3B,OAAOgB,ECvCJ,SAASS,EAAWjF,GACvB,MAAMwD,EAAMlC,EAAuBtB,GAC7BkB,EAAMyB,OAAOuC,KAAK1B,GAAKjC,SAAS,UAEtC,OAAOL,EAEJ,SAASiE,EAAWzD,EAAQmD,GAC/B,MAAMrB,EAAM/B,EAAuBC,GAC7BR,EAAMyB,OAAOuC,KAAK1B,EAAK,UAAUjC,SAASsD,GAEhD,OAAO3D,EAGJ,SAASwD,EAAWC,GACvB,IAAIS,EAEJ,IAAKT,EACD,MAAM,IAAInD,UAAUzC,EAAOI,6BAE1B,GAAI6D,EAAa2B,GAClBS,EAAOzC,OAAOuC,KAAKP,OAElB,CAAA,IAAI9B,EAAc8B,GAInB,MAAM,IAAInD,UAAUzC,EAAOI,6BAH3BiG,EAAOzC,OAAOuC,KAAKP,GAKvB,MAAMzD,EAAMkE,EAAK7D,SAAS,UAE1B,OAAOL,EC1BJ,SAASmE,EAAUrF,EAAO6B,GAC7B,MAAMX,EAAMuB,MAAwB5C,EAAcC,aAC5CmF,EAAWjF,GACXsE,EAActE,EAAO6B,GAE3B,OAAOX,EAGJ,SAASoE,EAAU5D,EAAQmD,EAAiB,QAAS7C,GACxD,MAAMd,EAAMuB,MAAwB5C,EAAcC,aAC5CqF,EAAWzD,EAAQmD,GACnBD,EAAclD,EAAQmD,EAAgB7C,GAE5C,OAAOd,EAGJ,SAASqE,EAAczC,GAC1B,MAAM5B,EAAMuB,MAAwB5C,EAAcC,aAC5C0F,EAAe1C,GACf2C,EAAkB3C,GAExB,OAAO5B,EAOJ,SAASwE,EAAchE,GAC1B,MAAMqC,EAAOC,EAAQtC,GACfuC,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAE7B,OAAOK,EAAYH,EAAUC,GAU1B,SAASyB,EAAa3F,EAAO6B,GAChC,MAAMiC,EAAMuB,EAAUrF,EAAO6B,GAE7B,OAAOsB,EAAaW,GAOjB,SAAS8B,EAAiB9C,GAC7B,MAAMgB,EAAMyB,EAAczC,GAE1B,OAAOK,EAAaW,GASjB,SAAS+B,EAAa7F,EAAO6E,EAAiB,QAAS7C,GAC1D,MAAMwB,EAAMC,EAAazD,GAEzB,OAAOsF,EAAU9B,EAAKqB,EAAgB7C"}
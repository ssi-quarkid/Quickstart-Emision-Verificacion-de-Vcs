"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const address_1 = require("../address/address");
var WalletImportFormatError;
(function (WalletImportFormatError) {
    WalletImportFormatError["incorrectLength"] = "The WIF private key payload is not the correct length.";
})(WalletImportFormatError = exports.WalletImportFormatError || (exports.WalletImportFormatError = {}));
/**
 * Encode a private key using Wallet Import Format (WIF).
 *
 * WIF encodes the 32-byte private key, a 4-byte checksum, and a `type`
 * indicating the intended usage for the private key. See
 * `WalletImportFormatType` for details.
 *
 * @remarks
 * WIF-encoding uses the Base58Address format with version
 * `Base58AddressFormatVersion.wif` (`128`/`0x80`) or
 * `Base58AddressFormatVersion.wifTestnet` (`239`/`0xef`), respectively.
 *
 * To indicate that the private key is intended for use in a P2PKH address using
 * the compressed form of its derived public key, a `0x01` is appended to the
 * payload prior to encoding. For the uncompressed construction, the extra byte
 * is omitted.
 *
 * @param sha256 - an implementation of sha256 (a universal implementation is
 * available via `instantiateSha256`)
 * @param privateKey - a 32-byte Secp256k1 ECDSA private key
 * @param type - the intended usage of the private key (e.g. `mainnet` or
 * `testnet`)
 */
exports.encodePrivateKeyWif = (sha256, privateKey, type) => {
    const compressedByte = 0x01;
    const mainnet = type === 'mainnet' || type === 'mainnet-uncompressed';
    const compressed = type === 'mainnet' || type === 'testnet';
    const payload = compressed
        ? Uint8Array.from([...privateKey, compressedByte])
        : privateKey;
    return address_1.encodeBase58AddressFormat(sha256, mainnet
        ? address_1.Base58AddressFormatVersion.wif
        : address_1.Base58AddressFormatVersion.wifTestnet, payload);
};
/**
 * Decode a private key using Wallet Import Format (WIF). See
 * `encodePrivateKeyWif` for details.
 *
 * @param sha256 - an implementation of sha256 (a universal implementation is
 * available via `instantiateSha256`)
 * @param wifKey - the private key to decode (in Wallet Import Format)
 */
// eslint-disable-next-line complexity
exports.decodePrivateKeyWif = (sha256, wifKey) => {
    const compressedPayloadLength = 33;
    const decoded = address_1.decodeBase58AddressFormat(sha256, wifKey);
    if (typeof decoded === 'string')
        return decoded;
    const mainnet = decoded.version === address_1.Base58AddressFormatVersion.wif;
    const compressed = decoded.payload.length === compressedPayloadLength;
    const privateKey = compressed
        ? decoded.payload.slice(0, -1)
        : decoded.payload;
    const type = mainnet
        ? compressed
            ? 'mainnet'
            : 'mainnet-uncompressed'
        : compressed
            ? 'testnet'
            : 'testnet-uncompressed';
    return { privateKey, type };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LWltcG9ydC1mb3JtYXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2tleS93YWxsZXQtaW1wb3J0LWZvcm1hdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGdEQUk0QjtBQUc1QixJQUFZLHVCQUVYO0FBRkQsV0FBWSx1QkFBdUI7SUFDakMscUdBQTBFLENBQUE7QUFDNUUsQ0FBQyxFQUZXLHVCQUF1QixHQUF2QiwrQkFBdUIsS0FBdkIsK0JBQXVCLFFBRWxDO0FBdUJEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBc0JHO0FBQ1UsUUFBQSxtQkFBbUIsR0FBRyxDQUNqQyxNQUFnQyxFQUNoQyxVQUFzQixFQUN0QixJQUE0QixFQUM1QixFQUFFO0lBQ0YsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDO0lBQzVCLE1BQU0sT0FBTyxHQUFHLElBQUksS0FBSyxTQUFTLElBQUksSUFBSSxLQUFLLHNCQUFzQixDQUFDO0lBQ3RFLE1BQU0sVUFBVSxHQUFHLElBQUksS0FBSyxTQUFTLElBQUksSUFBSSxLQUFLLFNBQVMsQ0FBQztJQUM1RCxNQUFNLE9BQU8sR0FBRyxVQUFVO1FBQ3hCLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDLFVBQVUsQ0FBQztJQUNmLE9BQU8sbUNBQXlCLENBQzlCLE1BQU0sRUFDTixPQUFPO1FBQ0wsQ0FBQyxDQUFDLG9DQUEwQixDQUFDLEdBQUc7UUFDaEMsQ0FBQyxDQUFDLG9DQUEwQixDQUFDLFVBQVUsRUFDekMsT0FBTyxDQUNSLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRjs7Ozs7OztHQU9HO0FBQ0gsc0NBQXNDO0FBQ3pCLFFBQUEsbUJBQW1CLEdBQUcsQ0FDakMsTUFBZ0MsRUFDaEMsTUFBYyxFQUNkLEVBQUU7SUFDRixNQUFNLHVCQUF1QixHQUFHLEVBQUUsQ0FBQztJQUNuQyxNQUFNLE9BQU8sR0FBRyxtQ0FBeUIsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDMUQsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRO1FBQUUsT0FBTyxPQUFPLENBQUM7SUFDaEQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sS0FBSyxvQ0FBMEIsQ0FBQyxHQUFHLENBQUM7SUFDbkUsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssdUJBQXVCLENBQUM7SUFDdEUsTUFBTSxVQUFVLEdBQUcsVUFBVTtRQUMzQixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO0lBRXBCLE1BQU0sSUFBSSxHQUEyQixPQUFPO1FBQzFDLENBQUMsQ0FBQyxVQUFVO1lBQ1YsQ0FBQyxDQUFDLFNBQVM7WUFDWCxDQUFDLENBQUMsc0JBQXNCO1FBQzFCLENBQUMsQ0FBQyxVQUFVO1lBQ1osQ0FBQyxDQUFDLFNBQVM7WUFDWCxDQUFDLENBQUMsc0JBQXNCLENBQUM7SUFFM0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUM5QixDQUFDLENBQUMifQ==
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const format_1 = require("../../../format/format");
const transaction_1 = require("../../../transaction");
var ConsensusBCH;
(function (ConsensusBCH) {
    ConsensusBCH[ConsensusBCH["schnorrSignatureLength"] = 64] = "schnorrSignatureLength";
})(ConsensusBCH = exports.ConsensusBCH || (exports.ConsensusBCH = {}));
exports.createTestAuthenticationProgramBCH = ({ lockingBytecode, satoshis = 0, sha256, unlockingBytecode, }) => {
    const testFundingTransaction = {
        inputs: [
            {
                outpointIndex: 0xffffffff,
                outpointTransactionHash: format_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                sequenceNumber: 0xffffffff,
                unlockingBytecode: Uint8Array.of(0, 0),
            },
        ],
        locktime: 0,
        outputs: [{ lockingBytecode, satoshis }],
        version: 1,
    };
    const testSpendingTransaction = {
        inputs: [
            {
                outpointIndex: 0,
                outpointTransactionHash: format_1.hexToBin(format_1.swapEndianness(transaction_1.getBitcoinTransactionId(transaction_1.serializeTransaction(testFundingTransaction), sha256))),
                sequenceNumber: 0xffffffff,
                unlockingBytecode,
            },
        ],
        locktime: 0,
        outputs: [{ lockingBytecode: Uint8Array.of(), satoshis }],
        version: 1,
    };
    return {
        inputIndex: 0,
        sourceOutput: testFundingTransaction.outputs[0],
        spendingTransaction: testSpendingTransaction,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmNoLXR5cGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9hdXRoL2luc3RydWN0aW9uLXNldHMvYmNoL2JjaC10eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLG1EQUFrRTtBQUNsRSxzREFJOEI7QUFTOUIsSUFBWSxZQUVYO0FBRkQsV0FBWSxZQUFZO0lBQ3RCLG9GQUEyQixDQUFBO0FBQzdCLENBQUMsRUFGVyxZQUFZLEdBQVosb0JBQVksS0FBWixvQkFBWSxRQUV2QjtBQVlZLFFBQUEsa0NBQWtDLEdBQUcsQ0FBQyxFQUNqRCxlQUFlLEVBQ2YsUUFBUSxHQUFHLENBQUMsRUFDWixNQUFNLEVBQ04saUJBQWlCLEdBTWxCLEVBQUUsRUFBRTtJQUNILE1BQU0sc0JBQXNCLEdBQWdCO1FBQzFDLE1BQU0sRUFBRTtZQUNOO2dCQUNFLGFBQWEsRUFBRSxVQUFVO2dCQUN6Qix1QkFBdUIsRUFBRSxpQkFBUSxDQUMvQixrRUFBa0UsQ0FDbkU7Z0JBQ0QsY0FBYyxFQUFFLFVBQVU7Z0JBQzFCLGlCQUFpQixFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUN2QztTQUNGO1FBQ0QsUUFBUSxFQUFFLENBQUM7UUFDWCxPQUFPLEVBQUUsQ0FBQyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsQ0FBQztRQUN4QyxPQUFPLEVBQUUsQ0FBQztLQUNYLENBQUM7SUFDRixNQUFNLHVCQUF1QixHQUFnQjtRQUMzQyxNQUFNLEVBQUU7WUFDTjtnQkFDRSxhQUFhLEVBQUUsQ0FBQztnQkFDaEIsdUJBQXVCLEVBQUUsaUJBQVEsQ0FDL0IsdUJBQWMsQ0FDWixxQ0FBdUIsQ0FDckIsa0NBQW9CLENBQUMsc0JBQXNCLENBQUMsRUFDNUMsTUFBTSxDQUNQLENBQ0YsQ0FDRjtnQkFDRCxjQUFjLEVBQUUsVUFBVTtnQkFDMUIsaUJBQWlCO2FBQ2xCO1NBQ0Y7UUFDRCxRQUFRLEVBQUUsQ0FBQztRQUNYLE9BQU8sRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFLFVBQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQztRQUN6RCxPQUFPLEVBQUUsQ0FBQztLQUNYLENBQUM7SUFDRixPQUFPO1FBQ0wsVUFBVSxFQUFFLENBQUM7UUFDYixZQUFZLEVBQUUsc0JBQXNCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMvQyxtQkFBbUIsRUFBRSx1QkFBdUI7S0FDN0MsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9
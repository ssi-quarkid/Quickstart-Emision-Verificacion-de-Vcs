import { AuthenticationProgramStateCommon, ErrorState, ExecutionStackState, StackState } from '../../state';
import { Operation } from '../../virtual-machine';
import { AuthenticationErrorCommon } from './errors';
import { OpcodesCommon } from './opcodes';
export declare const opVerify: <State extends StackState<Uint8Array> & ErrorState<Errors, AuthenticationErrorCommon>, Errors>() => Operation<State>;
export declare const reservedOperation: <State extends ErrorState<Errors, AuthenticationErrorCommon>, Errors>() => (state: State) => State;
export declare const opReturn: <State extends ErrorState<Errors, AuthenticationErrorCommon>, Errors>() => (state: State) => State;
export declare const conditionalFlowControlOperations: <Opcodes, State extends AuthenticationProgramStateCommon<Opcodes, Errors>, Errors>() => {
    80: (state: State) => State;
    98: (state: State) => State;
    105: Operation<State>;
    106: (state: State) => State;
    137: (state: State) => State;
    138: (state: State) => State;
};
export declare const opIf: <State extends StackState<Uint8Array> & ExecutionStackState & ErrorState<Errors, AuthenticationErrorCommon>, Errors>() => Operation<State>;
export declare const opNotIf: <State extends StackState<Uint8Array> & ExecutionStackState & ErrorState<Errors, AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => Operation<State>;
export declare const opEndIf: <State extends ExecutionStackState & ErrorState<Errors, AuthenticationErrorCommon>, Errors>() => Operation<State>;
export declare const opElse: <State extends ExecutionStackState & ErrorState<Errors, AuthenticationErrorCommon>, Errors>() => Operation<State>;
export declare const unconditionalFlowControlOperations: <Opcodes, State extends AuthenticationProgramStateCommon<Opcodes, Errors>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => {
    99: Operation<State>;
    100: Operation<State>;
    101: (state: State) => State;
    102: (state: State) => State;
    103: Operation<State>;
    104: Operation<State>;
};
//# sourceMappingURL=flow-control.d.ts.map
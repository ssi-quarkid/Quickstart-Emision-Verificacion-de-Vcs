"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hex_1 = require("../../../format/hex");
const combinators_1 = require("../common/combinators");
const common_1 = require("../common/common");
const encoding_1 = require("../common/encoding");
const errors_1 = require("../common/errors");
const flow_control_1 = require("../common/flow-control");
const types_1 = require("../common/types");
const bch_errors_1 = require("./bch-errors");
const bch_opcodes_1 = require("./bch-opcodes");
const bch_types_1 = require("./bch-types");
exports.opCat = () => (state) => combinators_1.useTwoStackItems(state, (nextState, [a, b]) => a.length + b.length > common_1.ConsensusCommon.maximumStackItemLength
    ? errors_1.applyError(bch_errors_1.AuthenticationErrorBCH.exceededMaximumStackItemLength, nextState)
    : combinators_1.pushToStack(nextState, hex_1.flattenBinArray([a, b])));
exports.opSplit = ({ requireMinimalEncoding, }) => (state) => combinators_1.useOneScriptNumber(state, (nextState, value) => {
    const index = Number(value);
    return combinators_1.useOneStackItem(nextState, (finalState, [item]) => index < 0 || index > item.length
        ? errors_1.applyError(bch_errors_1.AuthenticationErrorBCH.invalidSplitIndex, finalState)
        : combinators_1.pushToStack(finalState, item.slice(0, index), item.slice(index)));
}, { requireMinimalEncoding });
var Constants;
(function (Constants) {
    Constants[Constants["positiveSign"] = 0] = "positiveSign";
    Constants[Constants["negativeSign"] = 128] = "negativeSign";
})(Constants || (Constants = {}));
exports.padMinimallyEncodedScriptNumber = (scriptNumber, length) => {
    // eslint-disable-next-line functional/no-let
    let signBit = Constants.positiveSign;
    // eslint-disable-next-line functional/no-conditional-statement
    if (scriptNumber.length > 0) {
        // eslint-disable-next-line functional/no-expression-statement, no-bitwise
        signBit = scriptNumber[scriptNumber.length - 1] & Constants.negativeSign;
        // eslint-disable-next-line functional/no-expression-statement, no-bitwise, functional/immutable-data
        scriptNumber[scriptNumber.length - 1] &= Constants.negativeSign - 1;
    }
    const result = Array.from(scriptNumber);
    // eslint-disable-next-line functional/no-loop-statement
    while (result.length < length - 1) {
        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
        result.push(0);
    }
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    result.push(signBit);
    return Uint8Array.from(result);
};
exports.opNum2Bin = () => (state) => combinators_1.useOneScriptNumber(state, (nextState, value) => {
    const targetLength = Number(value);
    return targetLength > common_1.ConsensusCommon.maximumStackItemLength
        ? errors_1.applyError(bch_errors_1.AuthenticationErrorBCH.exceededMaximumStackItemLength, nextState)
        : combinators_1.useOneScriptNumber(nextState, (finalState, [target]) => {
            const minimallyEncoded = types_1.bigIntToScriptNumber(target);
            return minimallyEncoded.length > targetLength
                ? errors_1.applyError(bch_errors_1.AuthenticationErrorBCH.insufficientLength, finalState)
                : minimallyEncoded.length === targetLength
                    ? combinators_1.pushToStack(finalState, minimallyEncoded)
                    : combinators_1.pushToStack(finalState, exports.padMinimallyEncodedScriptNumber(minimallyEncoded, targetLength));
        }, {
            maximumScriptNumberByteLength: 
            // TODO: is this right?
            common_1.ConsensusCommon.maximumStackItemLength,
            requireMinimalEncoding: false,
        });
}, { requireMinimalEncoding: true });
exports.opBin2Num = () => (state) => combinators_1.useOneScriptNumber(state, (nextState, [target]) => {
    const minimallyEncoded = types_1.bigIntToScriptNumber(target);
    return minimallyEncoded.length > common_1.ConsensusCommon.maximumScriptNumberLength
        ? errors_1.applyError(bch_errors_1.AuthenticationErrorBCH.exceededMaximumScriptNumberLength, nextState)
        : combinators_1.pushToStack(nextState, minimallyEncoded);
}, {
    // TODO: is this right?
    maximumScriptNumberByteLength: common_1.ConsensusCommon.maximumStackItemLength,
    requireMinimalEncoding: false,
});
exports.bitwiseOperation = (combine) => (state) => combinators_1.useTwoStackItems(state, (nextState, [a, b]) => a.length === b.length
    ? combinators_1.pushToStack(nextState, combine(a, b))
    : errors_1.applyError(bch_errors_1.AuthenticationErrorBCH.mismatchedBitwiseOperandLength, nextState));
exports.opAnd = () => exports.bitwiseOperation((a, b) => a.map((v, i) => v & b[i]));
exports.opOr = () => exports.bitwiseOperation((a, b) => a.map((v, i) => v | b[i]));
exports.opXor = () => exports.bitwiseOperation((a, b) => a.map((v, i) => v ^ b[i]));
exports.opDiv = ({ requireMinimalEncoding, }) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, [a, b]) => b === BigInt(0)
    ? errors_1.applyError(bch_errors_1.AuthenticationErrorBCH.divisionByZero, nextState)
    : combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(a / b)), { requireMinimalEncoding });
exports.opMod = ({ requireMinimalEncoding, }) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, [a, b]) => b === BigInt(0)
    ? errors_1.applyError(bch_errors_1.AuthenticationErrorBCH.divisionByZero, nextState)
    : combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(a % b)), { requireMinimalEncoding });
/**
 * Validate the encoding of a raw signature â€“ a signature without a signing
 * serialization type byte (A.K.A. "sighash" byte).
 *
 * @param signature - the raw signature
 */
exports.isValidSignatureEncodingBCHRaw = (signature) => signature.length === 0 ||
    signature.length === bch_types_1.ConsensusBCH.schnorrSignatureLength ||
    encoding_1.isValidSignatureEncodingDER(signature);
exports.opCheckDataSig = ({ secp256k1, sha256, }) => (state) => 
// eslint-disable-next-line complexity
combinators_1.useThreeStackItems(state, (nextState, [signature, message, publicKey]) => {
    if (!exports.isValidSignatureEncodingBCHRaw(signature)) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.invalidSignatureEncoding, nextState);
    }
    if (!encoding_1.isValidPublicKeyEncoding(publicKey)) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.invalidPublicKeyEncoding, nextState);
    }
    const digest = sha256.hash(message);
    const useSchnorr = signature.length === bch_types_1.ConsensusBCH.schnorrSignatureLength;
    const success = useSchnorr
        ? secp256k1.verifySignatureSchnorr(signature, publicKey, digest)
        : secp256k1.verifySignatureDERLowS(signature, publicKey, digest);
    return !success && signature.length !== 0
        ? errors_1.applyError(errors_1.AuthenticationErrorCommon.nonNullSignatureFailure, nextState)
        : combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(success));
});
exports.opCheckDataSigVerify = ({ secp256k1, sha256, }) => combinators_1.combineOperations(exports.opCheckDataSig({ secp256k1, sha256 }), flow_control_1.opVerify());
exports.bitcoinCashOperations = ({ flags, secp256k1, sha256, }) => ({
    [bch_opcodes_1.OpcodesBCH.OP_CAT]: exports.opCat(),
    [bch_opcodes_1.OpcodesBCH.OP_SPLIT]: exports.opSplit(flags),
    [bch_opcodes_1.OpcodesBCH.OP_NUM2BIN]: exports.opNum2Bin(),
    [bch_opcodes_1.OpcodesBCH.OP_BIN2NUM]: exports.opBin2Num(),
    [bch_opcodes_1.OpcodesBCH.OP_AND]: exports.opAnd(),
    [bch_opcodes_1.OpcodesBCH.OP_OR]: exports.opOr(),
    [bch_opcodes_1.OpcodesBCH.OP_XOR]: exports.opXor(),
    [bch_opcodes_1.OpcodesBCH.OP_DIV]: exports.opDiv(flags),
    [bch_opcodes_1.OpcodesBCH.OP_MOD]: exports.opMod(flags),
    [bch_opcodes_1.OpcodesBCH.OP_CHECKDATASIG]: exports.opCheckDataSig({
        secp256k1,
        sha256,
    }),
    [bch_opcodes_1.OpcodesBCH.OP_CHECKDATASIGVERIFY]: exports.opCheckDataSigVerify({ secp256k1, sha256 }),
});
//# sourceMappingURL=data:application/json;base64,
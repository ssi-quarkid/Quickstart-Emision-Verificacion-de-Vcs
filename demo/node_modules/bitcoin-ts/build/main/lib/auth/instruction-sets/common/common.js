"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const transaction_1 = require("../../../transaction");
const arithmetic_1 = require("./arithmetic");
const bitwise_1 = require("./bitwise");
const combinators_1 = require("./combinators");
const crypto_1 = require("./crypto");
const errors_1 = require("./errors");
const flow_control_1 = require("./flow-control");
const nop_1 = require("./nop");
const opcodes_1 = require("./opcodes");
const push_1 = require("./push");
const splice_1 = require("./splice");
const stack_1 = require("./stack");
const time_1 = require("./time");
__export(require("./arithmetic"));
__export(require("./bitwise"));
__export(require("./combinators"));
__export(require("./crypto"));
__export(require("./descriptions"));
__export(require("./encoding"));
__export(require("./errors"));
__export(require("./flow-control"));
__export(require("./nop"));
__export(require("./opcodes"));
__export(require("./push"));
__export(require("./signing-serialization"));
__export(require("./splice"));
__export(require("./stack"));
__export(require("./time"));
__export(require("./types"));
var ConsensusCommon;
(function (ConsensusCommon) {
    /**
     * A.K.A. `MAX_SCRIPT_ELEMENT_SIZE`
     */
    ConsensusCommon[ConsensusCommon["maximumStackItemLength"] = 520] = "maximumStackItemLength";
    ConsensusCommon[ConsensusCommon["maximumScriptNumberLength"] = 4] = "maximumScriptNumberLength";
    /**
     * A.K.A. `MAX_OPS_PER_SCRIPT`
     */
    ConsensusCommon[ConsensusCommon["maximumOperationCount"] = 201] = "maximumOperationCount";
    /**
     * A.K.A. `MAX_SCRIPT_SIZE`
     */
    ConsensusCommon[ConsensusCommon["maximumBytecodeLength"] = 10000] = "maximumBytecodeLength";
    /**
     * A.K.A. `MAX_STACK_SIZE`
     */
    ConsensusCommon[ConsensusCommon["maximumStackDepth"] = 1000] = "maximumStackDepth";
})(ConsensusCommon = exports.ConsensusCommon || (exports.ConsensusCommon = {}));
exports.undefinedOperation = () => ({
    undefined: combinators_1.conditionallyEvaluate((state) => errors_1.applyError(errors_1.AuthenticationErrorCommon.unknownOpcode, state)),
});
exports.checkLimitsCommon = (operation) => (state) => {
    const nextState = operation(state);
    return nextState.stack.length + nextState.alternateStack.length >
        ConsensusCommon.maximumStackDepth
        ? errors_1.applyError(errors_1.AuthenticationErrorCommon.exceededMaximumStackDepth, nextState)
        : nextState.operationCount > ConsensusCommon.maximumOperationCount
            ? errors_1.applyError(errors_1.AuthenticationErrorCommon.exceededMaximumOperationCount, nextState)
            : nextState;
};
exports.commonOperations = ({ flags, ripemd160, secp256k1, sha1, sha256, }) => {
    const unconditionalOperations = Object.assign(Object.assign(Object.assign({}, nop_1.disabledOperations()), push_1.pushOperations(flags)), combinators_1.mapOverOperations(flow_control_1.unconditionalFlowControlOperations(flags), combinators_1.incrementOperationCount));
    const conditionalOperations = combinators_1.mapOverOperations(Object.assign(Object.assign({}, push_1.pushNumberOperations()), { [opcodes_1.OpcodesCommon.OP_RESERVED]: flow_control_1.reservedOperation() }), combinators_1.conditionallyEvaluate);
    const incrementingOperations = combinators_1.mapOverOperations(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, arithmetic_1.arithmeticOperations(flags)), bitwise_1.bitwiseOperations()), crypto_1.cryptoOperations({
        flags,
        ripemd160,
        secp256k1,
        sha1,
        sha256,
    })), flow_control_1.conditionalFlowControlOperations()), stack_1.stackOperations(flags)), splice_1.spliceOperations()), time_1.timeOperations(flags)), nop_1.nonOperations(flags)), combinators_1.conditionallyEvaluate, combinators_1.incrementOperationCount);
    return combinators_1.mapOverOperations(Object.assign(Object.assign(Object.assign({}, unconditionalOperations), incrementingOperations), conditionalOperations), exports.checkLimitsCommon);
};
exports.cloneStack = (stack) => stack.reduce((newStack, element) => {
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    newStack.push(element.slice());
    return newStack;
}, []);
exports.createAuthenticationProgramInternalStateCommon = (instructions, stack = []) => ({
    alternateStack: [],
    executionStack: [],
    instructions,
    ip: 0,
    lastCodeSeparator: -1,
    operationCount: 0,
    signatureOperationsCount: 0,
    stack,
});
exports.createAuthenticationProgramExternalStateCommon = (program) => ({
    correspondingOutput: program.inputIndex < program.spendingTransaction.outputs.length
        ? transaction_1.serializeOutput(program.spendingTransaction.outputs[program.inputIndex])
        : undefined,
    locktime: program.spendingTransaction.locktime,
    outpointIndex: program.spendingTransaction.inputs[program.inputIndex].outpointIndex,
    outpointTransactionHash: program.spendingTransaction.inputs[program.inputIndex]
        .outpointTransactionHash,
    outputValue: program.sourceOutput.satoshis,
    sequenceNumber: program.spendingTransaction.inputs[program.inputIndex].sequenceNumber,
    transactionOutpoints: transaction_1.serializeOutpoints(program.spendingTransaction.inputs),
    transactionOutputs: transaction_1.serializeOutputsForSigning(program.spendingTransaction.outputs),
    transactionSequenceNumbers: transaction_1.serializeSequenceNumbers(program.spendingTransaction.inputs),
    version: program.spendingTransaction.version,
});
exports.createAuthenticationProgramStateCommon = (instructions, stack, externalState) => (Object.assign(Object.assign({}, exports.createAuthenticationProgramInternalStateCommon(instructions, stack)), externalState));
exports.cloneAuthenticationProgramStateCommon = (state) => (Object.assign(Object.assign({}, (state.error === undefined ? {} : { error: state.error })), { alternateStack: state.alternateStack.slice(), correspondingOutput: state.correspondingOutput, executionStack: state.executionStack.slice(), instructions: state.instructions.slice(), ip: state.ip, lastCodeSeparator: state.lastCodeSeparator, locktime: state.locktime, operationCount: state.operationCount, outpointIndex: state.outpointIndex, outpointTransactionHash: state.outpointTransactionHash.slice(), outputValue: state.outputValue, sequenceNumber: state.sequenceNumber, signatureOperationsCount: state.signatureOperationsCount, stack: state.stack.slice(), transactionOutpoints: state.transactionOutpoints, transactionOutputs: state.transactionOutputs, transactionSequenceNumbers: state.transactionSequenceNumbers, version: state.version }));
/**
 * This is a meaningless but complete `CommonExternalProgramState`, useful for
 * testing and debugging.
 */
exports.createAuthenticationProgramExternalStateCommonEmpty = () => ({
    correspondingOutput: Uint8Array.of(1 /* correspondingOutput */),
    locktime: 0,
    outpointIndex: 0,
    outpointTransactionHash: new Uint8Array(32 /* length */).fill(5 /* outpointTransactionHash */),
    outputValue: 0,
    sequenceNumber: 0,
    transactionOutpoints: Uint8Array.of(2 /* transactionOutpoints */),
    transactionOutputs: Uint8Array.of(3 /* transactionOutputs */),
    transactionSequenceNumbers: Uint8Array.of(4 /* transactionSequenceNumbers */),
    version: 0,
});
/**
 * Create an "empty" CommonProgramState, suitable for testing a VM/compiler.
 */
exports.createAuthenticationProgramStateCommonEmpty = (instructions, stack = []) => (Object.assign(Object.assign({}, exports.createAuthenticationProgramInternalStateCommon(instructions, stack)), exports.createAuthenticationProgramExternalStateCommonEmpty()));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9hdXRoL2luc3RydWN0aW9uLXNldHMvY29tbW9uL2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNEQUs4QjtBQWM5Qiw2Q0FBb0Q7QUFDcEQsdUNBQThDO0FBQzlDLCtDQUl1QjtBQUN2QixxQ0FBZ0Y7QUFDaEYscUNBQWlFO0FBQ2pFLGlEQUl3QjtBQUN4QiwrQkFBMEQ7QUFDMUQsdUNBQTBDO0FBQzFDLGlDQUE4RDtBQUM5RCxxQ0FBNEM7QUFDNUMsbUNBQTBDO0FBQzFDLGlDQUF3QztBQUV4QyxrQ0FBNkI7QUFDN0IsK0JBQTBCO0FBQzFCLG1DQUE4QjtBQUM5Qiw4QkFBeUI7QUFDekIsb0NBQStCO0FBQy9CLGdDQUEyQjtBQUMzQiw4QkFBeUI7QUFDekIsb0NBQStCO0FBQy9CLDJCQUFzQjtBQUN0QiwrQkFBMEI7QUFDMUIsNEJBQXVCO0FBQ3ZCLDZDQUF3QztBQUN4Qyw4QkFBeUI7QUFDekIsNkJBQXdCO0FBQ3hCLDRCQUF1QjtBQUN2Qiw2QkFBd0I7QUFFeEIsSUFBWSxlQWtCWDtBQWxCRCxXQUFZLGVBQWU7SUFDekI7O09BRUc7SUFDSCwyRkFBNEIsQ0FBQTtJQUM1QiwrRkFBNkIsQ0FBQTtJQUM3Qjs7T0FFRztJQUNILHlGQUEyQixDQUFBO0lBQzNCOztPQUVHO0lBQ0gsMkZBQTZCLENBQUE7SUFDN0I7O09BRUc7SUFDSCxrRkFBd0IsQ0FBQTtBQUMxQixDQUFDLEVBbEJXLGVBQWUsR0FBZix1QkFBZSxLQUFmLHVCQUFlLFFBa0IxQjtBQUVZLFFBQUEsa0JBQWtCLEdBQUcsR0FHOUIsRUFBRSxDQUFDLENBQUM7SUFDTixTQUFTLEVBQUUsbUNBQXFCLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUNoRCxtQkFBVSxDQUFnQixrQ0FBeUIsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQzFFO0NBQ0Ys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
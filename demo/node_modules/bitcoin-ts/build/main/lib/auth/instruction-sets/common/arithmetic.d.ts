import { AuthenticationProgramStateCommon, ErrorState, StackState } from '../../state';
import { OpcodesCommon } from './opcodes';
export declare const op1Add: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const op1Sub: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opNegate: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opAbs: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opNot: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const op0NotEqual: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opAdd: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opSub: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opBoolAnd: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opBoolOr: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opNumEqual: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opNumEqualVerify: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opNumNotEqual: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opLessThan: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opLessThanOrEqual: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opGreaterThan: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opGreaterThanOrEqual: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opMin: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opMax: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opWithin: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const arithmeticOperations: <Opcodes, State extends AuthenticationProgramStateCommon<Opcodes, Errors>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => {
    139: (state: State) => State;
    140: (state: State) => State;
    143: (state: State) => State;
    144: (state: State) => State;
    145: (state: State) => State;
    146: (state: State) => State;
    147: (state: State) => State;
    148: (state: State) => State;
    154: (state: State) => State;
    155: (state: State) => State;
    156: (state: State) => State;
    157: (state: State) => State;
    158: (state: State) => State;
    159: (state: State) => State;
    161: (state: State) => State;
    160: (state: State) => State;
    162: (state: State) => State;
    163: (state: State) => State;
    164: (state: State) => State;
    165: (state: State) => State;
};
//# sourceMappingURL=arithmetic.d.ts.map
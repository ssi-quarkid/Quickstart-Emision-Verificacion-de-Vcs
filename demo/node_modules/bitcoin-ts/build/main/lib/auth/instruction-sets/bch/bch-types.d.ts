import { Transaction } from '../../../transaction';
import { AuthenticationProgramCommon, AuthenticationProgramStateCommon } from '../../state';
import { AuthenticationErrorBCH } from './bch-errors';
import { OpcodesBCH } from './bch-opcodes';
export declare enum ConsensusBCH {
    schnorrSignatureLength = 64
}
export interface AuthenticationProgramBCH extends AuthenticationProgramCommon {
}
export interface AuthenticationProgramStateBCH extends AuthenticationProgramStateCommon<OpcodesBCH, AuthenticationErrorBCH> {
}
export declare const createTestAuthenticationProgramBCH: ({ lockingBytecode, satoshis, sha256, unlockingBytecode, }: {
    unlockingBytecode: Uint8Array;
    lockingBytecode: Uint8Array;
    sha256: {
        hash: (input: Uint8Array) => Uint8Array;
    };
    satoshis: number;
}) => {
    inputIndex: number;
    sourceOutput: import("../../../transaction").Output<Uint8Array, number>;
    spendingTransaction: Transaction<import("../../../transaction").Input<Uint8Array, Uint8Array>, import("../../../transaction").Output<Uint8Array, number>>;
};
//# sourceMappingURL=bch-types.d.ts.map
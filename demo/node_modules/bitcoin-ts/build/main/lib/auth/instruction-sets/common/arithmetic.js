"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const combinators_1 = require("./combinators");
const flow_control_1 = require("./flow-control");
const opcodes_1 = require("./opcodes");
const types_1 = require("./types");
exports.op1Add = ({ requireMinimalEncoding, }) => (state) => combinators_1.useOneScriptNumber(state, (nextState, [value]) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(value + BigInt(1))), { requireMinimalEncoding });
exports.op1Sub = ({ requireMinimalEncoding, }) => (state) => combinators_1.useOneScriptNumber(state, (nextState, [value]) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(value - BigInt(1))), { requireMinimalEncoding });
exports.opNegate = ({ requireMinimalEncoding, }) => (state) => combinators_1.useOneScriptNumber(state, (nextState, [value]) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(-value)), { requireMinimalEncoding });
exports.opAbs = ({ requireMinimalEncoding, }) => (state) => combinators_1.useOneScriptNumber(state, (nextState, [value]) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(value < 0 ? -value : value)), { requireMinimalEncoding });
exports.opNot = ({ requireMinimalEncoding, }) => (state) => combinators_1.useOneScriptNumber(state, (nextState, [value]) => combinators_1.pushToStack(nextState, value === BigInt(0)
    ? types_1.bigIntToScriptNumber(BigInt(1))
    : types_1.bigIntToScriptNumber(BigInt(0))), { requireMinimalEncoding });
exports.op0NotEqual = ({ requireMinimalEncoding, }) => (state) => combinators_1.useOneScriptNumber(state, (nextState, [value]) => combinators_1.pushToStack(nextState, value === BigInt(0)
    ? types_1.bigIntToScriptNumber(BigInt(0))
    : types_1.bigIntToScriptNumber(BigInt(1))), { requireMinimalEncoding });
exports.opAdd = ({ requireMinimalEncoding, }) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, [firstValue, secondValue]) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(firstValue + secondValue)), { requireMinimalEncoding });
exports.opSub = ({ requireMinimalEncoding, }) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, [firstValue, secondValue]) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(firstValue - secondValue)), { requireMinimalEncoding });
exports.opBoolAnd = ({ requireMinimalEncoding, }) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, [firstValue, secondValue]) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue !== BigInt(0) && secondValue !== BigInt(0))), { requireMinimalEncoding });
exports.opBoolOr = ({ requireMinimalEncoding, }) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, [firstValue, secondValue]) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue !== BigInt(0) || secondValue !== BigInt(0))), { requireMinimalEncoding });
exports.opNumEqual = ({ requireMinimalEncoding, }) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, [firstValue, secondValue]) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue === secondValue)), { requireMinimalEncoding });
exports.opNumEqualVerify = (flags) => combinators_1.combineOperations(exports.opNumEqual(flags), flow_control_1.opVerify());
exports.opNumNotEqual = ({ requireMinimalEncoding, }) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, [firstValue, secondValue]) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue !== secondValue)), { requireMinimalEncoding });
exports.opLessThan = ({ requireMinimalEncoding, }) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, [firstValue, secondValue]) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue < secondValue)), { requireMinimalEncoding });
exports.opLessThanOrEqual = ({ requireMinimalEncoding, }) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, [firstValue, secondValue]) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue <= secondValue)), { requireMinimalEncoding });
exports.opGreaterThan = ({ requireMinimalEncoding, }) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, [firstValue, secondValue]) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue > secondValue)), { requireMinimalEncoding });
exports.opGreaterThanOrEqual = ({ requireMinimalEncoding, }) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, [firstValue, secondValue]) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue >= secondValue)), { requireMinimalEncoding });
exports.opMin = ({ requireMinimalEncoding, }) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, [firstValue, secondValue]) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(firstValue < secondValue ? firstValue : secondValue)), { requireMinimalEncoding });
exports.opMax = ({ requireMinimalEncoding, }) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, [firstValue, secondValue]) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(firstValue > secondValue ? firstValue : secondValue)), { requireMinimalEncoding });
exports.opWithin = ({ requireMinimalEncoding, }) => (state) => combinators_1.useThreeScriptNumbers(state, (nextState, [firstValue, secondValue, thirdValue]) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(secondValue <= firstValue && firstValue < thirdValue)), { requireMinimalEncoding });
exports.arithmeticOperations = (flags) => ({
    [opcodes_1.OpcodesCommon.OP_1ADD]: exports.op1Add(flags),
    [opcodes_1.OpcodesCommon.OP_1SUB]: exports.op1Sub(flags),
    [opcodes_1.OpcodesCommon.OP_NEGATE]: exports.opNegate(flags),
    [opcodes_1.OpcodesCommon.OP_ABS]: exports.opAbs(flags),
    [opcodes_1.OpcodesCommon.OP_NOT]: exports.opNot(flags),
    [opcodes_1.OpcodesCommon.OP_0NOTEQUAL]: exports.op0NotEqual(flags),
    [opcodes_1.OpcodesCommon.OP_ADD]: exports.opAdd(flags),
    [opcodes_1.OpcodesCommon.OP_SUB]: exports.opSub(flags),
    [opcodes_1.OpcodesCommon.OP_BOOLAND]: exports.opBoolAnd(flags),
    [opcodes_1.OpcodesCommon.OP_BOOLOR]: exports.opBoolOr(flags),
    [opcodes_1.OpcodesCommon.OP_NUMEQUAL]: exports.opNumEqual(flags),
    [opcodes_1.OpcodesCommon.OP_NUMEQUALVERIFY]: exports.opNumEqualVerify(flags),
    [opcodes_1.OpcodesCommon.OP_NUMNOTEQUAL]: exports.opNumNotEqual(flags),
    [opcodes_1.OpcodesCommon.OP_LESSTHAN]: exports.opLessThan(flags),
    [opcodes_1.OpcodesCommon.OP_LESSTHANOREQUAL]: exports.opLessThanOrEqual(flags),
    [opcodes_1.OpcodesCommon.OP_GREATERTHAN]: exports.opGreaterThan(flags),
    [opcodes_1.OpcodesCommon.OP_GREATERTHANOREQUAL]: exports.opGreaterThanOrEqual(flags),
    [opcodes_1.OpcodesCommon.OP_MIN]: exports.opMin(flags),
    [opcodes_1.OpcodesCommon.OP_MAX]: exports.opMax(flags),
    [opcodes_1.OpcodesCommon.OP_WITHIN]: exports.opWithin(flags),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJpdGhtZXRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvYXV0aC9pbnN0cnVjdGlvbi1zZXRzL2NvbW1vbi9hcml0aG1ldGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBTUEsK0NBTXVCO0FBQ3ZCLGlEQUEwQztBQUMxQyx1Q0FBMEM7QUFDMUMsbUNBQXNFO0FBRXpELFFBQUEsTUFBTSxHQUFHLENBQXdELEVBQzVFLHNCQUFzQixHQUd2QixFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQVksRUFBRSxFQUFFLENBQ3JCLGdDQUFrQixDQUNoQixLQUFLLEVBQ0wsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQ3JCLHlCQUFXLENBQUMsU0FBUyxFQUFFLDRCQUFvQixDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNqRSxFQUFFLHNCQUFzQixFQUFFLENBQzNCLENBQUM7QUFFUyxRQUFBLE1BQU0sR0FBRyxDQUF3RCxFQUM1RSxzQkFBc0IsR0FHdkIsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUNyQixnQ0FBa0IsQ0FDaEIsS0FBSyxFQUNMLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUNyQix5QkFBVyxDQUFDLFNBQVMsRUFBRSw0QkFBb0IsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDakUsRUFBRSxzQkFBc0IsRUFBRSxDQUMzQixDQUFDO0FBRVMsUUFBQSxRQUFRLEdBQUcsQ0FHdEIsRUFDQSxzQkFBc0IsR0FHdkIsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUNyQixnQ0FBa0IsQ0FDaEIsS0FBSyxFQUNMLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUNyQix5QkFBVyxDQUFD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
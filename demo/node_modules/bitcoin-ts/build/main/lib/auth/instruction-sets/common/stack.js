"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const combinators_1 = require("./combinators");
const errors_1 = require("./errors");
const opcodes_1 = require("./opcodes");
const types_1 = require("./types");
exports.opToAltStack = () => (state) => combinators_1.useOneStackItem(state, (nextState, [item]) => {
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    nextState.alternateStack.push(item);
    return nextState;
});
exports.opFromAltStack = () => (state) => {
    // eslint-disable-next-line functional/immutable-data
    const item = state.alternateStack.pop();
    if (item === undefined) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.emptyAlternateStack, state);
    }
    return combinators_1.pushToStack(state, item);
};
exports.op2Drop = () => (state) => combinators_1.useTwoStackItems(state, (nextState) => nextState);
exports.op2Dup = () => (state) => combinators_1.useTwoStackItems(state, (nextState, [a, b]) => combinators_1.pushToStack(nextState, a, b, a.slice(), b.slice()));
exports.op3Dup = () => (state) => combinators_1.useThreeStackItems(state, (nextState, [a, b, c]) => combinators_1.pushToStack(nextState, a, b, c, a.slice(), b.slice(), c.slice()));
exports.op2Over = () => (state) => combinators_1.useFourStackItems(state, (nextState, [a, b, c, d]) => combinators_1.pushToStack(nextState, a, b, c, d, a.slice(), b.slice()));
exports.op2Rot = () => (state) => combinators_1.useSixStackItems(state, (nextState, [a, b, c, d, e, f]) => combinators_1.pushToStack(nextState, c, d, e, f, a, b));
exports.op2Swap = () => (state) => combinators_1.useFourStackItems(state, (nextState, [a, b, c, d]) => combinators_1.pushToStack(nextState, c, d, a, b));
exports.opIfDup = () => (state) => combinators_1.useOneStackItem(state, (nextState, [item]) => combinators_1.pushToStack(nextState, ...(types_1.stackItemIsTruthy(item) ? [item, item.slice()] : [item])));
exports.opDepth = () => (state) => combinators_1.pushToStack(state, types_1.bigIntToScriptNumber(BigInt(state.stack.length)));
exports.opDrop = () => (state) => combinators_1.useOneStackItem(state, (nextState) => nextState);
exports.opDup = () => (state) => combinators_1.useOneStackItem(state, (nextState, [item]) => combinators_1.pushToStack(nextState, item, item.slice()));
exports.opNip = () => (state) => combinators_1.useTwoStackItems(state, (nextState, [, b]) => combinators_1.pushToStack(nextState, b));
exports.opOver = () => (state) => combinators_1.useTwoStackItems(state, (nextState, [a, b]) => combinators_1.pushToStack(nextState, a, b, a.slice()));
exports.opPick = ({ requireMinimalEncoding, }) => (state) => combinators_1.useOneScriptNumber(state, (nextState, depth) => {
    const item = nextState.stack[nextState.stack.length - 1 - Number(depth)];
    if (item === undefined) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.invalidStackIndex, state);
    }
    return combinators_1.pushToStack(nextState, item.slice());
}, { requireMinimalEncoding });
exports.opRoll = ({ requireMinimalEncoding, }) => (state) => combinators_1.useOneScriptNumber(state, (nextState, depth) => {
    const index = nextState.stack.length - 1 - Number(depth);
    if (index < 0 || index > nextState.stack.length - 1) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.invalidStackIndex, state);
    }
    // eslint-disable-next-line functional/immutable-data
    return combinators_1.pushToStack(nextState, nextState.stack.splice(index, 1)[0]);
}, { requireMinimalEncoding });
exports.opRot = () => (state) => combinators_1.useThreeStackItems(state, (nextState, [a, b, c]) => combinators_1.pushToStack(nextState, b, c, a));
exports.opSwap = () => (state) => combinators_1.useTwoStackItems(state, (nextState, [a, b]) => combinators_1.pushToStack(nextState, b, a));
exports.opTuck = () => (state) => combinators_1.useTwoStackItems(state, (nextState, [a, b]) => combinators_1.pushToStack(nextState, b.slice(), a, b));
exports.stackOperations = (flags) => ({
    [opcodes_1.OpcodesCommon.OP_TOALTSTACK]: exports.opToAltStack(),
    [opcodes_1.OpcodesCommon.OP_FROMALTSTACK]: exports.opFromAltStack(),
    [opcodes_1.OpcodesCommon.OP_2DROP]: exports.op2Drop(),
    [opcodes_1.OpcodesCommon.OP_2DUP]: exports.op2Dup(),
    [opcodes_1.OpcodesCommon.OP_3DUP]: exports.op3Dup(),
    [opcodes_1.OpcodesCommon.OP_2OVER]: exports.op2Over(),
    [opcodes_1.OpcodesCommon.OP_2ROT]: exports.op2Rot(),
    [opcodes_1.OpcodesCommon.OP_2SWAP]: exports.op2Swap(),
    [opcodes_1.OpcodesCommon.OP_IFDUP]: exports.opIfDup(),
    [opcodes_1.OpcodesCommon.OP_DEPTH]: exports.opDepth(),
    [opcodes_1.OpcodesCommon.OP_DROP]: exports.opDrop(),
    [opcodes_1.OpcodesCommon.OP_DUP]: exports.opDup(),
    [opcodes_1.OpcodesCommon.OP_NIP]: exports.opNip(),
    [opcodes_1.OpcodesCommon.OP_OVER]: exports.opOver(),
    [opcodes_1.OpcodesCommon.OP_PICK]: exports.opPick(flags),
    [opcodes_1.OpcodesCommon.OP_ROLL]: exports.opRoll(flags),
    [opcodes_1.OpcodesCommon.OP_ROT]: exports.opRot(),
    [opcodes_1.OpcodesCommon.OP_SWAP]: exports.opSwap(),
    [opcodes_1.OpcodesCommon.OP_TUCK]: exports.opTuck(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2F1dGgvaW5zdHJ1Y3Rpb24tc2V0cy9jb21tb24vc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSwrQ0FRdUI7QUFDdkIscUNBQWlFO0FBQ2pFLHVDQUEwQztBQUMxQyxtQ0FBa0U7QUFFckQsUUFBQSxZQUFZLEdBQUcsR0FFeEIsRUFBRSxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FDdEIsNkJBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQzNDLHlGQUF5RjtJQUN6RixTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQztBQUVRLFFBQUEsY0FBYyxHQUFHLEdBRzFCLEVBQUUsQ0FBQyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQ3RCLHFEQUFxRDtJQUNyRCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3hDLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtRQUN0QixPQUFPLG1CQUFVLENBQ2Ysa0NBQXlCLENBQUMsbUJBQW1CLEVBQzdDLEtBQUssQ0FDTixDQUFDO0tBQ0g7SUFDRCxPQUFPLHlCQUFXLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVXLFFBQUEsT0FBTyxHQUFHLEdBQTZCLEVBQUUsQ0FBQyxDQUFDLEtBQVksRUFBRSxFQUFFLENBQ3RFLDhCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFdkMsUUFBQSxNQUFNLEdBQUcsR0FBNkIsRUFBRSxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FD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
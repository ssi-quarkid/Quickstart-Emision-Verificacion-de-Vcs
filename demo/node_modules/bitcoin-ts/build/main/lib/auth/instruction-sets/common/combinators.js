"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("./common");
const errors_1 = require("./errors");
exports.incrementOperationCount = (operation) => (state) => {
    const nextState = operation(state);
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    nextState.operationCount += 1;
    return nextState;
};
exports.conditionallyEvaluate = (operation) => (state) => state.executionStack.every((item) => item) ? operation(state) : state;
/**
 * Map a function over each operation in an `InstructionSet.operations` object,
 * assigning the result to the same `opcode` in the resulting object.
 * @param operations - an operations map from an `InstructionSet`
 * @param combinator - a function to apply to each operation
 */
exports.mapOverOperations = (operations, ...combinators) => Object.keys(operations).reduce((result, operation) => (Object.assign(Object.assign({}, result), { [operation]: combinators.reduce((op, combinator) => combinator(op), operations[parseInt(operation, 10)]) })), {});
/**
 * Pop one stack item off of `state.stack` and provide that item to `operation`.
 */
exports.useOneStackItem = (state, operation) => {
    // eslint-disable-next-line functional/immutable-data
    const item = state.stack.pop();
    if (item === undefined) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.emptyStack, state);
    }
    return operation(state, [item]);
};
exports.useTwoStackItems = (state, operation) => exports.useOneStackItem(state, (nextState, [valueTwo]) => exports.useOneStackItem(nextState, (lastState, [valueTop]) => operation(lastState, [valueTop, valueTwo])));
exports.useThreeStackItems = (state, operation) => exports.useOneStackItem(state, (nextState, [valueThree]) => exports.useTwoStackItems(nextState, (lastState, [valueTop, valueTwo]) => operation(lastState, [valueTop, valueTwo, valueThree])));
exports.useFourStackItems = (state, operation) => exports.useTwoStackItems(state, (nextState, [valueThree, valueFour]) => exports.useTwoStackItems(nextState, (lastState, [valueTop, valueTwo]) => operation(lastState, [valueTop, valueTwo, valueThree, valueFour])));
exports.useSixStackItems = (state, operation) => exports.useFourStackItems(state, (nextState, [valueThree, valueFour, valueFive, valueSix]) => exports.useTwoStackItems(nextState, (lastState, [valueTop, valueTwo]) => operation(lastState, [
    valueTop,
    valueTwo,
    valueThree,
    valueFour,
    valueFive,
    valueSix,
])));
const normalMaximumScriptNumberByteLength = 4;
exports.useOneScriptNumber = (state, operation, { requireMinimalEncoding, maximumScriptNumberByteLength = normalMaximumScriptNumberByteLength, }) => exports.useOneStackItem(state, (nextState, [item]) => {
    const value = common_1.parseBytesAsScriptNumber(item, requireMinimalEncoding, maximumScriptNumberByteLength);
    if (common_1.isScriptNumberError(value)) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.invalidScriptNumber, state);
    }
    return operation(nextState, [value]);
});
exports.useTwoScriptNumbers = (state, operation, { requireMinimalEncoding, maximumScriptNumberByteLength = normalMaximumScriptNumberByteLength, }) => exports.useOneScriptNumber(state, (nextState, [secondValue]) => exports.useOneScriptNumber(nextState, (lastState, [firstValue]) => operation(lastState, [firstValue, secondValue]), { maximumScriptNumberByteLength, requireMinimalEncoding }), { maximumScriptNumberByteLength, requireMinimalEncoding });
exports.useThreeScriptNumbers = (state, operation, { requireMinimalEncoding, maximumScriptNumberByteLength = normalMaximumScriptNumberByteLength, }) => exports.useTwoScriptNumbers(state, (nextState, [secondValue, thirdValue]) => exports.useOneScriptNumber(nextState, (lastState, [firstValue]) => operation(lastState, [firstValue, secondValue, thirdValue]), { maximumScriptNumberByteLength, requireMinimalEncoding }), { maximumScriptNumberByteLength, requireMinimalEncoding });
/**
 * Return the provided state with the provided value pushed to its stack.
 * @param state - the state to update and return
 * @param data - the value to push to the stack
 */
exports.pushToStack = (state, ...data) => {
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    state.stack.push(...data);
    return state;
};
// TODO: if firstOperation errors, secondOperation might overwrite the error
exports.combineOperations = (firstOperation, secondOperation) => (state) => secondOperation(firstOperation(state));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYmluYXRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2F1dGgvaW5zdHJ1Y3Rpb24tc2V0cy9jb21tb24vY29tYmluYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFNQSxxQ0FBeUU7QUFDekUscUNBQWlFO0FBRXBELFFBQUEsdUJBQXVCLEdBQUcsQ0FHckMsU0FBMkIsRUFDVCxFQUFFLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUN0QyxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMseUZBQXlGO0lBQ3pGLFNBQVMsQ0FBQyxjQUFjLElBQUksQ0FBQyxDQUFDO0lBQzlCLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVXLFFBQUEscUJBQXFCLEdBQUcsQ0FDbkMsU0FBMkIsRUFDVCxFQUFFLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUN0QyxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBRXhFOzs7OztHQUtHO0FBQ1UsUUFBQSxpQkFBaUIsR0FBRyxDQUMvQixVQUFpRCxFQUNqRCxHQUFHLFdBQWtFLEVBQ3JFLEVBQUUsQ0FDRixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FHNUIsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxpQ0FDbEIsTUFBTSxLQUNULENBQUMsU0FBUyxDQUFDLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FDN0IsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQ2xDLFVBQVUsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFF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
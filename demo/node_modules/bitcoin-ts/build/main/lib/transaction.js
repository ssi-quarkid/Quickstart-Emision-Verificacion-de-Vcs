"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const format_1 = require("./format/format");
/**
 * @param bin - the raw transaction from which to read the input
 * @param offset - the offset at which the input begins
 */
exports.readTransactionInput = (bin, offset) => {
    const offsetAfterTxHash = offset + 32 /* sha256Hash */;
    const outpointTransactionHash = bin
        .slice(offset, offsetAfterTxHash)
        .reverse();
    const offsetAfterOutpointIndex = offsetAfterTxHash + 4 /* uint32 */;
    const outpointIndex = format_1.binToNumberUint32LE(bin.subarray(offsetAfterTxHash, offsetAfterOutpointIndex));
    const { nextOffset: offsetAfterBytecodeLength, value: bytecodeLength, } = format_1.readBitcoinVarInt(bin, offsetAfterOutpointIndex);
    const offsetAfterBytecode = offsetAfterBytecodeLength + Number(bytecodeLength);
    const unlockingBytecode = bin.slice(offsetAfterBytecodeLength, offsetAfterBytecode);
    const nextOffset = offsetAfterBytecode + 4 /* uint32 */;
    const sequenceNumber = format_1.binToNumberUint32LE(bin.subarray(offsetAfterBytecode, nextOffset));
    return {
        input: {
            outpointIndex,
            outpointTransactionHash,
            sequenceNumber,
            unlockingBytecode,
        },
        nextOffset,
    };
};
/**
 * Serialize a single input.
 * @param output - the input to serialize
 */
exports.serializeInput = (input) => format_1.flattenBinArray([
    input.outpointTransactionHash.slice().reverse(),
    format_1.numberToBinUint32LE(input.outpointIndex),
    format_1.bigIntToBitcoinVarInt(BigInt(input.unlockingBytecode.length)),
    input.unlockingBytecode,
    format_1.numberToBinUint32LE(input.sequenceNumber),
]);
/**
 * Serialize a set of inputs for inclusion in a serialized transaction.
 *
 * Format: [BitcoinVarInt: input count] [serialized inputs]
 *
 * @param inputs - the set of inputs to serialize
 */
exports.serializeInputs = (inputs) => format_1.flattenBinArray([
    format_1.bigIntToBitcoinVarInt(BigInt(inputs.length)),
    ...inputs.map(exports.serializeInput),
]);
/**
 * @param bin - the raw transaction from which to read the output
 * @param offset - the offset at which the output begins
 */
exports.readTransactionOutput = (bin, offset) => {
    const offsetAfterSatoshis = offset + 8 /* uint64 */;
    const satoshis = Number(format_1.binToBigIntUint64LE(bin.subarray(offset, offsetAfterSatoshis)));
    const { nextOffset: offsetAfterScriptLength, value } = format_1.readBitcoinVarInt(bin, offsetAfterSatoshis);
    const bytecodeLength = Number(value);
    const nextOffset = offsetAfterScriptLength + bytecodeLength;
    const lockingBytecode = bytecodeLength === 0
        ? new Uint8Array()
        : bin.slice(offsetAfterScriptLength, nextOffset);
    return {
        nextOffset,
        output: {
            lockingBytecode,
            satoshis,
        },
    };
};
/**
 * Serialize a single output.
 * @param output - the output to serialize
 */
exports.serializeOutput = (output) => format_1.flattenBinArray([
    format_1.bigIntToBinUint64LE(BigInt(output.satoshis)),
    format_1.bigIntToBitcoinVarInt(BigInt(output.lockingBytecode.length)),
    output.lockingBytecode,
]);
/**
 * Serialize a set of outputs for inclusion in a serialized transaction.
 *
 * Format: [BitcoinVarInt: output count] [serialized outputs]
 *
 * @param outputs - the set of outputs to serialize
 */
exports.serializeOutputsForTransaction = (outputs) => format_1.flattenBinArray([
    format_1.bigIntToBitcoinVarInt(BigInt(outputs.length)),
    ...outputs.map(exports.serializeOutput),
]);
/**
 * TODO: document return type (note outpointTransactionHash is little-endian â€“ most UIs display big-endian transaction hashes)
 *
 * Note: this method throws runtime errors when attempting to decode improperly
 * encoded transactions.
 *
 * @param bin - the raw transaction to decode
 */
exports.deserializeTransaction = (bin) => {
    const version = format_1.binToNumberUint32LE(bin.subarray(0, 4 /* uint32 */));
    const offsetAfterVersion = 4 /* uint32 */;
    const { nextOffset: offsetAfterInputCount, value: inputCount, } = format_1.readBitcoinVarInt(bin, offsetAfterVersion);
    // eslint-disable-next-line functional/no-let
    let cursor = offsetAfterInputCount;
    const inputs = [];
    // eslint-disable-next-line functional/no-let, functional/no-loop-statement, no-plusplus
    for (let i = 0; i < Number(inputCount); i++) {
        const { input, nextOffset } = exports.readTransactionInput(bin, cursor);
        // eslint-disable-next-line functional/no-expression-statement
        cursor = nextOffset;
        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
        inputs.push(input);
    }
    const { nextOffset: offsetAfterOutputCount, value: outputCount, } = format_1.readBitcoinVarInt(bin, cursor);
    // eslint-disable-next-line functional/no-expression-statement
    cursor = offsetAfterOutputCount;
    const outputs = [];
    // eslint-disable-next-line functional/no-let, functional/no-loop-statement, no-plusplus
    for (let i = 0; i < Number(outputCount); i++) {
        const { output, nextOffset } = exports.readTransactionOutput(bin, cursor);
        // eslint-disable-next-line functional/no-expression-statement
        cursor = nextOffset;
        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
        outputs.push(output);
    }
    const locktime = format_1.binToNumberUint32LE(bin.subarray(cursor, cursor + 4 /* uint32 */));
    return {
        inputs,
        locktime,
        outputs,
        version,
    };
};
/**
 * TODO: doc
 */
exports.serializeTransaction = (tx) => format_1.flattenBinArray([
    format_1.numberToBinUint32LE(tx.version),
    exports.serializeInputs(tx.inputs),
    exports.serializeOutputsForTransaction(tx.outputs),
    format_1.numberToBinUint32LE(tx.locktime),
]);
/**
 * Derive a standard identifier from a serialized data structure.
 *
 * @remarks
 * By convention, Bitcoin transaction and block identifiers are derived by
 * double-sha256 hashing their serialized form, and reversing the byte order.
 * (The result of sha256 is defined by its specification as big-endian, and
 * bitcoin displays hashes in little-endian format.)
 *
 * @returns an identifier in little-endian byte order
 *
 * @param data - the serialized raw data being identified
 * @param sha256 - an implementation of sha256
 */
exports.getBitcoinIdentifier = (data, sha256) => sha256.hash(sha256.hash(data)).reverse();
/**
 * Derive a standard transaction identifier from a serialized transaction.
 *
 * @returns a Transaction ID in little-endian byte order
 *
 * @param transaction - the serialized transaction
 * @param sha256 - an implementation of sha256
 */
exports.getBitcoinTransactionId = (transaction, sha256) => format_1.binToHex(exports.getBitcoinIdentifier(transaction, sha256));
/**
 * Get the hash of all outpoints in a series of inputs. (For use in
 * `hashTransactionOutpoints`.)
 *
 * @param inputs - the series of inputs from which to extract the outpoints
 * @param sha256 - an implementation of sha256
 */
exports.serializeOutpoints = (inputs) => format_1.flattenBinArray(inputs.map((i) => format_1.flattenBinArray([
    i.outpointTransactionHash.slice().reverse(),
    format_1.numberToBinUint32LE(i.outpointIndex),
])));
/**
 * Get the signing serialization for a series of outputs.
 * @param outputs - the series of outputs to serialize
 */
exports.serializeOutputsForSigning = (outputs) => format_1.flattenBinArray(outputs.map(exports.serializeOutput));
/**
 * Serialize a series of input sequence numbers.
 *
 * @param inputs - the series of inputs from which to extract the sequence numbers
 */
exports.serializeSequenceNumbers = (inputs) => format_1.flattenBinArray(inputs.map((i) => format_1.numberToBinUint32LE(i.sequenceNumber)));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3RyYW5zYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNENBU3lCO0FBa0h6Qjs7O0dBR0c7QUFDVSxRQUFBLG9CQUFvQixHQUFHLENBQUMsR0FBZSxFQUFFLE1BQWMsRUFBRSxFQUFFO0lBQ3RFLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxzQkFBd0IsQ0FBQztJQUN6RCxNQUFNLHVCQUF1QixHQUFHLEdBQUc7U0FDaEMsS0FBSyxDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQztTQUNoQyxPQUFPLEVBQUUsQ0FBQztJQUNiLE1BQU0sd0JBQXdCLEdBQUcsaUJBQWlCLGlCQUFvQixDQUFDO0lBQ3ZFLE1BQU0sYUFBYSxHQUFHLDRCQUFtQixDQUN2QyxHQUFHLENBQUMsUUFBUSxDQUFDLGlCQUFpQixFQUFFLHdCQUF3QixDQUFDLENBQzFELENBQUM7SUFDRixNQUFNLEVBQ0osVUFBVSxFQUFFLHlCQUF5QixFQUNyQyxLQUFLLEVBQUUsY0FBYyxHQUN0QixHQUFHLDBCQUFpQixDQUFDLEdBQUcsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sbUJBQW1CLEdBQ3ZCLHlCQUF5QixHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNyRCxNQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQ2pDLHlCQUF5QixFQUN6QixtQkFBbUIsQ0FDcEIsQ0FBQztJQUNGLE1BQU0sVUFBVSxHQUFHLG1CQUFtQixpQkFBb0IsQ0FBQztJQUMzRCxNQUFNLGNBQWMsR0FBRyw0QkFBbUIsQ0FDeEMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxVQUFVLENBQUMsQ0FDOUMsQ0FBQztJQUNGLE9BQU87UUFDTCxLQUFLLEVBQUU7WUFDTCxhQUFhO1lBQ2IsdUJBQXVCO1lBQ3ZCLGNBQWM7WUFDZCxpQkFBaUI7U0FDbEI7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
"use strict";
/* eslint-disable functional/no-let, init-declarations, functional/no-expression-statement */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const ava_1 = __importDefault(require("ava"));
const chuhai_1 = __importDefault(require("chuhai"));
const lib_1 = require("../lib");
ava_1.default(`node: binToBigIntUintBE vs. binToHex -> BigInt()`, async (t) => {
    await chuhai_1.default(t.title, (s) => {
        let sourceBin;
        let num;
        let result;
        const nextCycle = () => {
            const uint256Length = 32;
            sourceBin = Uint8Array.from(crypto_1.randomBytes(uint256Length));
            num = lib_1.binToBigIntUintBE(sourceBin);
        };
        nextCycle();
        s.bench('binToBigIntUintBE', () => {
            result = lib_1.binToBigIntUintBE(sourceBin);
        });
        s.bench('binToHex -> BigInt()', () => {
            result = BigInt(`0x${lib_1.binToHex(sourceBin)}`);
        });
        s.cycle(() => {
            t.deepEqual(result, num);
            nextCycle();
        });
    });
});
ava_1.default(`node: numberToBinUint16LE vs. numberToBinUint16LEClamped`, async (t) => {
    await chuhai_1.default(t.title, (s) => {
        let expectedBin;
        let num;
        let resultBin;
        const nextCycle = () => {
            const uint16Length = 2;
            expectedBin = Uint8Array.from(crypto_1.randomBytes(uint16Length));
            num = lib_1.binToNumberUint16LE(expectedBin);
        };
        nextCycle();
        s.bench('numberToBinUint16LE', () => {
            resultBin = lib_1.numberToBinUint16LE(num);
        });
        s.bench('numberToBinUint16LEClamped', () => {
            resultBin = lib_1.numberToBinUint16LEClamped(num);
        });
        s.cycle(() => {
            t.deepEqual(resultBin, expectedBin);
            nextCycle();
        });
    });
});
ava_1.default(`node: numberToBinUint32LE vs. numberToBinUint32LEClamped`, async (t) => {
    await chuhai_1.default(t.title, (s) => {
        let expectedBin;
        let num;
        let resultBin;
        const nextCycle = () => {
            const uint32Length = 4;
            expectedBin = Uint8Array.from(crypto_1.randomBytes(uint32Length));
            num = lib_1.binToNumberUint32LE(expectedBin);
        };
        nextCycle();
        s.bench('numberToBinUint32LE', () => {
            resultBin = lib_1.numberToBinUint32LE(num);
        });
        s.bench('numberToBinUint32LEClamped', () => {
            resultBin = lib_1.numberToBinUint32LEClamped(num);
        });
        s.cycle(() => {
            t.deepEqual(resultBin, expectedBin);
            nextCycle();
        });
    });
});
ava_1.default(`node: bigIntToBinUint64LE vs. bigIntToBinUint64LEClamped`, async (t) => {
    await chuhai_1.default(t.title, (s) => {
        let expectedBin;
        let num;
        let resultBin;
        const nextCycle = () => {
            const uint64Length = 8;
            expectedBin = Uint8Array.from(crypto_1.randomBytes(uint64Length));
            num = lib_1.binToBigIntUint64LE(expectedBin);
        };
        nextCycle();
        s.bench('bigIntToBinUint64LE', () => {
            resultBin = lib_1.bigIntToBinUint64LE(num);
        });
        s.bench('bigIntToBinUint64LEClamped', () => {
            resultBin = lib_1.bigIntToBinUint64LEClamped(num);
        });
        s.cycle(() => {
            t.deepEqual(resultBin, expectedBin);
            nextCycle();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVycy5iZW5jaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvZm9ybWF0L251bWJlcnMuYmVuY2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDZGQUE2Rjs7Ozs7QUFFN0YsbUNBQXFDO0FBRXJDLDhDQUF1QjtBQUN2QixvREFBMkI7QUFFM0IsZ0NBWWdCO0FBRWhCLGFBQUksQ0FBQyxrREFBa0QsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDbkUsTUFBTSxnQkFBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUN6QixJQUFJLFNBQXFCLENBQUM7UUFDMUIsSUFBSSxHQUFXLENBQUM7UUFDaEIsSUFBSSxNQUFjLENBQUM7UUFFbkIsTUFBTSxTQUFTLEdBQUcsR0FBRyxFQUFFO1lBQ3JCLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQztZQUN6QixTQUFTLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxvQkFBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDeEQsR0FBRyxHQUFHLHVCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQztRQUNGLFNBQVMsRUFBRSxDQUFDO1FBRVosQ0FBQyxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7WUFDaEMsTUFBTSxHQUFHLHVCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsQ0FBQyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7WUFDbkMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLGNBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtZQUNYLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLFNBQVMsRUFBRSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsYUFBSSxDQUFDLDBEQUEwRCxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUMzRSxNQUFNLGdCQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO1FBQ3pCLElBQUksV0FBdUIsQ0FBQztRQUM1QixJQUFJLEdBQVcsQ0FBQztRQUNoQixJQUFJLFNBQXFCLENBQUM7UUFFMUIsTUFBTSxTQUFTLEdBQUcsR0FBRyxFQUFFO1lBQ3JCLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQztZQUN2QixXQUFXLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxvQkFBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDekQsR0FBRyxHQUFHLHlCQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQztRQUNGLFNBQVMsRUFBRSxDQUFDO1FBRVosQ0FBQyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7WUFDbEMsU0FBUyxHQUFHLHlCQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsQ0FBQyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7WUFDekMsU0FBUyxHQUFHLGdDQUEwQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQyxDQUFDO1FBRUgsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7WUFDWCxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUNwQyxTQUFTLEVBQUUsQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILGFBQUksQ0FBQywwREFBMEQsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDM0UsTUFBTSxnQkFBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUN6QixJQUFJLFdBQXVCLENBQUM7UUFDNUIsSUFBSSxHQUFXLENBQUM7UUFDaEIsSUFBSSxTQUFxQixDQUFDO1FBRTFCLE1BQU0sU0FBUyxHQUFHLEdBQUcsRUFBRTtZQUNyQixNQUFNLFlBQVksR0FBRyxDQUFDLENBQUM7WUFDdkIsV0FBVyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsb0JBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ3pELEdBQUcsR0FBRyx5QkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUM7UUFDRixTQUFTLEVBQUUsQ0FBQztRQUVaLENBQUMsQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO1lBQ2xDLFNBQVMsR0FBRyx5QkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztRQUNILENBQUMsQ0FBQyxLQUFLLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxFQUFFO1lBQ3pDLFNBQVMsR0FBRyxnQ0FBMEIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztRQUVILENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO1lBQ1gsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDcEMsU0FBUyxFQUFFLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxhQUFJLENBQUMsMERBQTBELEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQzNFLE1BQU0sZ0JBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDekIsSUFBSSxXQUF1QixDQUFDO1FBQzVCLElBQUksR0FBVyxDQUFDO1FBQ2hCLElBQUksU0FBcUIsQ0FBQztRQUUxQixNQUFNLFNBQVMsR0FBRyxHQUFHLEVBQUU7WUFDckIsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLFdBQVcsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLG9CQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUN6RCxHQUFHLEdBQUcseUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDO1FBQ0YsU0FBUyxFQUFFLENBQUM7UUFFWixDQUFDLENBQUMsS0FBSyxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtZQUNsQyxTQUFTLEdBQUcseUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7UUFDSCxDQUFDLENBQUMsS0FBSyxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtZQUN6QyxTQUFTLEdBQUcsZ0NBQTBCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtZQUNYLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ3BDLFNBQVMsRUFBRSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIn0=
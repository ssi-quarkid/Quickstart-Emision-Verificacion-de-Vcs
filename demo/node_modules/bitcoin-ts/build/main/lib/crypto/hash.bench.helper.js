"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* global Buffer */
/* eslint-disable functional/no-let, init-declarations, functional/no-expression-statement, functional/no-conditional-statement */
const crypto_1 = require("crypto");
const asmCrypto = __importStar(require("asmcrypto.js"));
const ava_1 = __importDefault(require("ava"));
const bcrypto = __importStar(require("bcrypto"));
const chuhai_1 = __importDefault(require("chuhai"));
const hashJs = __importStar(require("hash.js"));
exports.benchmarkHashingFunction = (hashFunctionName, hashFunctionPromise, nodeJsAlgorithm) => {
    const singlePassNodeBenchmark = (inputLength) => {
        const bcryptoAlgorithm = nodeJsAlgorithm.toUpperCase();
        ava_1.default(`node: ${hashFunctionName}: hash a ${inputLength}-byte input`, async (t) => {
            const hashFunction = await hashFunctionPromise;
            await chuhai_1.default(t.title, (s) => {
                let message;
                let hash;
                /*
                 * we let Node.js use the message as a Node.js buffer
                 * (may slightly overestimate Node.js native performance)
                 */
                let nodeJsBuffer;
                const nextCycle = () => {
                    message = crypto_1.randomBytes(inputLength);
                    nodeJsBuffer = Buffer.from(message);
                };
                nextCycle();
                s.bench('bitcoin-ts', () => {
                    hash = hashFunction.hash(message);
                });
                s.bench('hash.js', () => {
                    hash = hashJs[nodeJsAlgorithm]().update(message).digest();
                });
                s.bench('bcoin', () => {
                    hash = bcrypto[bcryptoAlgorithm].digest(Buffer.from(message));
                });
                s.bench('node.js native', () => {
                    hash = crypto_1.createHash(nodeJsAlgorithm).update(nodeJsBuffer).digest();
                });
                if (nodeJsAlgorithm !== 'ripemd160') {
                    const Algorithm = nodeJsAlgorithm === 'sha1'
                        ? asmCrypto.Sha1
                        : nodeJsAlgorithm === 'sha256'
                            ? asmCrypto.Sha256
                            : asmCrypto.Sha512;
                    s.bench('asmcrypto.js', () => {
                        const instance = new Algorithm();
                        hash = instance.process(message).finish().result;
                    });
                }
                s.cycle(() => {
                    if (hash === null) {
                        t.fail(`asmcrypto.js failed to produce a hash for message: ${message.toString()}`);
                    }
                    else {
                        t.deepEqual(new Uint8Array(hash), hashFunction.hash(message));
                        nextCycle();
                    }
                });
            });
        });
    };
    const MB = 1000000;
    const incrementalNodeBenchmark = (totalInput, chunkSize) => {
        ava_1.default(`node: ${hashFunctionName}: incrementally hash a ${totalInput / MB}MB input in ${chunkSize / MB}MB chunks`, async (t) => {
            const hashFunction = await hashFunctionPromise;
            await chuhai_1.default(t.title, (s) => {
                let message;
                let messageChunks;
                let nodeJsChunks;
                let hash;
                const nextCycle = () => {
                    message = crypto_1.randomBytes(totalInput);
                    const chunkCount = Math.ceil(message.length / chunkSize);
                    messageChunks = Array.from({ length: chunkCount }).map((_, index) => message.slice(index * chunkSize, index * chunkSize + chunkSize));
                    nodeJsChunks = messageChunks.map((chunk) => Buffer.from(chunk));
                };
                nextCycle();
                s.bench('bitcoin-ts', () => {
                    hash = hashFunction.final(messageChunks.reduce((state, chunk) => hashFunction.update(state, chunk), hashFunction.init()));
                });
                s.bench('hash.js', () => {
                    hash = messageChunks
                        .reduce((state, chunk) => state.update(chunk), hashJs[nodeJsAlgorithm]())
                        .digest();
                });
                s.bench('node.js native', () => {
                    hash = nodeJsChunks
                        .reduce((state, chunk) => state.update(chunk), crypto_1.createHash(nodeJsAlgorithm))
                        .digest();
                });
                if (nodeJsAlgorithm !== 'ripemd160') {
                    const Algorithm = nodeJsAlgorithm === 'sha1'
                        ? asmCrypto.Sha1
                        : nodeJsAlgorithm === 'sha256'
                            ? asmCrypto.Sha256
                            : asmCrypto.Sha512;
                    s.bench('asmcrypto.js', () => {
                        const instance = new Algorithm();
                        hash = instance.process(message).finish().result;
                    });
                }
                s.cycle(() => {
                    if (hash === null) {
                        t.fail(`asmcrypto.js failed to produce a hash for message: ${message.toString()}`);
                    }
                    else {
                        t.deepEqual(new Uint8Array(hash), hashFunction.hash(message));
                        nextCycle();
                    }
                });
            });
        });
    };
    /* eslint-disable @typescript-eslint/no-magic-numbers */
    singlePassNodeBenchmark(32);
    singlePassNodeBenchmark(100);
    singlePassNodeBenchmark(1000);
    singlePassNodeBenchmark(10000);
    incrementalNodeBenchmark(MB * 32, MB);
    /* eslint-enable @typescript-eslint/no-magic-numbers */
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaC5iZW5jaC5oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NyeXB0by9oYXNoLmJlbmNoLmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxtQkFBbUI7QUFDbkIsa0lBQWtJO0FBQ2xJLG1DQUFpRDtBQUVqRCx3REFBMEM7QUFDMUMsOENBQXVCO0FBQ3ZCLGlEQUFtQztBQUNuQyxvREFBMkI7QUFDM0IsZ0RBQWtDO0FBSXJCLFFBQUEsd0JBQXdCLEdBQUcsQ0FDdEMsZ0JBQXdCLEVBQ3hCLG1CQUErQixFQUMvQixlQUEyRCxFQUMzRCxFQUFFO0lBQ0YsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLFdBQW1CLEVBQUUsRUFBRTtRQUN0RCxNQUFNLGdCQUFnQixHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBSTFDLENBQUM7UUFDWCxhQUFJLENBQUMsU0FBUyxnQkFBZ0IsWUFBWSxXQUFXLGFBQWEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDOUUsTUFBTSxZQUFZLEdBQUcsTUFBTSxtQkFBbUIsQ0FBQztZQUMvQyxNQUFNLGdCQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUN6QixJQUFJLE9BQW1CLENBQUM7Z0JBQ3hCLElBQUksSUFBMkMsQ0FBQztnQkFDaEQ7OzttQkFHRztnQkFDSCxJQUFJLFlBQW9CLENBQUM7Z0JBQ3pCLE1BQU0sU0FBUyxHQUFHLEdBQUcsRUFBRTtvQkFDckIsT0FBTyxHQUFHLG9CQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7b0JBQ25DLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN0QyxDQUFDLENBQUM7Z0JBQ0YsU0FBUyxFQUFFLENBQUM7Z0JBQ1osQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO29CQUN6QixJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDcEMsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO29CQUN0QixJQUFJLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUM1RCxDQUFDLENBQUMsQ0FBQztnQkFDSCxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7b0JBQ3BCLElBQUksR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNoRSxDQUFDLENBQUMsQ0FBQztnQkFDSCxDQUFDLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtvQkFDN0IsSUFBSSxHQUFHLG1CQUFVLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNuRSxDQUFDLENBQUMsQ0FBQztnQkFDSCxJQUFJLGVBQWUsS0FBSyxXQUFXLEVBQUU7b0JBQ25DLE1BQU0sU0FBUyxHQUNiLGVBQWUsS0FBSyxNQUFNO3dCQUN4QixDQUFDLENBQUMsU0FBUyxDQUFDLElBQUk7d0JBQ2hCLENBQUMsQ0FBQyxlQUFlLEtBQUssUUFBUTs0QkFDOUIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNOzRCQUNsQixDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztvQkFDdkIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFO3dCQUMzQixNQUFNLFFBQVEsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO3dCQUNqQyxJQUFJLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUM7b0JBQ25ELENBQUMsQ0FBQyxDQUFDO2lCQUNKO2dCQUNELENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO29CQUNYLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTt3QkFDakIsQ0FBQyxDQUFDLElBQUksQ0FDSixzREFBc0QsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQzNFLENBQUM7cUJBQ0g7eUJBQU07d0JBQ0wsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7d0JBQzlELFNBQVMsRUFBRSxDQUFDO3FCQUNiO2dCQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUVGLE1BQU0sRUFBRSxHQUFHLE9BQVMsQ0FBQztJQUVyQixNQUFNLHdCQUF3QixHQUFHLENBQUMsVUFBa0IsRUFBRSxTQUFpQixFQUFFLEVBQUU7UUFDekUsYUFBSSxDQUFDLFNBQVMsZ0JBQWdCLDBCQUM1QixVQUFVLEdBQUcsRUFDZixlQUFlLFNBQVMsR0FBRyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDcEQsTUFBTSxZQUFZLEdBQUcsTUFBTSxtQkFBbUIsQ0FBQztZQUMvQyxNQUFNLGdCQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUN6QixJQUFJLE9BQW1CLENBQUM7Z0JBQ3hCLElBQUksYUFBb0MsQ0FBQztnQkFDekMsSUFBSSxZQUErQixDQUFDO2dCQUNwQyxJQUFJLElBQTJDLENBQUM7Z0JBQ2hELE1BQU0sU0FBUyxHQUFHLEdBQUcsRUFBRTtvQkFDckIsT0FBTyxHQUFHLG9CQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQ2xDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBQztvQkFDekQsYUFBYSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FDbEUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsU0FBUyxFQUFFLEtBQUssR0FBRyxTQUFTLEdBQUcsU0FBUyxDQUFDLENBQ2hFLENBQUM7b0JBQ0YsWUFBWSxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDbEUsQ0FBQyxDQUFDO2dCQUNGLFNBQVMsRUFBRSxDQUFDO2dCQUNaLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtvQkFDekIsSUFBSSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQ3ZCLGFBQWEsQ0FBQyxNQUFNLENBQ2xCLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQ25ELFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FDcEIsQ0FDRixDQUFDO2dCQUNKLENBQUMsQ0FBQyxDQUFDO2dCQUNILENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtvQkFDdEIsSUFBSSxHQUFHLGFBQWE7eUJBQ2pCLE1BQU0sQ0FDTCxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQ3JDLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUMxQjt5QkFDQSxNQUFNLEVBQUUsQ0FBQztnQkFDZCxDQUFDLENBQUMsQ0FBQztnQkFDSCxDQUFDLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtvQkFDN0IsSUFBSSxHQUFHLFlBQVk7eUJBQ2hCLE1BQU0sQ0FDTCxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQ3JDLG1CQUFVLENBQUMsZUFBZSxDQUFDLENBQzVCO3lCQUNBLE1BQU0sRUFBRSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO2dCQUNILElBQUksZUFBZSxLQUFLLFdBQVcsRUFBRTtvQkFDbkMsTUFBTSxTQUFTLEdBQ2IsZUFBZSxLQUFLLE1BQU07d0JBQ3hCLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSTt3QkFDaEIsQ0FBQyxDQUFDLGVBQWUsS0FBSyxRQUFROzRCQUM5QixDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU07NEJBQ2xCLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO29CQUN2QixDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7d0JBQzNCLE1BQU0sUUFBUSxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7d0JBQ2pDLElBQUksR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQztvQkFDbkQsQ0FBQyxDQUFDLENBQUM7aUJBQ0o7Z0JBQ0QsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7b0JBQ1gsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO3dCQUNqQixDQUFDLENBQUMsSUFBSSxDQUNKLHNEQUFzRCxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FDM0UsQ0FBQztxQkFDSDt5QkFBTTt3QkFDTCxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzt3QkFDOUQsU0FBUyxFQUFFLENBQUM7cUJBQ2I7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsd0RBQXdEO0lBQ3hELHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLHVCQUF1QixDQUFDLElBQUssQ0FBQyxDQUFDO0lBQy9CLHVCQUF1QixDQUFDLEtBQU0sQ0FBQyxDQUFDO0lBRWhDLHdCQUF3QixDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdEMsdURBQXVEO0FBQ3pELENBQUMsQ0FBQyJ9
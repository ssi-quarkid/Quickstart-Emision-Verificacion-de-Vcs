"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* global window, crypto */
/* eslint-disable functional/no-let, init-declarations, functional/no-expression-statement, functional/no-conditional-statement */
const asmCrypto = __importStar(require("asmcrypto.js"));
const chuhai_1 = __importDefault(require("chuhai"));
const hashJs = __importStar(require("hash.js"));
const crypto_1 = require("./crypto");
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isUint8Array = (array) => { var _a; return ((_a = array === null || array === void 0 ? void 0 : array.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'Uint8Array'; };
const compare = (a, b) => {
    if (!isUint8Array(a) || !isUint8Array(b) || a.toString() !== b.toString()) {
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        benchError(`\nInvalid result: ${a} is not equal to ${b}\n`);
    }
};
const randomBytes = (bytes) => crypto.getRandomValues(new Uint8Array(bytes));
const singlePassBrowserBenchmark = async ({ hashFunction, hashFunctionName, inputLength, subtleCryptoAlgorithmName, }) => chuhai_1.default(`browser: ${hashFunctionName}: hash a ${inputLength}-byte input`, (s) => {
    let message = randomBytes(inputLength);
    let hash;
    s.cycle(() => {
        if (hash === null) {
            benchError(`asmcrypto.js produced a null result given message: ${message.toString()}`);
        }
        else {
            compare(hash, hashFunction.hash(message));
        }
        message = randomBytes(inputLength);
    });
    s.bench('bitcoin-ts', () => {
        hash = hashFunction.hash(message);
    });
    s.bench('hash.js', () => {
        hash = new Uint8Array(hashJs[hashFunctionName]().update(message).digest());
    });
    if (typeof subtleCryptoAlgorithmName === 'string') {
        s.bench('crypto.subtle', (deferred) => {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            window.crypto.subtle
                .digest(subtleCryptoAlgorithmName, message)
                .then((buffer) => {
                hash = new Uint8Array(buffer);
                deferred.resolve();
            });
        }, {
            defer: true,
        });
        const Algorithm = subtleCryptoAlgorithmName === 'SHA-1'
            ? asmCrypto.Sha1
            : subtleCryptoAlgorithmName === 'SHA-256'
                ? asmCrypto.Sha256
                : asmCrypto.Sha512;
        s.bench('asmcrypto.js', () => {
            const instance = new Algorithm();
            hash = instance.process(message).finish().result;
        });
    }
});
const MB = 1000000;
const incrementalBrowserBenchmark = async ({ chunkSize, hashFunction, hashFunctionName, totalInput, }) => chuhai_1.default(`browser: ${hashFunctionName}: incrementally hash a ${totalInput / MB}MB input in ${chunkSize / MB}MB chunks`, (s) => {
    let message;
    let messageChunks;
    let hash;
    const nextCycle = () => {
        /**
         * We can't get this much entropy, so we just use 0s here.
         */
        message = new Uint8Array(totalInput).fill(0);
        const chunkCount = Math.ceil(message.length / chunkSize);
        messageChunks = Array.from({ length: chunkCount }).map((_, index) => message.slice(index * chunkSize, index * chunkSize + chunkSize));
    };
    nextCycle();
    s.cycle(() => {
        if (hash === null) {
            benchError(`asmcrypto.js produced a null result given message: ${message.toString()}`);
        }
        else {
            compare(new Uint8Array(hash), hashFunction.hash(message));
        }
        nextCycle();
    });
    s.bench('bitcoin-ts', () => {
        hash = hashFunction.final(messageChunks.reduce((state, chunk) => hashFunction.update(state, chunk), hashFunction.init()));
    });
    s.bench('hash.js', () => {
        hash = messageChunks
            .reduce((state, chunk) => state.update(chunk), hashJs[hashFunctionName]())
            .digest();
    });
    if (hashFunctionName !== 'ripemd160') {
        const Algorithm = hashFunctionName === 'sha1'
            ? asmCrypto.Sha1
            : hashFunctionName === 'sha256'
                ? asmCrypto.Sha256
                : asmCrypto.Sha512;
        s.bench('asmcrypto.js', () => {
            const instance = new Algorithm();
            hash = instance.process(message).finish().result;
        });
    }
});
const browserBenchmarks = async ({ hashFunction, hashFunctionName, subtleCryptoAlgorithmName, }) => {
    /* eslint-disable @typescript-eslint/no-magic-numbers */
    await singlePassBrowserBenchmark({
        hashFunction,
        hashFunctionName,
        inputLength: 32,
        subtleCryptoAlgorithmName,
    });
    await singlePassBrowserBenchmark({
        hashFunction,
        hashFunctionName,
        inputLength: 100,
        subtleCryptoAlgorithmName,
    });
    await singlePassBrowserBenchmark({
        hashFunction,
        hashFunctionName,
        inputLength: 1000,
        subtleCryptoAlgorithmName,
    });
    await singlePassBrowserBenchmark({
        hashFunction,
        hashFunctionName,
        inputLength: 10000,
        subtleCryptoAlgorithmName,
    });
    await incrementalBrowserBenchmark({
        chunkSize: MB,
        hashFunction,
        hashFunctionName,
        totalInput: MB * 32,
    });
    /* eslint-enable @typescript-eslint/no-magic-numbers */
};
(async () => {
    const sha1 = await crypto_1.instantiateSha1();
    const sha256 = await crypto_1.instantiateSha256();
    const sha512 = await crypto_1.instantiateSha512();
    const ripemd160 = await crypto_1.instantiateRipemd160();
    await browserBenchmarks({
        hashFunction: sha1,
        hashFunctionName: 'sha1',
        subtleCryptoAlgorithmName: 'SHA-1',
    });
    await browserBenchmarks({
        hashFunction: sha256,
        hashFunctionName: 'sha256',
        subtleCryptoAlgorithmName: 'SHA-256',
    });
    await browserBenchmarks({
        hashFunction: sha512,
        hashFunctionName: 'sha512',
        subtleCryptoAlgorithmName: 'SHA-512',
    });
    await browserBenchmarks({
        hashFunction: ripemd160,
        hashFunctionName: 'ripemd160',
    });
    benchComplete();
})().catch((err) => {
    // eslint-disable-next-line no-console
    console.error(err);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaC5icm93c2VyLmJlbmNoLmhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY3J5cHRvL2hhc2guYnJvd3Nlci5iZW5jaC5oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsMkJBQTJCO0FBQzNCLGtJQUFrSTtBQUNsSSx3REFBMEM7QUFDMUMsb0RBQTJCO0FBQzNCLGdEQUFrQztBQUlsQyxxQ0FLa0I7QUFPbEIsOERBQThEO0FBQzlELE1BQU0sWUFBWSxHQUFHLENBQUMsS0FBVSxFQUF1QixFQUFFLFdBQ3ZELE9BQUEsT0FBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsV0FBVywwQ0FBRSxJQUFJLE1BQUssWUFBWSxDQUFBLEVBQUEsQ0FBQztBQUU1QyxNQUFNLE9BQU8sR0FBRyxDQUFDLENBQWMsRUFBRSxDQUFjLEVBQUUsRUFBRTtJQUNqRCxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7UUFDekUsNEVBQTRFO1FBQzVFLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM3RDtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FDcEMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRWhELE1BQU0sMEJBQTBCLEdBQUcsS0FBSyxFQUFFLEVBQ3hDLFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsV0FBVyxFQUNYLHlCQUF5QixHQU0xQixFQUFFLEVBQUUsQ0FDSCxnQkFBSyxDQUNILFlBQVksZ0JBQWdCLFlBQVksV0FBVyxhQUFhLEVBQ2hFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDSixJQUFJLE9BQU8sR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdkMsSUFBSSxJQUF1QixDQUFDO0lBRTVCLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO1FBQ1gsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQ2pCLFVBQVUsQ0FDUixzREFBc0QsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQzNFLENBQUM7U0FDSDthQUFNO1lBQ0wsT0FBTyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBRUgsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1FBQ3pCLElBQUksR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBRUgsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1FBQ3RCLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FDbkIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQ3BELENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksT0FBTyx5QkFBeUIsS0FBSyxRQUFRLEVBQUU7UUFDakQsQ0FBQyxDQUFDLEtBQUssQ0FDTCxlQUFlLEVBQ2YsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNYLG1FQUFtRTtZQUNuRSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU07aUJBQ2pCLE1BQU0sQ0FBQyx5QkFBeUIsRUFBRSxPQUFPLENBQUM7aUJBQzFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO2dCQUNmLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDOUIsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3JCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxFQUNEO1lBQ0UsS0FBSyxFQUFFLElBQUk7U0FDWixDQUNGLENBQUM7UUFDRixNQUFNLFNBQVMsR0FDYix5QkFBeUIsS0FBSyxPQUFPO1lBQ25DLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSTtZQUNoQixDQUFDLENBQUMseUJBQXlCLEtBQUssU0FBUztnQkFDekMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNO2dCQUNsQixDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUN2QixDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7WUFDM0IsTUFBTSxRQUFRLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUNqQyxJQUFJLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7S0FDSjtBQUNILENBQUMsQ0FDRixDQUFDO0FBRUosTUFBTSxFQUFFLEdBQUcsT0FBUyxDQUFDO0FBRXJCLE1BQU0sMkJBQTJCLEdBQUcsS0FBSyxFQUFFLEVBQ3pDLFNBQVMsRUFDVCxZQUFZLEVBQ1osZ0JBQWdCLEVBQ2hCLFVBQVUsR0FNWCxFQUFFLEVBQUUsQ0FDSCxnQkFBSyxDQUNILFlBQVksZ0JBQWdCLDBCQUMxQixVQUFVLEdBQUcsRUFDZixlQUFlLFNBQVMsR0FBRyxFQUFFLFdBQVcsRUFDeEMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUNKLElBQUksT0FBbUIsQ0FBQztJQUN4QixJQUFJLGFBQW9DLENBQUM7SUFDekMsSUFBSSxJQUF5RCxDQUFDO0lBRTlELE1BQU0sU0FBUyxHQUFHLEdBQUcsRUFBRTtRQUNyQjs7V0FFRztRQUNILE9BQU8sR0FBRyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQ3pELGFBQWEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQ2xFLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLFNBQVMsRUFBRSxLQUFLLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUNoRSxDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBQ0YsU0FBUyxFQUFFLENBQUM7SUFFWixDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtRQUNYLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtZQUNqQixVQUFVLENBQ1Isc0RBQXNELE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUMzRSxDQUFDO1NBQ0g7YUFBTTtZQUNMLE9BQU8sQ0FBQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDM0Q7UUFDRCxTQUFTLEVBQUUsQ0FBQztJQUNkLENBQUMsQ0FBQyxDQUFDO0lBRUgsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1FBQ3pCLElBQUksR0FBRyxZQUFZLENBQUMsS0FBSyxDQUN2QixhQUFhLENBQUMsTUFBTSxDQUNsQixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUNuRCxZQUFZLENBQUMsSUFBSSxFQUFFLENBQ3BCLENBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1FBQ3RCLElBQUksR0FBRyxhQUFhO2FBQ2pCLE1BQU0sQ0FDTCxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQ3JDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQzNCO2FBQ0EsTUFBTSxFQUFFLENBQUM7SUFDZCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksZ0JBQWdCLEtBQUssV0FBVyxFQUFFO1FBQ3BDLE1BQU0sU0FBUyxHQUNiLGdCQUFnQixLQUFLLE1BQU07WUFDekIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJO1lBQ2hCLENBQUMsQ0FBQyxnQkFBZ0IsS0FBSyxRQUFRO2dCQUMvQixDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU07Z0JBQ2xCLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtZQUMzQixNQUFNLFFBQVEsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO1lBQ2pDLElBQUksR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQztRQUNuRCxDQUFDLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQyxDQUNGLENBQUM7QUFFSixNQUFNLGlCQUFpQixHQUFHLEtBQUssRUFBRSxFQUMvQixZQUFZLEVBQ1osZ0JBQWdCLEVBQ2hCLHlCQUF5QixHQUsxQixFQUFFLEVBQUU7SUFDSCx3REFBd0Q7SUFDeEQsTUFBTSwwQkFBMEIsQ0FBQztRQUMvQixZQUFZO1FBQ1osZ0JBQWdCO1FBQ2hCLFdBQVcsRUFBRSxFQUFFO1FBQ2YseUJBQXlCO0tBQzFCLENBQUMsQ0FBQztJQUNILE1BQU0sMEJBQTBCLENBQUM7UUFDL0IsWUFBWTtRQUNaLGdCQUFnQjtRQUNoQixXQUFXLEVBQUUsR0FBRztRQUNoQix5QkFBeUI7S0FDMUIsQ0FBQyxDQUFDO0lBQ0gsTUFBTSwwQkFBMEIsQ0FBQztRQUMvQixZQUFZO1FBQ1osZ0JBQWdCO1FBQ2hCLFdBQVcsRUFBRSxJQUFLO1FBQ2xCLHlCQUF5QjtLQUMxQixDQUFDLENBQUM7SUFDSCxNQUFNLDBCQUEwQixDQUFDO1FBQy9CLFlBQVk7UUFDWixnQkFBZ0I7UUFDaEIsV0FBVyxFQUFFLEtBQU07UUFDbkIseUJBQXlCO0tBQzFCLENBQUMsQ0FBQztJQUNILE1BQU0sMkJBQTJCLENBQUM7UUFDaEMsU0FBUyxFQUFFLEVBQUU7UUFDYixZQUFZO1FBQ1osZ0JBQWdCO1FBQ2hCLFVBQVUsRUFBRSxFQUFFLEdBQUcsRUFBRTtLQUNwQixDQUFDLENBQUM7SUFDSCx1REFBdUQ7QUFDekQsQ0FBQyxDQUFDO0FBRUYsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNWLE1BQU0sSUFBSSxHQUFHLE1BQU0sd0JBQWUsRUFBRSxDQUFDO0lBQ3JDLE1BQU0sTUFBTSxHQUFHLE1BQU0sMEJBQWlCLEVBQUUsQ0FBQztJQUN6QyxNQUFNLE1BQU0sR0FBRyxNQUFNLDBCQUFpQixFQUFFLENBQUM7SUFDekMsTUFBTSxTQUFTLEdBQUcsTUFBTSw2QkFBb0IsRUFBRSxDQUFDO0lBRS9DLE1BQU0saUJBQWlCLENBQUM7UUFDdEIsWUFBWSxFQUFFLElBQUk7UUFDbEIsZ0JBQWdCLEVBQUUsTUFBTTtRQUN4Qix5QkFBeUIsRUFBRSxPQUFPO0tBQ25DLENBQUMsQ0FBQztJQUNILE1BQU0saUJBQWlCLENBQUM7UUFDdEIsWUFBWSxFQUFFLE1BQU07UUFDcEIsZ0JBQWdCLEVBQUUsUUFBUTtRQUMxQix5QkFBeUIsRUFBRSxTQUFTO0tBQ3JDLENBQUMsQ0FBQztJQUNILE1BQU0saUJBQWlCLENBQUM7UUFDdEIsWUFBWSxFQUFFLE1BQU07UUFDcEIsZ0JBQWdCLEVBQUUsUUFBUTtRQUMxQix5QkFBeUIsRUFBRSxTQUFTO0tBQ3JDLENBQUMsQ0FBQztJQUNILE1BQU0saUJBQWlCLENBQUM7UUFDdEIsWUFBWSxFQUFFLFNBQVM7UUFDdkIsZ0JBQWdCLEVBQUUsV0FBVztLQUM5QixDQUFDLENBQUM7SUFFSCxhQUFhLEVBQUUsQ0FBQztBQUNsQixDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO0lBQ2pCLHNDQUFzQztJQUN0QyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLENBQUMsQ0FBQyxDQUFDIn0=
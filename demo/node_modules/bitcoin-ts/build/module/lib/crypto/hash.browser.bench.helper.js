/* global window, crypto */
/* eslint-disable functional/no-let, init-declarations, functional/no-expression-statement, functional/no-conditional-statement */
import * as asmCrypto from 'asmcrypto.js';
import suite from 'chuhai';
import * as hashJs from 'hash.js';
import { instantiateRipemd160, instantiateSha1, instantiateSha256, instantiateSha512, } from './crypto';
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isUint8Array = (array) => array?.constructor?.name === 'Uint8Array';
const compare = (a, b) => {
    if (!isUint8Array(a) || !isUint8Array(b) || a.toString() !== b.toString()) {
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        benchError(`\nInvalid result: ${a} is not equal to ${b}\n`);
    }
};
const randomBytes = (bytes) => crypto.getRandomValues(new Uint8Array(bytes));
const singlePassBrowserBenchmark = async ({ hashFunction, hashFunctionName, inputLength, subtleCryptoAlgorithmName, }) => suite(`browser: ${hashFunctionName}: hash a ${inputLength}-byte input`, (s) => {
    let message = randomBytes(inputLength);
    let hash;
    s.cycle(() => {
        if (hash === null) {
            benchError(`asmcrypto.js produced a null result given message: ${message.toString()}`);
        }
        else {
            compare(hash, hashFunction.hash(message));
        }
        message = randomBytes(inputLength);
    });
    s.bench('bitcoin-ts', () => {
        hash = hashFunction.hash(message);
    });
    s.bench('hash.js', () => {
        hash = new Uint8Array(hashJs[hashFunctionName]().update(message).digest());
    });
    if (typeof subtleCryptoAlgorithmName === 'string') {
        s.bench('crypto.subtle', (deferred) => {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            window.crypto.subtle
                .digest(subtleCryptoAlgorithmName, message)
                .then((buffer) => {
                hash = new Uint8Array(buffer);
                deferred.resolve();
            });
        }, {
            defer: true,
        });
        const Algorithm = subtleCryptoAlgorithmName === 'SHA-1'
            ? asmCrypto.Sha1
            : subtleCryptoAlgorithmName === 'SHA-256'
                ? asmCrypto.Sha256
                : asmCrypto.Sha512;
        s.bench('asmcrypto.js', () => {
            const instance = new Algorithm();
            hash = instance.process(message).finish().result;
        });
    }
});
const MB = 1000000;
const incrementalBrowserBenchmark = async ({ chunkSize, hashFunction, hashFunctionName, totalInput, }) => suite(`browser: ${hashFunctionName}: incrementally hash a ${totalInput / MB}MB input in ${chunkSize / MB}MB chunks`, (s) => {
    let message;
    let messageChunks;
    let hash;
    const nextCycle = () => {
        /**
         * We can't get this much entropy, so we just use 0s here.
         */
        message = new Uint8Array(totalInput).fill(0);
        const chunkCount = Math.ceil(message.length / chunkSize);
        messageChunks = Array.from({ length: chunkCount }).map((_, index) => message.slice(index * chunkSize, index * chunkSize + chunkSize));
    };
    nextCycle();
    s.cycle(() => {
        if (hash === null) {
            benchError(`asmcrypto.js produced a null result given message: ${message.toString()}`);
        }
        else {
            compare(new Uint8Array(hash), hashFunction.hash(message));
        }
        nextCycle();
    });
    s.bench('bitcoin-ts', () => {
        hash = hashFunction.final(messageChunks.reduce((state, chunk) => hashFunction.update(state, chunk), hashFunction.init()));
    });
    s.bench('hash.js', () => {
        hash = messageChunks
            .reduce((state, chunk) => state.update(chunk), hashJs[hashFunctionName]())
            .digest();
    });
    if (hashFunctionName !== 'ripemd160') {
        const Algorithm = hashFunctionName === 'sha1'
            ? asmCrypto.Sha1
            : hashFunctionName === 'sha256'
                ? asmCrypto.Sha256
                : asmCrypto.Sha512;
        s.bench('asmcrypto.js', () => {
            const instance = new Algorithm();
            hash = instance.process(message).finish().result;
        });
    }
});
const browserBenchmarks = async ({ hashFunction, hashFunctionName, subtleCryptoAlgorithmName, }) => {
    /* eslint-disable @typescript-eslint/no-magic-numbers */
    await singlePassBrowserBenchmark({
        hashFunction,
        hashFunctionName,
        inputLength: 32,
        subtleCryptoAlgorithmName,
    });
    await singlePassBrowserBenchmark({
        hashFunction,
        hashFunctionName,
        inputLength: 100,
        subtleCryptoAlgorithmName,
    });
    await singlePassBrowserBenchmark({
        hashFunction,
        hashFunctionName,
        inputLength: 1000,
        subtleCryptoAlgorithmName,
    });
    await singlePassBrowserBenchmark({
        hashFunction,
        hashFunctionName,
        inputLength: 10000,
        subtleCryptoAlgorithmName,
    });
    await incrementalBrowserBenchmark({
        chunkSize: MB,
        hashFunction,
        hashFunctionName,
        totalInput: MB * 32,
    });
    /* eslint-enable @typescript-eslint/no-magic-numbers */
};
(async () => {
    const sha1 = await instantiateSha1();
    const sha256 = await instantiateSha256();
    const sha512 = await instantiateSha512();
    const ripemd160 = await instantiateRipemd160();
    await browserBenchmarks({
        hashFunction: sha1,
        hashFunctionName: 'sha1',
        subtleCryptoAlgorithmName: 'SHA-1',
    });
    await browserBenchmarks({
        hashFunction: sha256,
        hashFunctionName: 'sha256',
        subtleCryptoAlgorithmName: 'SHA-256',
    });
    await browserBenchmarks({
        hashFunction: sha512,
        hashFunctionName: 'sha512',
        subtleCryptoAlgorithmName: 'SHA-512',
    });
    await browserBenchmarks({
        hashFunction: ripemd160,
        hashFunctionName: 'ripemd160',
    });
    benchComplete();
})().catch((err) => {
    // eslint-disable-next-line no-console
    console.error(err);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaC5icm93c2VyLmJlbmNoLmhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY3J5cHRvL2hhc2guYnJvd3Nlci5iZW5jaC5oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCO0FBQzNCLGtJQUFrSTtBQUNsSSxPQUFPLEtBQUssU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUMxQyxPQUFPLEtBQUssTUFBTSxRQUFRLENBQUM7QUFDM0IsT0FBTyxLQUFLLE1BQU0sTUFBTSxTQUFTLENBQUM7QUFJbEMsT0FBTyxFQUNMLG9CQUFvQixFQUNwQixlQUFlLEVBQ2YsaUJBQWlCLEVBQ2pCLGlCQUFpQixHQUNsQixNQUFNLFVBQVUsQ0FBQztBQU9sQiw4REFBOEQ7QUFDOUQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFVLEVBQXVCLEVBQUUsQ0FDdkQsS0FBSyxFQUFFLFdBQVcsRUFBRSxJQUFJLEtBQUssWUFBWSxDQUFDO0FBRTVDLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBYyxFQUFFLENBQWMsRUFBRSxFQUFFO0lBQ2pELElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtRQUN6RSw0RUFBNEU7UUFDNUUsVUFBVSxDQUFDLHFCQUFxQixDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzdEO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUNwQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFaEQsTUFBTSwwQkFBMEIsR0FBRyxLQUFLLEVBQUUsRUFDeEMsWUFBWSxFQUNaLGdCQUFnQixFQUNoQixXQUFXLEVBQ1gseUJBQXlCLEdBTTFCLEVBQUUsRUFBRSxDQUNILEtBQUssQ0FDSCxZQUFZLGdCQUFnQixZQUFZLFdBQVcsYUFBYSxFQUNoRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ0osSUFBSSxPQUFPLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZDLElBQUksSUFBdUIsQ0FBQztJQUU1QixDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtRQUNYLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtZQUNqQixVQUFVLENBQ1Isc0RBQXNELE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUMzRSxDQUFDO1NBQ0g7YUFBTTtZQUNMLE9BQU8sQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQzNDO1FBQ0QsT0FBTyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUMsQ0FBQztJQUVILENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtRQUN6QixJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztJQUVILENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtRQUN0QixJQUFJLEdBQUcsSUFBSSxVQUFVLENBQ25CLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUNwRCxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLE9BQU8seUJBQXlCLEtBQUssUUFBUSxFQUFFO1FBQ2pELENBQUMsQ0FBQyxLQUFLLENBQ0wsZUFBZSxFQUNmLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDWCxtRUFBbUU7WUFDbkUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNO2lCQUNqQixNQUFNLENBQUMseUJBQXlCLEVBQUUsT0FBTyxDQUFDO2lCQUMxQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDZixJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzlCLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNyQixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsRUFDRDtZQUNFLEtBQUssRUFBRSxJQUFJO1NBQ1osQ0FDRixDQUFDO1FBQ0YsTUFBTSxTQUFTLEdBQ2IseUJBQXlCLEtBQUssT0FBTztZQUNuQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUk7WUFDaEIsQ0FBQyxDQUFDLHlCQUF5QixLQUFLLFNBQVM7Z0JBQ3pDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTTtnQkFDbEIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDdkIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFO1lBQzNCLE1BQU0sUUFBUSxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7WUFDakMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO0tBQ0o7QUFDSCxDQUFDLENBQ0YsQ0FBQztBQUVKLE1BQU0sRUFBRSxHQUFHLE9BQVMsQ0FBQztBQUVyQixNQUFNLDJCQUEyQixHQUFHLEtBQUssRUFBRSxFQUN6QyxTQUFTLEVBQ1QsWUFBWSxFQUNaLGdCQUFnQixFQUNoQixVQUFVLEdBTVgsRUFBRSxFQUFFLENBQ0gsS0FBSyxDQUNILFlBQVksZ0JBQWdCLDBCQUMxQixVQUFVLEdBQUcsRUFDZixlQUFlLFNBQVMsR0FBRyxFQUFFLFdBQVcsRUFDeEMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUNKLElBQUksT0FBbUIsQ0FBQztJQUN4QixJQUFJLGFBQW9DLENBQUM7SUFDekMsSUFBSSxJQUF5RCxDQUFDO0lBRTlELE1BQU0sU0FBUyxHQUFHLEdBQUcsRUFBRTtRQUNyQjs7V0FFRztRQUNILE9BQU8sR0FBRyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQ3pELGFBQWEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQ2xFLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLFNBQVMsRUFBRSxLQUFLLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUNoRSxDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBQ0YsU0FBUyxFQUFFLENBQUM7SUFFWixDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtRQUNYLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtZQUNqQixVQUFVLENBQ1Isc0RBQXNELE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUMzRSxDQUFDO1NBQ0g7YUFBTTtZQUNMLE9BQU8sQ0FBQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDM0Q7UUFDRCxTQUFTLEVBQUUsQ0FBQztJQUNkLENBQUMsQ0FBQyxDQUFDO0lBRUgsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1FBQ3pCLElBQUksR0FBRyxZQUFZLENBQUMsS0FBSyxDQUN2QixhQUFhLENBQUMsTUFBTSxDQUNsQixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUNuRCxZQUFZLENBQUMsSUFBSSxFQUFFLENBQ3BCLENBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1FBQ3RCLElBQUksR0FBRyxhQUFhO2FBQ2pCLE1BQU0sQ0FDTCxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQ3JDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQzNCO2FBQ0EsTUFBTSxFQUFFLENBQUM7SUFDZCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksZ0JBQWdCLEtBQUssV0FBVyxFQUFFO1FBQ3BDLE1BQU0sU0FBUyxHQUNiLGdCQUFnQixLQUFLLE1BQU07WUFDekIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJO1lBQ2hCLENBQUMsQ0FBQyxnQkFBZ0IsS0FBSyxRQUFRO2dCQUMvQixDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU07Z0JBQ2xCLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtZQUMzQixNQUFNLFFBQVEsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO1lBQ2pDLElBQUksR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQztRQUNuRCxDQUFDLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQyxDQUNGLENBQUM7QUFFSixNQUFNLGlCQUFpQixHQUFHLEtBQUssRUFBRSxFQUMvQixZQUFZLEVBQ1osZ0JBQWdCLEVBQ2hCLHlCQUF5QixHQUsxQixFQUFFLEVBQUU7SUFDSCx3REFBd0Q7SUFDeEQsTUFBTSwwQkFBMEIsQ0FBQztRQUMvQixZQUFZO1FBQ1osZ0JBQWdCO1FBQ2hCLFdBQVcsRUFBRSxFQUFFO1FBQ2YseUJBQXlCO0tBQzFCLENBQUMsQ0FBQztJQUNILE1BQU0sMEJBQTBCLENBQUM7UUFDL0IsWUFBWTtRQUNaLGdCQUFnQjtRQUNoQixXQUFXLEVBQUUsR0FBRztRQUNoQix5QkFBeUI7S0FDMUIsQ0FBQyxDQUFDO0lBQ0gsTUFBTSwwQkFBMEIsQ0FBQztRQUMvQixZQUFZO1FBQ1osZ0JBQWdCO1FBQ2hCLFdBQVcsRUFBRSxJQUFLO1FBQ2xCLHlCQUF5QjtLQUMxQixDQUFDLENBQUM7SUFDSCxNQUFNLDBCQUEwQixDQUFDO1FBQy9CLFlBQVk7UUFDWixnQkFBZ0I7UUFDaEIsV0FBVyxFQUFFLEtBQU07UUFDbkIseUJBQXlCO0tBQzFCLENBQUMsQ0FBQztJQUNILE1BQU0sMkJBQTJCLENBQUM7UUFDaEMsU0FBUyxFQUFFLEVBQUU7UUFDYixZQUFZO1FBQ1osZ0JBQWdCO1FBQ2hCLFVBQVUsRUFBRSxFQUFFLEdBQUcsRUFBRTtLQUNwQixDQUFDLENBQUM7SUFDSCx1REFBdUQ7QUFDekQsQ0FBQyxDQUFDO0FBRUYsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNWLE1BQU0sSUFBSSxHQUFHLE1BQU0sZUFBZSxFQUFFLENBQUM7SUFDckMsTUFBTSxNQUFNLEdBQUcsTUFBTSxpQkFBaUIsRUFBRSxDQUFDO0lBQ3pDLE1BQU0sTUFBTSxHQUFHLE1BQU0saUJBQWlCLEVBQUUsQ0FBQztJQUN6QyxNQUFNLFNBQVMsR0FBRyxNQUFNLG9CQUFvQixFQUFFLENBQUM7SUFFL0MsTUFBTSxpQkFBaUIsQ0FBQztRQUN0QixZQUFZLEVBQUUsSUFBSTtRQUNsQixnQkFBZ0IsRUFBRSxNQUFNO1FBQ3hCLHlCQUF5QixFQUFFLE9BQU87S0FDbkMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxpQkFBaUIsQ0FBQztRQUN0QixZQUFZLEVBQUUsTUFBTTtRQUNwQixnQkFBZ0IsRUFBRSxRQUFRO1FBQzFCLHlCQUF5QixFQUFFLFNBQVM7S0FDckMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxpQkFBaUIsQ0FBQztRQUN0QixZQUFZLEVBQUUsTUFBTTtRQUNwQixnQkFBZ0IsRUFBRSxRQUFRO1FBQzFCLHlCQUF5QixFQUFFLFNBQVM7S0FDckMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxpQkFBaUIsQ0FBQztRQUN0QixZQUFZLEVBQUUsU0FBUztRQUN2QixnQkFBZ0IsRUFBRSxXQUFXO0tBQzlCLENBQUMsQ0FBQztJQUVILGFBQWEsRUFBRSxDQUFDO0FBQ2xCLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7SUFDakIsc0NBQXNDO0lBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDckIsQ0FBQyxDQUFDLENBQUMifQ==
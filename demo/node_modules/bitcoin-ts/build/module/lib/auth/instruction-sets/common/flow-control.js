import { opNot } from './arithmetic';
import { conditionallyEvaluate, useOneStackItem } from './combinators';
import { stackItemIsTruthy } from './common';
import { applyError, AuthenticationErrorCommon } from './errors';
import { OpcodesCommon } from './opcodes';
export const opVerify = () => (state) => useOneStackItem(state, (nextState, [item]) => stackItemIsTruthy(item)
    ? nextState
    : applyError(AuthenticationErrorCommon.failedVerify, nextState));
export const reservedOperation = () => (state) => applyError(AuthenticationErrorCommon.calledReserved, state);
export const opReturn = () => (state) => applyError(AuthenticationErrorCommon.calledReturn, state);
export const conditionalFlowControlOperations = () => ({
    [OpcodesCommon.OP_RESERVED]: reservedOperation(),
    [OpcodesCommon.OP_VER]: reservedOperation(),
    [OpcodesCommon.OP_VERIFY]: opVerify(),
    [OpcodesCommon.OP_RETURN]: opReturn(),
    [OpcodesCommon.OP_RESERVED1]: reservedOperation(),
    [OpcodesCommon.OP_RESERVED2]: reservedOperation(),
});
export const opIf = () => (state) => {
    if (state.executionStack.every((item) => item)) {
        // eslint-disable-next-line functional/immutable-data
        const element = state.stack.pop();
        if (element === undefined) {
            return applyError(AuthenticationErrorCommon.emptyStack, state);
        }
        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
        state.executionStack.push(stackItemIsTruthy(element));
        return state;
    }
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    state.executionStack.push(false);
    return state;
};
export const opNotIf = (flags) => {
    const not = conditionallyEvaluate(opNot(flags));
    const ifOp = opIf();
    return (state) => ifOp(not(state));
};
export const opEndIf = () => (state) => {
    // eslint-disable-next-line functional/immutable-data
    const element = state.executionStack.pop();
    if (element === undefined) {
        return applyError(AuthenticationErrorCommon.unexpectedEndIf, state);
    }
    return state;
};
export const opElse = () => (state) => {
    const top = state.executionStack[state.executionStack.length - 1];
    if (top === undefined) {
        return applyError(AuthenticationErrorCommon.unexpectedElse, state);
    }
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    state.executionStack[state.executionStack.length - 1] = !top;
    return state;
};
export const unconditionalFlowControlOperations = (flags) => ({
    [OpcodesCommon.OP_IF]: opIf(),
    [OpcodesCommon.OP_NOTIF]: opNotIf(flags),
    [OpcodesCommon.OP_VERIF]: reservedOperation(),
    [OpcodesCommon.OP_VERNOTIF]: reservedOperation(),
    [OpcodesCommon.OP_ELSE]: opElse(),
    [OpcodesCommon.OP_ENDIF]: opEndIf(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxvdy1jb250cm9sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9hdXRoL2luc3RydWN0aW9uLXNldHMvY29tbW9uL2Zsb3ctY29udHJvbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxlQUFlLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDakUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUUxQyxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsR0FHRixFQUFFLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUN4QyxlQUFlLENBQUMsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUMzQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQyxDQUFDLFNBQVM7SUFDWCxDQUFDLENBQUMsVUFBVSxDQUNSLHlCQUF5QixDQUFDLFlBQVksRUFDdEMsU0FBUyxDQUNWLENBQ04sQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEdBRzdCLEVBQUUsQ0FBQyxDQUFDLEtBQVksRUFBRSxFQUFFLENBQ3RCLFVBQVUsQ0FBZ0IseUJBQXlCLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBRTdFLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxHQUE2QyxFQUFFLENBQUMsQ0FDdEUsS0FBWSxFQUNaLEVBQUUsQ0FBQyxVQUFVLENBQWdCLHlCQUF5QixDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUU5RSxNQUFNLENBQUMs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
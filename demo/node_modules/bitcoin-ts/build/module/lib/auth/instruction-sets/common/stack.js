import { pushToStack, useFourStackItems, useOneScriptNumber, useOneStackItem, useSixStackItems, useThreeStackItems, useTwoStackItems, } from './combinators';
import { applyError, AuthenticationErrorCommon } from './errors';
import { OpcodesCommon } from './opcodes';
import { bigIntToScriptNumber, stackItemIsTruthy } from './types';
export const opToAltStack = () => (state) => useOneStackItem(state, (nextState, [item]) => {
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    nextState.alternateStack.push(item);
    return nextState;
});
export const opFromAltStack = () => (state) => {
    // eslint-disable-next-line functional/immutable-data
    const item = state.alternateStack.pop();
    if (item === undefined) {
        return applyError(AuthenticationErrorCommon.emptyAlternateStack, state);
    }
    return pushToStack(state, item);
};
export const op2Drop = () => (state) => useTwoStackItems(state, (nextState) => nextState);
export const op2Dup = () => (state) => useTwoStackItems(state, (nextState, [a, b]) => pushToStack(nextState, a, b, a.slice(), b.slice()));
export const op3Dup = () => (state) => useThreeStackItems(state, (nextState, [a, b, c]) => pushToStack(nextState, a, b, c, a.slice(), b.slice(), c.slice()));
export const op2Over = () => (state) => useFourStackItems(state, (nextState, [a, b, c, d]) => pushToStack(nextState, a, b, c, d, a.slice(), b.slice()));
export const op2Rot = () => (state) => useSixStackItems(state, (nextState, [a, b, c, d, e, f]) => pushToStack(nextState, c, d, e, f, a, b));
export const op2Swap = () => (state) => useFourStackItems(state, (nextState, [a, b, c, d]) => pushToStack(nextState, c, d, a, b));
export const opIfDup = () => (state) => useOneStackItem(state, (nextState, [item]) => pushToStack(nextState, ...(stackItemIsTruthy(item) ? [item, item.slice()] : [item])));
export const opDepth = () => (state) => pushToStack(state, bigIntToScriptNumber(BigInt(state.stack.length)));
export const opDrop = () => (state) => useOneStackItem(state, (nextState) => nextState);
export const opDup = () => (state) => useOneStackItem(state, (nextState, [item]) => pushToStack(nextState, item, item.slice()));
export const opNip = () => (state) => useTwoStackItems(state, (nextState, [, b]) => pushToStack(nextState, b));
export const opOver = () => (state) => useTwoStackItems(state, (nextState, [a, b]) => pushToStack(nextState, a, b, a.slice()));
export const opPick = ({ requireMinimalEncoding, }) => (state) => useOneScriptNumber(state, (nextState, depth) => {
    const item = nextState.stack[nextState.stack.length - 1 - Number(depth)];
    if (item === undefined) {
        return applyError(AuthenticationErrorCommon.invalidStackIndex, state);
    }
    return pushToStack(nextState, item.slice());
}, { requireMinimalEncoding });
export const opRoll = ({ requireMinimalEncoding, }) => (state) => useOneScriptNumber(state, (nextState, depth) => {
    const index = nextState.stack.length - 1 - Number(depth);
    if (index < 0 || index > nextState.stack.length - 1) {
        return applyError(AuthenticationErrorCommon.invalidStackIndex, state);
    }
    // eslint-disable-next-line functional/immutable-data
    return pushToStack(nextState, nextState.stack.splice(index, 1)[0]);
}, { requireMinimalEncoding });
export const opRot = () => (state) => useThreeStackItems(state, (nextState, [a, b, c]) => pushToStack(nextState, b, c, a));
export const opSwap = () => (state) => useTwoStackItems(state, (nextState, [a, b]) => pushToStack(nextState, b, a));
export const opTuck = () => (state) => useTwoStackItems(state, (nextState, [a, b]) => pushToStack(nextState, b.slice(), a, b));
export const stackOperations = (flags) => ({
    [OpcodesCommon.OP_TOALTSTACK]: opToAltStack(),
    [OpcodesCommon.OP_FROMALTSTACK]: opFromAltStack(),
    [OpcodesCommon.OP_2DROP]: op2Drop(),
    [OpcodesCommon.OP_2DUP]: op2Dup(),
    [OpcodesCommon.OP_3DUP]: op3Dup(),
    [OpcodesCommon.OP_2OVER]: op2Over(),
    [OpcodesCommon.OP_2ROT]: op2Rot(),
    [OpcodesCommon.OP_2SWAP]: op2Swap(),
    [OpcodesCommon.OP_IFDUP]: opIfDup(),
    [OpcodesCommon.OP_DEPTH]: opDepth(),
    [OpcodesCommon.OP_DROP]: opDrop(),
    [OpcodesCommon.OP_DUP]: opDup(),
    [OpcodesCommon.OP_NIP]: opNip(),
    [OpcodesCommon.OP_OVER]: opOver(),
    [OpcodesCommon.OP_PICK]: opPick(flags),
    [OpcodesCommon.OP_ROLL]: opRoll(flags),
    [OpcodesCommon.OP_ROT]: opRot(),
    [OpcodesCommon.OP_SWAP]: opSwap(),
    [OpcodesCommon.OP_TUCK]: opTuck(),
});
//# sourceMappingURL=data:application/json;base64,
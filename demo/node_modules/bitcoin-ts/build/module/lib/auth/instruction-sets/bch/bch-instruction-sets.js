import { conditionallyEvaluate, incrementOperationCount, mapOverOperations, } from '../common/combinators';
import { applyError, AuthenticationErrorCommon, checkLimitsCommon, cloneAuthenticationProgramStateCommon, cloneStack, commonOperations, ConsensusCommon, createAuthenticationProgramExternalStateCommon, createAuthenticationProgramStateCommon, stackItemIsTruthy, undefinedOperation, } from '../common/common';
import { authenticationInstructionsAreMalformed, parseBytecode, } from '../instruction-sets-utils';
import { AuthenticationErrorBCH } from './bch-errors';
import { OpcodesBCH } from './bch-opcodes';
import { bitcoinCashOperations } from './bch-operations';
export { OpcodesBCH };
export const isPayToScriptHash = (verificationInstructions) => verificationInstructions.length === 3 /* length */ &&
    verificationInstructions[0].opcode ===
        OpcodesBCH.OP_HASH160 &&
    verificationInstructions[1].opcode ===
        OpcodesBCH.OP_PUSHBYTES_20 &&
    verificationInstructions[2 /* lastElement */]
        .opcode === OpcodesBCH.OP_EQUAL;
/**
 * Test a stack item for the SegWit Recovery Rules activated in `BCH_2019_05`.
 *
 * @param bytecode - the stack item to test
 */
// eslint-disable-next-line complexity
export const isWitnessProgram = (bytecode) => {
    const correctLength = bytecode.length >= 4 /* minimumLength */ &&
        bytecode.length <= 42 /* maximumLength */;
    const validVersionPush = bytecode[0] === 0 /* OP_0 */ ||
        (bytecode[0] >= 81 /* OP_1 */ && bytecode[0] <= 96 /* OP_16 */);
    const correctLengthByte = bytecode[1] + 2 /* versionAndLengthBytes */ === bytecode.length;
    return correctLength && validVersionPush && correctLengthByte;
};
/**
 * From C++ implementation:
 * Note that IsPushOnly() *does* consider OP_RESERVED to be a push-type
 * opcode, however execution of OP_RESERVED fails, so it's not relevant to
 * P2SH/BIP62 as the scriptSig would fail prior to the P2SH special
 * validation code being executed.
 */
const isPushOperation = (opcode) => opcode < OpcodesBCH.OP_16;
/**
 * This library's supported versions of the BCH virtual machine. "Strict"
 * versions (A.K.A. `isStandard` from the C++ implementations) enable additional
 * validation which is commonly used on the P2P network before relaying
 * transactions. Transactions which fail these rules are often called
 * "non-standard" â€“ the transactions can technically be included by miners in
 * valid blocks, but most network nodes will refuse to relay them.
 */
export var InstructionSetBCH;
(function (InstructionSetBCH) {
    InstructionSetBCH["BCH_2019_05"] = "BCH_2019_05";
    InstructionSetBCH["BCH_2019_05_STRICT"] = "BCH_2019_05_STRICT";
    InstructionSetBCH["BCH_2019_11_SPEC"] = "BCH_2019_11";
    InstructionSetBCH["BCH_2019_11_STRICT_SPEC"] = "BCH_2019_11_STRICT";
})(InstructionSetBCH || (InstructionSetBCH = {}));
export const instructionSetBCHCurrentStrict = InstructionSetBCH.BCH_2019_05_STRICT;
export const getFlagsForInstructionSetBCH = (instructionSet) => {
    switch (instructionSet) {
        case InstructionSetBCH.BCH_2019_05:
            return {
                disallowUpgradableNops: false,
                requireBugValueZero: false,
                requireMinimalEncoding: false,
                requireNullSignatureFailures: true,
            };
        case InstructionSetBCH.BCH_2019_05_STRICT:
            return {
                disallowUpgradableNops: true,
                requireBugValueZero: false,
                requireMinimalEncoding: true,
                requireNullSignatureFailures: true,
            };
        case InstructionSetBCH.BCH_2019_11_SPEC:
            return {
                disallowUpgradableNops: false,
                requireBugValueZero: true,
                requireMinimalEncoding: true,
                requireNullSignatureFailures: true,
            };
        case InstructionSetBCH.BCH_2019_11_STRICT_SPEC:
            return {
                disallowUpgradableNops: true,
                requireBugValueZero: true,
                requireMinimalEncoding: true,
                requireNullSignatureFailures: true,
            };
        default:
            return new Error(`${instructionSet} is not an instruction set.`);
    }
};
/**
 * Initialize a new instruction set for the BCH virtual machine.
 *
 * @param flags - an object configuring the flags for this vm (see
 * `getFlagsForInstructionSetBCH`)
 * @param sha1 - a Sha1 implementation
 * @param sha256 - a Sha256 implementation
 * @param ripemd160 - a Ripemd160 implementation
 * @param secp256k1 - a Secp256k1 implementation
 */
export const createInstructionSetBCH = ({ flags, ripemd160, secp256k1, sha1, sha256, }) => ({
    clone: cloneAuthenticationProgramStateCommon,
    continue: (state) => state.error === undefined && state.ip < state.instructions.length,
    // eslint-disable-next-line complexity
    evaluate: (program, stateEvaluate) => {
        const { unlockingBytecode } = program.spendingTransaction.inputs[program.inputIndex];
        const { lockingBytecode } = program.sourceOutput;
        const unlockingInstructions = parseBytecode(unlockingBytecode);
        const lockingInstructions = parseBytecode(lockingBytecode);
        const externalState = createAuthenticationProgramExternalStateCommon(program);
        const initialState = createAuthenticationProgramStateCommon(unlockingInstructions, [], externalState);
        const unlockingResult = unlockingBytecode.length > ConsensusCommon.maximumBytecodeLength
            ? applyError(AuthenticationErrorCommon.exceededMaximumBytecodeLengthUnlocking, initialState)
            : authenticationInstructionsAreMalformed(unlockingInstructions)
                ? applyError(AuthenticationErrorCommon.malformedUnlockingBytecode, initialState)
                : lockingBytecode.length > ConsensusCommon.maximumBytecodeLength
                    ? applyError(AuthenticationErrorCommon.exceededMaximumBytecodeLengthLocking, initialState)
                    : authenticationInstructionsAreMalformed(lockingInstructions)
                        ? applyError(AuthenticationErrorCommon.malformedLockingBytecode, initialState)
                        : initialState.instructions.every((instruction) => isPushOperation(instruction.opcode))
                            ? stateEvaluate(initialState)
                            : applyError(AuthenticationErrorBCH.requiresPushOnly, initialState);
        if (unlockingResult.error !== undefined) {
            return unlockingResult;
        }
        const lockingResult = stateEvaluate(createAuthenticationProgramStateCommon(lockingInstructions, unlockingResult.stack, externalState));
        if (!isPayToScriptHash(lockingInstructions)) {
            return lockingResult;
        }
        const p2shStack = cloneStack(unlockingResult.stack);
        // eslint-disable-next-line functional/immutable-data
        const p2shScript = p2shStack.pop() ?? Uint8Array.of();
        if (p2shStack.length === 0 && isWitnessProgram(p2shScript)) {
            return lockingResult;
        }
        const p2shInstructions = parseBytecode(p2shScript);
        return authenticationInstructionsAreMalformed(p2shInstructions)
            ? {
                ...lockingResult,
                error: AuthenticationErrorBCH.malformedP2shBytecode,
            }
            : stateEvaluate(createAuthenticationProgramStateCommon(p2shInstructions, p2shStack, externalState));
    },
    operations: {
        ...commonOperations({ flags, ripemd160, secp256k1, sha1, sha256 }),
        ...mapOverOperations(bitcoinCashOperations({
            flags,
            secp256k1,
            sha256,
        }), conditionallyEvaluate, incrementOperationCount, checkLimitsCommon),
    },
    ...undefinedOperation(),
    verify: (state) => state.error === undefined &&
        state.executionStack.length === 0 &&
        state.stack.length === 1 &&
        stackItemIsTruthy(state.stack[0]),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmNoLWluc3RydWN0aW9uLXNldHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2F1dGgvaW5zdHJ1Y3Rpb24tc2V0cy9iY2gvYmNoLWluc3RydWN0aW9uLXNldHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUNMLHFCQUFxQixFQUNyQix1QkFBdUIsRUFDdkIsaUJBQWlCLEdBQ2xCLE1BQU0sdUJBQXVCLENBQUM7QUFDL0IsT0FBTyxFQUNMLFVBQVUsRUFDVix5QkFBeUIsRUFDekIsaUJBQWlCLEVBQ2pCLHFDQUFxQyxFQUNyQyxVQUFVLEVBQ1YsZ0JBQWdCLEVBQ2hCLGVBQWUsRUFDZiw4Q0FBOEMsRUFDOUMsc0NBQXNDLEVBQ3RDLGlCQUFpQixFQUNqQixrQkFBa0IsR0FDbkIsTUFBTSxrQkFBa0IsQ0FBQztBQUUxQixPQUFPLEVBQ0wsc0NBQXNDLEVBQ3RDLGFBQWEsR0FDZCxNQUFNLDJCQUEyQixDQUFDO0FBRW5DLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBTXpELE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQztBQU90QixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUMvQix3QkFBdUUsRUFDdkUsRUFBRSxDQUNGLHdCQUF3QixDQUFDLE1BQU0sbUJBQTJCO0lBQ3hELHdCQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQTZCO1FBQ3pELFVBQVUsQ0FBQyxVQUFVO0lBQ3JCLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQTZCO1FBQ3pELFVBQVUsQ0FBQyxlQUFlO0lBQzFCLHdCQUF3QixxQkFBNkI7U0FDcEQsTUFBNkIsS0FBSyxVQUFVLENBQUMsUUFBUSxDQUFDO0FBVzNEOzs7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
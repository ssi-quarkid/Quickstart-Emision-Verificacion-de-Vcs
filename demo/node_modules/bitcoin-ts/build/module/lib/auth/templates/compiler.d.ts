import { AuthenticationProgramStateBCH } from '../instruction-sets/instruction-sets';
import { AuthenticationInstruction } from '../instruction-sets/instruction-sets-types';
import { MinimumProgramState, StackState } from '../state';
import { CompilationError, CompilationResult } from './language/compile';
import { CompilationData, CompilationEnvironment } from './language/resolve';
export interface CompilerOperationDataBCH {
    correspondingOutput?: Uint8Array;
    coveredBytecode: Uint8Array;
    locktime: number;
    outpointIndex: number;
    outpointTransactionHash: Uint8Array;
    outputValue: number;
    sequenceNumber: number;
    transactionOutpoints: Uint8Array;
    transactionOutputs: Uint8Array;
    transactionSequenceNumbers: Uint8Array;
    version: number;
}
export declare type CompilerOperationsKeyBCH = 'data_signature' | 'public_key' | 'schnorr_data_signature' | 'schnorr_signature' | 'signature';
export declare enum SigningSerializationAlgorithmIdentifier {
    /**
     * A.K.A. `SIGHASH_ALL`
     */
    all_outputs = "all_outputs",
    /**
     * A.K.A. `SIGHASH_ALL|ANYONE_CAN_PAY`
     */
    all_outputs_single_input = "all_outputs_single_input",
    /**
     * A.K.A. `SIGHASH_SINGLE`
     */
    corresponding_output = "corresponding_output",
    /**
     * A.K.A. `SIGHASH_SINGLE|ANYONE_CAN_PAY`
     */
    corresponding_output_single_input = "corresponding_output_single_input",
    /**
     * A.K.A `SIGHASH_NONE`
     */
    no_outputs = "no_outputs",
    /**
     * A.K.A `SIGHASH_NONE|ANYONE_CAN_PAY`
     */
    no_outputs_single_input = "no_outputs_single_input"
}
export declare type CompilerOperationsSigningSerializationFullBCH = 'full_all_outputs' | 'full_all_outputs_single_input' | 'full_corresponding_output' | 'full_corresponding_output_single_input' | 'full_no_outputs' | 'full_no_outputs_single_input';
export declare type CompilerOperationsSigningSerializationComponentBCH = 'version' | 'transaction_outpoints' | 'transaction_outpoints_hash' | 'transaction_sequence_numbers' | 'transaction_sequence_numbers_hash' | 'outpoint_transaction_hash' | 'outpoint_index' | 'covered_bytecode_length' | 'covered_bytecode' | 'output_value' | 'sequence_number' | 'corresponding_output' | 'corresponding_output_hash' | 'transaction_outputs' | 'transaction_outputs_hash' | 'locktime';
export declare type CompilerOperationsSigningSerializationBCH = CompilerOperationsSigningSerializationComponentBCH | CompilerOperationsSigningSerializationFullBCH;
export declare type CompilerOperationsBCH = CompilerOperationsKeyBCH | CompilerOperationsSigningSerializationBCH;
export declare const compilerOperationBCHGenerateSignature: <OperationData extends CompilerOperationDataBCH>(name: "signature" | "schnorr_signature", signingAlgorithm: (secp256k1: {
    signMessageHashSchnorr: (privateKey: Uint8Array, messageHash: Uint8Array) => Uint8Array;
    signMessageHashDER: (privateKey: Uint8Array, messageHash: Uint8Array) => Uint8Array;
}) => (privateKey: Uint8Array, messageHash: Uint8Array) => Uint8Array) => (identifier: string, data: Required<Pick<CompilationData<OperationData>, "keys">> & CompilationData<OperationData>, environment: CompilationEnvironment<OperationData, import("./language/resolve").CompilerOperationsMinimal>) => string | Uint8Array;
export declare const compilerOperationBCHGenerateDataSignature: <OperationData extends CompilerOperationDataBCH>(name: "data_signature" | "schnorr_data_signature", signingAlgorithm: (secp256k1: {
    signMessageHashSchnorr: (privateKey: Uint8Array, messageHash: Uint8Array) => Uint8Array;
    signMessageHashDER: (privateKey: Uint8Array, messageHash: Uint8Array) => Uint8Array;
}) => (privateKey: Uint8Array, messageHash: Uint8Array) => Uint8Array) => (identifier: string, data: Required<Pick<CompilationData<OperationData>, "keys">> & CompilationData<OperationData>, environment: CompilationEnvironment<OperationData, import("./language/resolve").CompilerOperationsMinimal>) => string | Uint8Array;
export declare const compilerOperationBCHGenerateSigningSerialization: <OperationData extends CompilerOperationDataBCH>(identifier: string, data: CompilationData<OperationData>, environment: CompilationEnvironment<OperationData, import("./language/resolve").CompilerOperationsMinimal>) => string | Uint8Array;
export declare const getCompilerOperationsBCH: () => {
    HDKey?: {
        version?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        locktime?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        public_key?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        transaction_outpoints?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        transaction_outpoints_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        transaction_sequence_numbers?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        transaction_sequence_numbers_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        outpoint_transaction_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        outpoint_index?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        covered_bytecode_length?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        covered_bytecode?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        output_value?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        sequence_number?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        corresponding_output?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        corresponding_output_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        transaction_outputs?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        transaction_outputs_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        full_all_outputs?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        full_all_outputs_single_input?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        full_corresponding_output?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        full_corresponding_output_single_input?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        full_no_outputs?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        full_no_outputs_single_input?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        data_signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        schnorr_data_signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
        schnorr_signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "HDKey"> | undefined;
    } | undefined;
    Key?: {
        version?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        locktime?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        public_key?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        transaction_outpoints?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        transaction_outpoints_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        transaction_sequence_numbers?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        transaction_sequence_numbers_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        outpoint_transaction_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        outpoint_index?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        covered_bytecode_length?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        covered_bytecode?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        output_value?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        sequence_number?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        corresponding_output?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        corresponding_output_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        transaction_outputs?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        transaction_outputs_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        full_all_outputs?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        full_all_outputs_single_input?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        full_corresponding_output?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        full_corresponding_output_single_input?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        full_no_outputs?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        full_no_outputs_single_input?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        data_signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        schnorr_data_signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
        schnorr_signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "Key"> | undefined;
    } | undefined;
    WalletData?: {
        version?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        locktime?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        public_key?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        transaction_outpoints?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        transaction_outpoints_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        transaction_sequence_numbers?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        transaction_sequence_numbers_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        outpoint_transaction_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        outpoint_index?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        covered_bytecode_length?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        covered_bytecode?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        output_value?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        sequence_number?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        corresponding_output?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        corresponding_output_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        transaction_outputs?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        transaction_outputs_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        full_all_outputs?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        full_all_outputs_single_input?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        full_corresponding_output?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        full_corresponding_output_single_input?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        full_no_outputs?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        full_no_outputs_single_input?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        data_signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        schnorr_data_signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
        schnorr_signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "WalletData"> | undefined;
    } | undefined;
    AddressData?: {
        version?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        locktime?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        public_key?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        transaction_outpoints?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        transaction_outpoints_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        transaction_sequence_numbers?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        transaction_sequence_numbers_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        outpoint_transaction_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        outpoint_index?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        covered_bytecode_length?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        covered_bytecode?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        output_value?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        sequence_number?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        corresponding_output?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        corresponding_output_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        transaction_outputs?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        transaction_outputs_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        full_all_outputs?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        full_all_outputs_single_input?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        full_corresponding_output?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        full_corresponding_output_single_input?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        full_no_outputs?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        full_no_outputs_single_input?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        data_signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        schnorr_data_signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
        schnorr_signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "AddressData"> | undefined;
    } | undefined;
    SigningSerialization?: {
        version?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        locktime?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        public_key?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        transaction_outpoints?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        transaction_outpoints_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        transaction_sequence_numbers?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        transaction_sequence_numbers_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        outpoint_transaction_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        outpoint_index?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        covered_bytecode_length?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        covered_bytecode?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        output_value?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        sequence_number?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        corresponding_output?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        corresponding_output_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        transaction_outputs?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        transaction_outputs_hash?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        full_all_outputs?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        full_all_outputs_single_input?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        full_corresponding_output?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        full_corresponding_output_single_input?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        full_no_outputs?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        full_no_outputs_single_input?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        data_signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        schnorr_data_signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
        schnorr_signature?: import("./language/resolve").CompilerOperation<CompilerOperationDataBCH, "SigningSerialization"> | undefined;
    } | undefined;
} | undefined;
export declare type BytecodeGenerationResult = {
    bytecode: Uint8Array;
    success: true;
} | {
    errors: CompilationError[];
    errorType: string;
    success: false;
};
/**
 * A `Compiler` is a wrapper around a specific `CompilationEnvironment` which
 * exposes a purely-functional interface and allows for stronger type checking.
 */
export interface Compiler<CompilerOperationData, ProgramState> {
    generateBytecode(script: string, data: CompilationData<CompilerOperationData>, debug: true): CompilationResult<ProgramState>;
    generateBytecode(script: string, data: CompilationData<CompilerOperationData>, debug?: false): BytecodeGenerationResult;
}
/**
 * Create a `Compiler` from the provided compilation environment. This method
 * requires a full `CompilationEnvironment` and does not instantiate any new
 * crypto or VM implementations.
 *
 * @param compilationEnvironment - the environment from which to create the
 * compiler
 */
export declare const createCompiler: <CompilerOperationData, ProgramState = StackState<Uint8Array> & MinimumProgramState<number>>(compilationEnvironment: CompilationEnvironment<CompilerOperationData, import("./language/resolve").CompilerOperationsMinimal>) => Compiler<CompilerOperationData, ProgramState>;
/**
 * A common `createState` implementation for most compilers.
 *
 * @param instructions - the list of instructions to incorporate in the created
 * state.
 */
export declare const compilerCreateStateCommon: (instructions: AuthenticationInstruction<any>[]) => import("../state").AuthenticationProgramStateCommon<any, unknown>;
/**
 * Create a compiler using the default BCH environment.
 *
 * Internally instantiates the necessary crypto and VM implementations – use
 * `createCompiler` for more control.
 *
 * @param overrides - a compilation environment from which properties will be used
 * to override properties of the default BCH environment
 */
export declare const createCompilerBCH: <CompilerOperationData extends CompilerOperationDataBCH, ProgramState extends AuthenticationProgramStateBCH>(overrides: CompilationEnvironment<CompilerOperationData, import("./language/resolve").CompilerOperationsMinimal>) => Promise<Compiler<CompilerOperationData, ProgramState>>;
//# sourceMappingURL=compiler.d.ts.map
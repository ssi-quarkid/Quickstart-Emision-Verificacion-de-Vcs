import { hexToBin, utf8ToBin } from '../../../format/format';
import { dateToLocktime } from '../../../format/time';
import { bigIntToScriptNumber } from '../../instruction-sets/instruction-sets';
import { compileScript } from './compile';
const pluckRange = (node) => ({
    endColumn: node.end.column,
    endLineNumber: node.end.line,
    startColumn: node.start.column,
    startLineNumber: node.start.line,
});
export var IdentifierResolutionType;
(function (IdentifierResolutionType) {
    IdentifierResolutionType["opcode"] = "opcode";
    IdentifierResolutionType["variable"] = "variable";
    IdentifierResolutionType["script"] = "script";
})(IdentifierResolutionType || (IdentifierResolutionType = {}));
var Constants;
(function (Constants) {
    Constants[Constants["hexByte"] = 2] = "hexByte";
})(Constants || (Constants = {}));
export const resolveScriptSegment = (segment, resolveIdentifiers) => {
    // eslint-disable-next-line complexity
    const resolved = segment.value.map((child) => {
        const range = pluckRange(child);
        switch (child.name) {
            case 'Identifier': {
                const identifier = child.value;
                const result = resolveIdentifiers(identifier);
                const ret = result.status
                    ? {
                        range,
                        type: 'bytecode',
                        value: result.bytecode,
                        ...(result.type === IdentifierResolutionType.opcode
                            ? {
                                opcode: identifier,
                            }
                            : result.type === IdentifierResolutionType.variable
                                ? {
                                    variable: identifier,
                                }
                                : // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
                                    result.type === IdentifierResolutionType.script
                                        ? { script: identifier, source: result.source }
                                        : { unknown: identifier }),
                    }
                    : {
                        range,
                        type: 'error',
                        value: result.error,
                    };
                return ret;
            }
            case 'Push':
                return {
                    range,
                    type: 'push',
                    value: resolveScriptSegment(child.value, resolveIdentifiers),
                };
            case 'Evaluation':
                return {
                    range,
                    type: 'evaluation',
                    value: resolveScriptSegment(child.value, resolveIdentifiers),
                };
            case 'BigIntLiteral':
                return {
                    literalType: 'BigIntLiteral',
                    range,
                    type: 'bytecode',
                    value: bigIntToScriptNumber(child.value),
                };
            case 'HexLiteral':
                return child.value.length % Constants.hexByte === 0
                    ? {
                        literalType: 'HexLiteral',
                        range,
                        type: 'bytecode',
                        value: hexToBin(child.value),
                    }
                    : {
                        range,
                        type: 'error',
                        value: `Improperly formed HexLiteral. HexLiteral must have a length divisible by 2, but this HexLiteral has a length of ${child.value.length}.`,
                    };
            case 'UTF8Literal':
                return {
                    literalType: 'UTF8Literal',
                    range,
                    type: 'bytecode',
                    value: utf8ToBin(child.value),
                };
            case 'Comment':
                return {
                    range,
                    type: 'comment',
                    value: child.value,
                };
            default:
                return {
                    range,
                    type: 'error',
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    value: `Unrecognized segment: ${child.name}`,
                };
        }
    });
    return resolved.length === 0
        ? [{ range: pluckRange(segment), type: 'comment', value: '' }]
        : resolved;
};
const articleAndVariableType = (variableType) => `${variableType === 'HDKey' ? 'an' : 'a'} ${variableType}`;
const attemptCompilerOperation = ({ data, environment, identifier, operationId, variableType, }) => {
    if (environment.operations !== undefined) {
        const operationsForType = environment.operations[variableType];
        if (operationsForType !== undefined) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const operation = operationsForType[operationId];
            if (operation !== undefined) {
                return operation(identifier, data, environment);
            }
        }
    }
    return `Identifer "${identifier}" refers to ${articleAndVariableType(variableType)} operation "${operationId}" which is not available to this compiler.`;
};
const variableTypeToDataProperty = {
    AddressData: 'addressData',
    HDKey: 'hdKeys',
    Key: 'keys',
    WalletData: 'walletData',
};
const defaultActionByVariableType = {
    AddressData: (identifier, data, variableId) => data.addressData !== undefined &&
        data.addressData[variableId] !== undefined
        ? data.addressData[variableId]
        : `Identifier "${identifier}" refers to an AddressData, but no AddressData for "${variableId}" were provided in the compilation data.`,
    HDKey: (identifier) => `Identifier "${identifier}" refers to an HDKey, but does not specify an operation, e.g. "${identifier}.public_key".`,
    Key: (identifier) => `Identifier "${identifier}" refers to a Key, but does not specify an operation, e.g. "${identifier}.public_key".`,
    WalletData: (identifier, data, variableId) => data.walletData !== undefined &&
        data.walletData[variableId] !== undefined
        ? data.walletData[variableId]
        : `Identifier "${identifier}" refers to a WalletData, but no WalletData for "${variableId}" were provided in the compilation data.`,
};
const aOrAnQuotedString = (word) => `${['a', 'e', 'i', 'o', 'u'].includes(word[0].toLowerCase()) ? 'an' : 'a'} "${word}"`;
export var BuiltInVariables;
(function (BuiltInVariables) {
    BuiltInVariables["currentBlockTime"] = "current_block_time";
    BuiltInVariables["currentBlockHeight"] = "current_block_height";
    BuiltInVariables["signingSerialization"] = "signing_serialization";
})(BuiltInVariables || (BuiltInVariables = {}));
/**
 * If the identifer can be successfully resolved as a variable, the result is
 * returned as a Uint8Array. If the identifier references a known variable, but
 * an error occurs in resolving it, the error is returned as a string.
 * Otherwise, the identifier is not recognized as a variable, and this method
 * simply returns `false`.
 */
// eslint-disable-next-line complexity
export const resolveAuthenticationTemplateVariable = (identifier, environment, data) => {
    const splitId = identifier.split('.');
    const variableId = splitId[0]; // eslint-disable-line prefer-destructuring
    const operationId = splitId[1];
    switch (variableId) {
        case BuiltInVariables.currentBlockHeight:
            return data.currentBlockHeight === undefined
                ? 'Tried to resolve the built-in variable "current_block_height", but the "currentBlockHeight" property was not provided in the compilation data.'
                : bigIntToScriptNumber(BigInt(data.currentBlockHeight));
        case BuiltInVariables.currentBlockTime:
            return data.currentBlockTime === undefined
                ? 'Tried to resolve the built-in variable "current_block_time", but the "currentBlockTime" property was not provided in the compilation data.'
                : dateToLocktime(data.currentBlockTime);
        case BuiltInVariables.signingSerialization:
            return operationId === undefined
                ? 'Tried to resolve an operation for the built-in variable "signing_serialization", but no operation was provided. Provide an operation like "signing_serialization.[operation]".'
                : attemptCompilerOperation({
                    data,
                    environment,
                    identifier,
                    operationId,
                    variableType: 'SigningSerialization',
                });
        default: {
            const selected = environment.variables?.[variableId];
            if (selected === undefined) {
                return false;
            }
            return data[variableTypeToDataProperty[selected.type]] === undefined
                ? `Identifier "${identifier}" is a ${selected.type}, but the compilation data does not include ${aOrAnQuotedString(variableTypeToDataProperty[selected.type])} property.`
                : operationId === undefined
                    ? defaultActionByVariableType[selected.type](identifier, data, variableId)
                    : attemptCompilerOperation({
                        data,
                        environment,
                        identifier,
                        operationId,
                        variableType: selected.type,
                    });
        }
    }
};
/**
 * Compile an internal script identifier.
 *
 * @remarks
 * If the identifer can be successfully resolved as a script, the script is
 * compiled and returned as a CompilationResultSuccess. If an error occurs in
 * compiling it, the error is returned as a string.
 *
 * Otherwise, the identifier is not recognized as a script, and this method
 * simply returns `false`.
 *
 * @param identifier - the identifier of the script to be resolved
 * @param data - the provided CompilationData
 * @param environment - the provided CompilationEnvironment
 * @param parentIdentifier - the identifier of the script which references the
 * script being resolved (for detecting circular dependencies)
 */
// eslint-disable-next-line complexity
export const resolveScriptIdentifier = ({ data, environment, identifier, parentIdentifier, }) => {
    if (environment.scripts[identifier] === undefined) {
        return false;
    }
    if (parentIdentifier !== undefined &&
        environment.sourceScriptIds !== undefined &&
        environment.sourceScriptIds.includes(parentIdentifier)) {
        return `A circular dependency was encountered. Script "${identifier}" relies on itself to be generated. (Parent scripts: ${environment.sourceScriptIds.join(', ')})`;
    }
    const result = compileScript(identifier, data, {
        ...environment,
        sourceScriptIds: [
            ...(environment.sourceScriptIds === undefined
                ? []
                : environment.sourceScriptIds),
            ...(parentIdentifier === undefined ? [] : [parentIdentifier]),
        ],
    });
    return result.success
        ? result
        : `Compilation error in resolved script, ${identifier}: ${result.errors
            .map(({ error, range }) => 
        // tslint:disable-next-line: no-unsafe-any
        `${error} [${range.startLineNumber}, ${range.startColumn}]`)
            .join(', ')}`;
};
/**
 * Return an `IdentifierResolutionFunction` for use in `resolveScriptSegment`.
 *
 * @param scriptId - the `id` of the script for which the resulting
 * `IdentifierResolutionFunction` will be used.
 * @param environment - a snapshot of the context around `scriptId`. See
 * `CompilationEnvironment` for details.
 * @param data - the actual variable values (private keys, shared wallet data,
 * shared address data, etc.) to use in resolving variables.
 */
export const createIdentifierResolver = (scriptId, data, environment) => 
// eslint-disable-next-line complexity
(identifier) => {
    const opcodeResult = environment.opcodes?.[identifier];
    if (opcodeResult !== undefined) {
        return {
            bytecode: opcodeResult,
            status: true,
            type: IdentifierResolutionType.opcode,
        };
    }
    const variableResult = resolveAuthenticationTemplateVariable(identifier, environment, data);
    if (variableResult !== false) {
        return typeof variableResult === 'string'
            ? { error: variableResult, status: false }
            : {
                bytecode: variableResult,
                status: true,
                type: IdentifierResolutionType.variable,
            };
    }
    const scriptResult = resolveScriptIdentifier({
        data,
        environment,
        identifier,
        parentIdentifier: scriptId,
    });
    if (scriptResult !== false) {
        return typeof scriptResult === 'string'
            ? { error: scriptResult, status: false }
            : {
                bytecode: scriptResult.bytecode,
                source: scriptResult.resolve,
                status: true,
                type: IdentifierResolutionType.script,
            };
    }
    return { error: `Unknown identifier '${identifier}'.`, status: false };
};
//# sourceMappingURL=data:application/json;base64,
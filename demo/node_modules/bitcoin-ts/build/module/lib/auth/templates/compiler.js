import { instantiateSecp256k1, instantiateSha256, } from '../../crypto/crypto';
import { bigIntToBinUint64LE, bigIntToBitcoinVarInt, numberToBinUint32LE, } from '../../format/format';
import { generateSigningSerializationBCH, SigningSerializationFlag, } from '../instruction-sets/common/signing-serialization';
import { createAuthenticationProgramExternalStateCommonEmpty, createAuthenticationProgramStateCommon, generateBytecodeMap, instantiateVirtualMachineBCH, instructionSetBCHCurrentStrict, OpcodesBCH, } from '../instruction-sets/instruction-sets';
import { compileScript, } from './language/compile';
import { resolveScriptIdentifier, } from './language/resolve';
/* eslint-disable camelcase */
export var SigningSerializationAlgorithmIdentifier;
(function (SigningSerializationAlgorithmIdentifier) {
    /**
     * A.K.A. `SIGHASH_ALL`
     */
    SigningSerializationAlgorithmIdentifier["all_outputs"] = "all_outputs";
    /**
     * A.K.A. `SIGHASH_ALL|ANYONE_CAN_PAY`
     */
    SigningSerializationAlgorithmIdentifier["all_outputs_single_input"] = "all_outputs_single_input";
    /**
     * A.K.A. `SIGHASH_SINGLE`
     */
    SigningSerializationAlgorithmIdentifier["corresponding_output"] = "corresponding_output";
    /**
     * A.K.A. `SIGHASH_SINGLE|ANYONE_CAN_PAY`
     */
    SigningSerializationAlgorithmIdentifier["corresponding_output_single_input"] = "corresponding_output_single_input";
    /**
     * A.K.A `SIGHASH_NONE`
     */
    SigningSerializationAlgorithmIdentifier["no_outputs"] = "no_outputs";
    /**
     * A.K.A `SIGHASH_NONE|ANYONE_CAN_PAY`
     */
    SigningSerializationAlgorithmIdentifier["no_outputs_single_input"] = "no_outputs_single_input";
})(SigningSerializationAlgorithmIdentifier || (SigningSerializationAlgorithmIdentifier = {}));
var ScriptGenerationError;
(function (ScriptGenerationError) {
    ScriptGenerationError["missingVm"] = "An evaluation is required, but no VM was provided.";
    ScriptGenerationError["missingSha256"] = "Sha256 is required, but no implementation was provided.";
    ScriptGenerationError["missingSecp256k1"] = "Secp256k1 is required, but no implementation was provided.";
})(ScriptGenerationError || (ScriptGenerationError = {}));
// eslint-disable-next-line complexity
const getSigningSerializationType = (algorithmIdentifier, prefix = '') => {
    switch (algorithmIdentifier) {
        case `${prefix}${SigningSerializationAlgorithmIdentifier.all_outputs}`:
            return Uint8Array.of(
            // eslint-disable-next-line no-bitwise
            SigningSerializationFlag.all_outputs | SigningSerializationFlag.fork_id);
        case `${prefix}${SigningSerializationAlgorithmIdentifier.all_outputs_single_input}`:
            return Uint8Array.of(
            // eslint-disable-next-line no-bitwise
            SigningSerializationFlag.all_outputs |
                SigningSerializationFlag.single_input |
                SigningSerializationFlag.fork_id);
        case `${prefix}${SigningSerializationAlgorithmIdentifier.corresponding_output}`:
            return Uint8Array.of(
            // eslint-disable-next-line no-bitwise
            SigningSerializationFlag.corresponding_output |
                SigningSerializationFlag.fork_id);
        case `${prefix}${SigningSerializationAlgorithmIdentifier.corresponding_output_single_input}`:
            return Uint8Array.of(
            // eslint-disable-next-line no-bitwise
            SigningSerializationFlag.corresponding_output |
                SigningSerializationFlag.single_input |
                SigningSerializationFlag.fork_id);
        case `${prefix}${SigningSerializationAlgorithmIdentifier.no_outputs}`:
            return Uint8Array.of(
            // eslint-disable-next-line no-bitwise
            SigningSerializationFlag.no_outputs | SigningSerializationFlag.fork_id);
        case `${prefix}${SigningSerializationAlgorithmIdentifier.no_outputs_single_input}`:
            return Uint8Array.of(
            // eslint-disable-next-line no-bitwise
            SigningSerializationFlag.no_outputs |
                SigningSerializationFlag.single_input |
                SigningSerializationFlag.fork_id);
        default:
            return undefined;
    }
};
var SignatureIdentifierConstants;
(function (SignatureIdentifierConstants) {
    SignatureIdentifierConstants[SignatureIdentifierConstants["variableIdIndex"] = 0] = "variableIdIndex";
    SignatureIdentifierConstants[SignatureIdentifierConstants["signingTargetIndex"] = 2] = "signingTargetIndex";
    SignatureIdentifierConstants[SignatureIdentifierConstants["expectedSegments"] = 3] = "expectedSegments";
})(SignatureIdentifierConstants || (SignatureIdentifierConstants = {}));
export const compilerOperationBCHGenerateSignature = (name, signingAlgorithm
// eslint-disable-next-line complexity
) => (identifier, data, environment) => {
    const { keys } = data;
    const { signatures, privateKeys } = keys;
    if (signatures !== undefined &&
        signatures[identifier] !== undefined) {
        return signatures[identifier];
    }
    const identifierSegments = identifier.split('.');
    if (identifierSegments.length !== SignatureIdentifierConstants.expectedSegments) {
        return `Invalid signature identifier. Signatures must be of the form: "[variable_id].${name}.[signing_serialization_type]".`;
    }
    const variableId = identifierSegments[SignatureIdentifierConstants.variableIdIndex];
    const algorithm = identifierSegments[SignatureIdentifierConstants.signingTargetIndex];
    const signingSerializationType = getSigningSerializationType(algorithm);
    if (signingSerializationType === undefined) {
        return `Unknown signing serialization algorithm, "${algorithm}".`;
    }
    if (privateKeys !== undefined &&
        privateKeys[variableId] !== undefined) {
        const privateKey = privateKeys[variableId];
        const { operationData } = data;
        if (operationData === undefined) {
            return `Could not construct the signature "${identifier}", signing serialization data was not provided in the compilation data.`;
        }
        const { secp256k1 } = environment;
        if (secp256k1 === undefined) {
            return ScriptGenerationError.missingSecp256k1;
        }
        const { sha256 } = environment;
        if (sha256 === undefined) {
            return ScriptGenerationError.missingSha256;
        }
        const serialization = generateSigningSerializationBCH({
            correspondingOutput: operationData.correspondingOutput,
            coveredBytecode: operationData.coveredBytecode,
            locktime: operationData.locktime,
            outpointIndex: operationData.outpointIndex,
            outpointTransactionHash: operationData.outpointTransactionHash,
            outputValue: operationData.outputValue,
            sequenceNumber: operationData.sequenceNumber,
            sha256,
            signingSerializationType,
            transactionOutpoints: operationData.transactionOutpoints,
            transactionOutputs: operationData.transactionOutputs,
            transactionSequenceNumbers: operationData.transactionSequenceNumbers,
            version: operationData.version,
        });
        const digest = sha256.hash(sha256.hash(serialization));
        const bitcoinEncodedSignature = Uint8Array.from([
            ...signingAlgorithm(secp256k1)(privateKey, digest),
            ...signingSerializationType,
        ]);
        return bitcoinEncodedSignature;
    }
    return `Identifier "${identifier}" refers to a signature, but no signatures or private keys for "${variableId}" were provided in the compilation data.`;
};
export const compilerOperationBCHGenerateDataSignature = (name, signingAlgorithm
// eslint-disable-next-line complexity
) => (identifier, data, environment) => {
    const { keys } = data;
    const { signatures, privateKeys } = keys;
    if (signatures !== undefined &&
        signatures[identifier] !== undefined) {
        return signatures[identifier];
    }
    const identifierSegments = identifier.split('.');
    if (identifierSegments.length !== SignatureIdentifierConstants.expectedSegments) {
        return `Invalid data signature identifier. Data signatures must be of the form: "[variable_id].${name}.[target_script_id]".`;
    }
    const variableId = identifierSegments[SignatureIdentifierConstants.variableIdIndex];
    const scriptId = identifierSegments[SignatureIdentifierConstants.signingTargetIndex];
    const signingTarget = environment.scripts[scriptId];
    const compiledTarget = resolveScriptIdentifier({
        data,
        environment,
        identifier: scriptId,
    });
    if (signingTarget === undefined || compiledTarget === false) {
        return `Data signature tried to sign an unknown target script, "${scriptId}".`;
    }
    if (typeof compiledTarget === 'string') {
        return compiledTarget;
    }
    if (privateKeys !== undefined &&
        privateKeys[variableId] !== undefined) {
        const privateKey = privateKeys[variableId];
        const { secp256k1 } = environment;
        if (secp256k1 === undefined) {
            return ScriptGenerationError.missingSecp256k1;
        }
        const { sha256 } = environment;
        if (sha256 === undefined) {
            return ScriptGenerationError.missingSha256;
        }
        const digest = sha256.hash(compiledTarget.bytecode);
        return signingAlgorithm(secp256k1)(privateKey, digest);
    }
    return `Identifier "${identifier}" refers to a data signature, but no signatures or private keys for "${variableId}" were provided in the compilation data.`;
};
var SigningSerializationIdentifierConstants;
(function (SigningSerializationIdentifierConstants) {
    SigningSerializationIdentifierConstants[SigningSerializationIdentifierConstants["operationIndex"] = 1] = "operationIndex";
    SigningSerializationIdentifierConstants[SigningSerializationIdentifierConstants["expectedSegments"] = 2] = "expectedSegments";
})(SigningSerializationIdentifierConstants || (SigningSerializationIdentifierConstants = {}));
// eslint-disable-next-line complexity
export const compilerOperationBCHGenerateSigningSerialization = (identifier, data, environment) => {
    const identifierSegments = identifier.split('.');
    if (identifierSegments.length !==
        SigningSerializationIdentifierConstants.expectedSegments) {
        return `Invalid signing serialization operation. Include the desired component or algorithm, e.g. "signing_serialization.version" or "signing_serialization.all_outputs".`;
    }
    const algorithmOrComponent = identifierSegments[SigningSerializationIdentifierConstants.operationIndex];
    const signingSerializationType = getSigningSerializationType(algorithmOrComponent, 'full_');
    const { operationData } = data;
    if (operationData === undefined) {
        return `Could not construct the signing serialization "${identifier}", signing serialization data was not provided in the compilation data.`;
    }
    const { sha256 } = environment;
    if (sha256 === undefined) {
        return ScriptGenerationError.missingSha256;
    }
    // eslint-disable-next-line functional/no-conditional-statement
    if (signingSerializationType === undefined) {
        switch (algorithmOrComponent) {
            case 'corresponding_output':
                return operationData.correspondingOutput === undefined
                    ? Uint8Array.of()
                    : operationData.correspondingOutput;
            case 'corresponding_output_hash':
                return operationData.correspondingOutput === undefined
                    ? Uint8Array.of()
                    : sha256.hash(sha256.hash(operationData.correspondingOutput));
            case 'covered_bytecode_length':
                return bigIntToBitcoinVarInt(BigInt(operationData.coveredBytecode.length));
            case 'covered_bytecode':
                return operationData.coveredBytecode;
            case 'locktime':
                return numberToBinUint32LE(operationData.locktime);
            case 'outpoint_index':
                return numberToBinUint32LE(operationData.outpointIndex);
            case 'outpoint_transaction_hash':
                return operationData.outpointTransactionHash;
            case 'output_value':
                return bigIntToBinUint64LE(BigInt(operationData.outputValue));
            case 'sequence_number':
                return numberToBinUint32LE(operationData.sequenceNumber);
            case 'transaction_outpoints':
                return operationData.transactionOutpoints;
            case 'transaction_outpoints_hash':
                return sha256.hash(sha256.hash(operationData.transactionOutpoints));
            case 'transaction_outputs':
                return operationData.transactionOutputs;
            case 'transaction_outputs_hash':
                return sha256.hash(sha256.hash(operationData.transactionOutputs));
            case 'transaction_sequence_numbers':
                return operationData.transactionSequenceNumbers;
            case 'transaction_sequence_numbers_hash':
                return sha256.hash(sha256.hash(operationData.transactionSequenceNumbers));
            case 'version':
                return numberToBinUint32LE(operationData.version);
            default:
                return `Unknown signing serialization algorithm or component, "${algorithmOrComponent}".`;
        }
    }
    return generateSigningSerializationBCH({
        correspondingOutput: operationData.correspondingOutput,
        coveredBytecode: operationData.coveredBytecode,
        locktime: operationData.locktime,
        outpointIndex: operationData.outpointIndex,
        outpointTransactionHash: operationData.outpointTransactionHash,
        outputValue: operationData.outputValue,
        sequenceNumber: operationData.sequenceNumber,
        sha256,
        signingSerializationType,
        transactionOutpoints: operationData.transactionOutpoints,
        transactionOutputs: operationData.transactionOutputs,
        transactionSequenceNumbers: operationData.transactionSequenceNumbers,
        version: operationData.version,
    });
};
/* eslint-disable camelcase */
export const getCompilerOperationsBCH = () => ({
    Key: {
        data_signature: compilerOperationBCHGenerateDataSignature('data_signature', (secp256k1) => secp256k1.signMessageHashDER),
        // eslint-disable-next-line complexity
        public_key: (identifier, data, environment) => {
            const { keys } = data;
            const { publicKeys, privateKeys } = keys;
            const [variableId] = identifier.split('.');
            if (publicKeys !== undefined &&
                publicKeys[variableId] !== undefined) {
                return publicKeys[variableId];
            }
            if (privateKeys !== undefined &&
                privateKeys[variableId] !== undefined) {
                const { secp256k1 } = environment;
                return secp256k1 === undefined
                    ? ScriptGenerationError.missingSecp256k1
                    : secp256k1.derivePublicKeyCompressed(privateKeys[variableId]);
            }
            return `Identifier "${identifier}" refers to a public key, but no public or private keys for "${variableId}" were provided in the compilation data.`;
        },
        schnorr_data_signature: compilerOperationBCHGenerateDataSignature('schnorr_data_signature', (secp256k1) => secp256k1.signMessageHashSchnorr),
        schnorr_signature: compilerOperationBCHGenerateSignature('schnorr_signature', (secp256k1) => secp256k1.signMessageHashSchnorr),
        signature: compilerOperationBCHGenerateSignature('signature', (secp256k1) => secp256k1.signMessageHashDER),
    },
    SigningSerialization: {
        corresponding_output: compilerOperationBCHGenerateSigningSerialization,
        corresponding_output_hash: compilerOperationBCHGenerateSigningSerialization,
        covered_bytecode: compilerOperationBCHGenerateSigningSerialization,
        covered_bytecode_length: compilerOperationBCHGenerateSigningSerialization,
        full_all_outputs: compilerOperationBCHGenerateSigningSerialization,
        full_all_outputs_single_input: compilerOperationBCHGenerateSigningSerialization,
        full_corresponding_output: compilerOperationBCHGenerateSigningSerialization,
        full_corresponding_output_single_input: compilerOperationBCHGenerateSigningSerialization,
        full_no_outputs: compilerOperationBCHGenerateSigningSerialization,
        full_no_outputs_single_input: compilerOperationBCHGenerateSigningSerialization,
        locktime: compilerOperationBCHGenerateSigningSerialization,
        outpoint_index: compilerOperationBCHGenerateSigningSerialization,
        outpoint_transaction_hash: compilerOperationBCHGenerateSigningSerialization,
        output_value: compilerOperationBCHGenerateSigningSerialization,
        sequence_number: compilerOperationBCHGenerateSigningSerialization,
        transaction_outpoints: compilerOperationBCHGenerateSigningSerialization,
        transaction_outpoints_hash: compilerOperationBCHGenerateSigningSerialization,
        transaction_outputs: compilerOperationBCHGenerateSigningSerialization,
        transaction_outputs_hash: compilerOperationBCHGenerateSigningSerialization,
        transaction_sequence_numbers: compilerOperationBCHGenerateSigningSerialization,
        transaction_sequence_numbers_hash: compilerOperationBCHGenerateSigningSerialization,
        version: compilerOperationBCHGenerateSigningSerialization,
    },
});
/**
 * Create a `Compiler` from the provided compilation environment. This method
 * requires a full `CompilationEnvironment` and does not instantiate any new
 * crypto or VM implementations.
 *
 * @param compilationEnvironment - the environment from which to create the
 * compiler
 */
export const createCompiler = (compilationEnvironment) => ({
    generateBytecode: (script, data, 
    // TODO: TS bug?
    // eslint-disable-next-line @typescript-eslint/no-inferrable-types
    debug = false
    // TODO: is there a way to avoid this `any`?
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ) => {
        const result = compileScript(script, data, compilationEnvironment);
        return debug
            ? result
            : result.success
                ? { bytecode: result.bytecode, success: true }
                : { errorType: result.errorType, errors: result.errors, success: false };
    },
});
/**
 * A common `createState` implementation for most compilers.
 *
 * @param instructions - the list of instructions to incorporate in the created
 * state.
 */
export const compilerCreateStateCommon = (
// eslint-disable-next-line @typescript-eslint/no-explicit-any
instructions) => createAuthenticationProgramStateCommon(instructions, [], createAuthenticationProgramExternalStateCommonEmpty());
/**
 * Create a compiler using the default BCH environment.
 *
 * Internally instantiates the necessary crypto and VM implementations – use
 * `createCompiler` for more control.
 *
 * @param overrides - a compilation environment from which properties will be used
 * to override properties of the default BCH environment
 */
export const createCompilerBCH = async (overrides) => {
    const [sha256, secp256k1, vm] = await Promise.all([
        instantiateSha256(),
        instantiateSecp256k1(),
        instantiateVirtualMachineBCH(instructionSetBCHCurrentStrict),
    ]);
    return createCompiler({
        ...{
            createState: compilerCreateStateCommon,
            opcodes: generateBytecodeMap(OpcodesBCH),
            operations: getCompilerOperationsBCH(),
            secp256k1,
            sha256,
            vm,
        },
        ...overrides,
    });
};
//# sourceMappingURL=data:application/json;base64,
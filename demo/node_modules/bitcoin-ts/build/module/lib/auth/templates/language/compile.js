import { getResolutionErrors } from './errors';
import { parseScript } from './parse';
import { reduceScript } from './reduce';
import { createIdentifierResolver, resolveScriptSegment, } from './resolve';
var Formatting;
(function (Formatting) {
    Formatting[Formatting["requiresCommas"] = 3] = "requiresCommas";
    Formatting[Formatting["requiresOr"] = 2] = "requiresOr";
})(Formatting || (Formatting = {}));
/**
 * The constant used by the parser to denote the end of the input
 */
const EOF = 'EOF';
/**
 * A text-formatting method to pretty-print the list of expected inputs
 * (`Encountered unexpected input while parsing script. Expected ...`). If
 * present, the `EOF` expectation is always moved to the end of the list.
 * @param expectedArray - the alphabetized list of expected inputs produced by
 * `parseScript`
 */
const describeExpectedInput = (expectedArray) => {
    const newArray = expectedArray.filter((value) => value !== EOF);
    // eslint-disable-next-line functional/no-conditional-statement
    if (newArray.length !== expectedArray.length) {
        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
        newArray.push('the end of the script');
    }
    const withoutLastElement = newArray.slice(0, newArray.length - 1);
    const lastElement = newArray[newArray.length - 1];
    return `Encountered unexpected input while parsing script. Expected ${newArray.length >= Formatting.requiresCommas
        ? withoutLastElement.join(', ').concat(`, or ${lastElement}`)
        : newArray.length === Formatting.requiresOr
            ? newArray.join(' or ')
            : lastElement}.`;
};
/**
 * Note, `compileScript` is the recommended API for using this method.
 */
export const compileScriptText = ({ data, environment, script, scriptId, }) => {
    const parseResult = parseScript(script);
    if (!parseResult.status) {
        return {
            errorType: 'parse',
            errors: [
                {
                    error: describeExpectedInput(parseResult.expected),
                    range: {
                        endColumn: parseResult.index.column,
                        endLineNumber: parseResult.index.line,
                        startColumn: parseResult.index.column,
                        startLineNumber: parseResult.index.line,
                    },
                },
            ],
            success: false,
        };
    }
    const resolver = createIdentifierResolver(scriptId, data, environment);
    const resolvedScript = resolveScriptSegment(parseResult.value, resolver);
    const resolutionErrors = getResolutionErrors(resolvedScript);
    if (resolutionErrors.length !== 0) {
        return {
            errorType: 'resolve',
            errors: resolutionErrors,
            parse: parseResult.value,
            resolve: resolvedScript,
            success: false,
        };
    }
    const reduction = reduceScript(resolvedScript, environment.vm, environment.createState);
    return {
        ...(reduction.errors === undefined
            ? { bytecode: reduction.bytecode, success: true }
            : { errorType: 'reduce', errors: reduction.errors, success: false }),
        parse: parseResult.value,
        reduce: reduction,
        resolve: resolvedScript,
    };
};
/**
 * Parse, resolve, and reduce the provided BTL script using the provided `data`
 * and `environment`.
 */
export const compileScript = (scriptId, data, environment) => {
    const script = environment.scripts[scriptId];
    if (script === undefined) {
        return {
            errorType: 'parse',
            errors: [
                {
                    error: `No script with an ID of '${scriptId}' was provided in the compilation environment.`,
                    range: {
                        endColumn: 0,
                        endLineNumber: 0,
                        startColumn: 0,
                        startLineNumber: 0,
                    },
                },
            ],
            success: false,
        };
    }
    return compileScriptText({
        data,
        environment,
        script,
        scriptId,
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvYXV0aC90ZW1wbGF0ZXMvbGFuZ3VhZ2UvY29tcGlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDL0MsT0FBTyxFQUFvQixXQUFXLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBcUMsTUFBTSxVQUFVLENBQUM7QUFDM0UsT0FBTyxFQUdMLHdCQUF3QixFQUd4QixvQkFBb0IsR0FDckIsTUFBTSxXQUFXLENBQUM7QUE0RG5CLElBQUssVUFHSjtBQUhELFdBQUssVUFBVTtJQUNiLCtEQUFrQixDQUFBO0lBQ2xCLHVEQUFjLENBQUE7QUFDaEIsQ0FBQyxFQUhJLFVBQVUsS0FBVixVQUFVLFFBR2Q7QUFFRDs7R0FFRztBQUNILE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQztBQUNsQjs7Ozs7O0dBTUc7QUFDSCxNQUFNLHFCQUFxQixHQUFHLENBQUMsYUFBdUIsRUFBRSxFQUFFO0lBQ3hELE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNoRSwrREFBK0Q7SUFDL0QsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLGFBQWEsQ0FBQyxNQUFNLEVBQUU7UUFDNUMseUZBQXlGO1FBQ3pGLFFBQVEsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztLQUN4QztJQUNELE1BQU0sa0JBQWtCLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNsRSxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FB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
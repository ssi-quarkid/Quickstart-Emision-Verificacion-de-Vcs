/* eslint-disable functional/no-let, init-declarations, functional/no-expression-statement */
import { randomBytes } from 'crypto';
import test from 'ava';
import suite from 'chuhai';
import { bigIntToBinUint64LE, bigIntToBinUint64LEClamped, binToBigIntUint64LE, binToBigIntUintBE, binToHex, binToNumberUint16LE, binToNumberUint32LE, numberToBinUint16LE, numberToBinUint16LEClamped, numberToBinUint32LE, numberToBinUint32LEClamped, } from '../lib';
test(`node: binToBigIntUintBE vs. binToHex -> BigInt()`, async (t) => {
    await suite(t.title, (s) => {
        let sourceBin;
        let num;
        let result;
        const nextCycle = () => {
            const uint256Length = 32;
            sourceBin = Uint8Array.from(randomBytes(uint256Length));
            num = binToBigIntUintBE(sourceBin);
        };
        nextCycle();
        s.bench('binToBigIntUintBE', () => {
            result = binToBigIntUintBE(sourceBin);
        });
        s.bench('binToHex -> BigInt()', () => {
            result = BigInt(`0x${binToHex(sourceBin)}`);
        });
        s.cycle(() => {
            t.deepEqual(result, num);
            nextCycle();
        });
    });
});
test(`node: numberToBinUint16LE vs. numberToBinUint16LEClamped`, async (t) => {
    await suite(t.title, (s) => {
        let expectedBin;
        let num;
        let resultBin;
        const nextCycle = () => {
            const uint16Length = 2;
            expectedBin = Uint8Array.from(randomBytes(uint16Length));
            num = binToNumberUint16LE(expectedBin);
        };
        nextCycle();
        s.bench('numberToBinUint16LE', () => {
            resultBin = numberToBinUint16LE(num);
        });
        s.bench('numberToBinUint16LEClamped', () => {
            resultBin = numberToBinUint16LEClamped(num);
        });
        s.cycle(() => {
            t.deepEqual(resultBin, expectedBin);
            nextCycle();
        });
    });
});
test(`node: numberToBinUint32LE vs. numberToBinUint32LEClamped`, async (t) => {
    await suite(t.title, (s) => {
        let expectedBin;
        let num;
        let resultBin;
        const nextCycle = () => {
            const uint32Length = 4;
            expectedBin = Uint8Array.from(randomBytes(uint32Length));
            num = binToNumberUint32LE(expectedBin);
        };
        nextCycle();
        s.bench('numberToBinUint32LE', () => {
            resultBin = numberToBinUint32LE(num);
        });
        s.bench('numberToBinUint32LEClamped', () => {
            resultBin = numberToBinUint32LEClamped(num);
        });
        s.cycle(() => {
            t.deepEqual(resultBin, expectedBin);
            nextCycle();
        });
    });
});
test(`node: bigIntToBinUint64LE vs. bigIntToBinUint64LEClamped`, async (t) => {
    await suite(t.title, (s) => {
        let expectedBin;
        let num;
        let resultBin;
        const nextCycle = () => {
            const uint64Length = 8;
            expectedBin = Uint8Array.from(randomBytes(uint64Length));
            num = binToBigIntUint64LE(expectedBin);
        };
        nextCycle();
        s.bench('bigIntToBinUint64LE', () => {
            resultBin = bigIntToBinUint64LE(num);
        });
        s.bench('bigIntToBinUint64LEClamped', () => {
            resultBin = bigIntToBinUint64LEClamped(num);
        });
        s.cycle(() => {
            t.deepEqual(resultBin, expectedBin);
            nextCycle();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVycy5iZW5jaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvZm9ybWF0L251bWJlcnMuYmVuY2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkZBQTZGO0FBRTdGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFckMsT0FBTyxJQUFJLE1BQU0sS0FBSyxDQUFDO0FBQ3ZCLE9BQU8sS0FBSyxNQUFNLFFBQVEsQ0FBQztBQUUzQixPQUFPLEVBQ0wsbUJBQW1CLEVBQ25CLDBCQUEwQixFQUMxQixtQkFBbUIsRUFDbkIsaUJBQWlCLEVBQ2pCLFFBQVEsRUFDUixtQkFBbUIsRUFDbkIsbUJBQW1CLEVBQ25CLG1CQUFtQixFQUNuQiwwQkFBMEIsRUFDMUIsbUJBQW1CLEVBQ25CLDBCQUEwQixHQUMzQixNQUFNLFFBQVEsQ0FBQztBQUVoQixJQUFJLENBQUMsa0RBQWtELEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ25FLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUN6QixJQUFJLFNBQXFCLENBQUM7UUFDMUIsSUFBSSxHQUFXLENBQUM7UUFDaEIsSUFBSSxNQUFjLENBQUM7UUFFbkIsTUFBTSxTQUFTLEdBQUcsR0FBRyxFQUFFO1lBQ3JCLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQztZQUN6QixTQUFTLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUN4RCxHQUFHLEdBQUcsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDO1FBQ0YsU0FBUyxFQUFFLENBQUM7UUFFWixDQUFDLENBQUMsS0FBSyxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtZQUNoQyxNQUFNLEdBQUcsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFD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
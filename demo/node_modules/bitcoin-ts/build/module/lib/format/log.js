import { binToHex } from './hex';
const defaultStringifySpacing = 2;
/**
 * A safe method to `JSON.stringify` a value, useful for debugging and logging
 * purposes.
 *
 * @remarks
 * Without modifications, `JSON.stringify` has several shortcomings in
 * debugging and logging usage:
 * - throws when serializing anything containing a `bigint`
 * - `Uint8Array`s are often serialized in base 10 with newlines between each
 *   index item
 * - `functions` and `symbols` are not clearly marked
 *
 * This method is more helpful in these cases:
 * - `bigint`: `0n` → `<bigint: 0n>`
 * - `Uint8Array`: `Uint8Array.of(0,0)` → `<Uint8Array: 0x0000>`
 * - `function`: `(x) => x * 2` → `<function: (x) => x * 2>`
 * - `symbol`: `Symbol(A)` → `<symbol: Symbol(A)>`
 *
 * @param value - the data to serialize
 * @param spacing - the number of spaces to use in
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const stringify = (value, spacing = defaultStringifySpacing) => JSON.stringify(value, 
// eslint-disable-next-line complexity
(_, item) => {
    const type = typeof item;
    const name = type === 'object' ? item.constructor.name : type;
    switch (name) {
        case 'Uint8Array':
            return `<Uint8Array: 0x${binToHex(item)}>`;
        case 'bigint':
            return `<bigint: ${item.toString()}n>`;
        case 'function':
        case 'symbol':
            return `<${name}: ${item.toString()}>`;
        default:
            return item;
    }
}, spacing);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9mb3JtYXQvbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFakMsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLENBQUM7QUFFbEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBQ0gsOERBQThEO0FBQzlELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQVUsRUFBRSxPQUFPLEdBQUcsdUJBQXVCLEVBQUUsRUFBRSxDQUN6RSxJQUFJLENBQUMsU0FBUyxDQUNaLEtBQUs7QUFDTCxzQ0FBc0M7QUFDdEMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDVixNQUFNLElBQUksR0FBRyxPQUFPLElBQUksQ0FBQztJQUN6QixNQUFNLElBQUksR0FBRyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBRSxJQUFlLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzFFLFFBQVEsSUFBSSxFQUFFO1FBQ1osS0FBSyxZQUFZO1lBQ2YsT0FBTyxrQkFBa0IsUUFBUSxDQUFDLElBQWtCLENBQUMsR0FBRyxDQUFDO1FBQzNELEtBQUssUUFBUTtZQUNYLE9BQU8sWUFBYSxJQUFlLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQztRQUNyRCxLQUFLLFVBQVUsQ0FBQztRQUNoQixLQUFLLFFBQVE7WUFDWCxPQUFPLElBQUksSUFBSSxLQUFNLElBQTBCLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztRQUNoRTtZQUNFLE9BQU8sSUFBSSxDQUFDO0tBQ2Y7QUFDSCxDQUFDLEVBQ0QsT0FBTyxDQUNSLENBQUMifQ==